{"version":3,"sources":["async-js/rx-js/markdowns/basics/1-building-blocks.md","async-js/rx-js/markdowns/basics/2-observables.md","async-js/rx-js/markdowns/basics/3-mouse-drags-example.md","async-js/rx-js/markdowns/basics/4-more-operators.md","async-js/rx-js/markdowns/basics/5-netflix-example.md","async-js/rx-js/markdowns/basics/6-three-dimensional-collection.md","async-js/rx-js/markdowns/basics/7-additional-array-operators.md","async-js/rx-js/markdowns/thinking-reactive/sync-vs-async.md","async-js/rx-js/markdowns/thinking-reactive/promise-doodle.jpg","async-js/rx-js/markdowns/thinking-reactive/thinking-reactively-1.jpg","effective-java/exceptions/markdowns/70-checked-exceptions.md","effective-java/exceptions/markdowns/74-document-exceptions.md","effective-java/exceptions/markdowns/75-exception-detail-messages.md","effective-java/exceptions/markdowns/76-failure-atomicity.md","effective-java/exceptions/markdowns/72-standard-exceptions.md","effective-java/exceptions/markdowns/73-throw-exceptions.md","effective-java/exceptions/markdowns/71-unnecessary-checked-exceptions.md","effective-java/exceptions/markdowns/69-when-to-use-exceptions.md","js-fundamentals/event-loop/markdowns/event-loop.md","effective-java/objects/markdowns/1-static-factory.md","effective-java/objects/markdowns/2-builder.md","effective-java/objects/markdowns/5-dependency-injection.md","effective-java/classes/markdowns/18-favor-composition.md","effective-java/classes/markdowns/17-minimize-mutability.md","async-js/basics/markdowns/basics.md","effective-java/generics/markdowns/29-generic-types.md","effective-java/generics/markdowns/26-raw-types.md","effective-java/generics/markdowns/27-unchecked-warnings.md","effective-java/generics/markdowns/28-prefer-lists.md","effective-java/generics/markdowns/30-generic-methods.md","effective-java/generics/markdowns/31-bounded-wildcards.md","effective-java/generics/markdowns/32-combine-generics-and-varargs.md","effective-java/generics/markdowns/33-typesafe-heterogeneous-containers.md","infrastructure/gcp/markdowns/gke-foundations/1-overview.md","infrastructure/gcp/markdowns/gke-foundations/2-resource-management.md","infrastructure/gcp/markdowns/gke-foundations/3-billing.md","infrastructure/gcp/markdowns/gke-foundations/4-intro-to-containers.md","infrastructure/gcp/markdowns/gke-foundations/5-container-images.md","infrastructure/gcp/markdowns/gke-foundations/6-intro-to-k8s.md","infrastructure/gcp/markdowns/gke-foundations/7-intro-to-gke.md","infrastructure/gcp/markdowns/gke-foundations/8-compute-options.md","infrastructure/gcp/markdowns/gke-foundations/9-k8s-concepts.md","infrastructure/gcp/markdowns/gke-foundations/10-k8s-control-plane.md","infrastructure/gcp/markdowns/security-in-gcp/1-approach.md","infrastructure/gcp/markdowns/security-in-gcp/2-cloud-identity.md","infrastructure/gcp/markdowns/security-in-gcp/3-iam.md","infrastructure/gcp/markdowns/security-in-gcp/iam-1.jpg","infrastructure/gcp/markdowns/security-in-gcp/4-vpc.md","infrastructure/gcp/markdowns/security-in-gcp/vpc-1.jpg","infrastructure/gcp/markdowns/security-in-gcp/vpc-2.jpg","typescript/production-ready/markdowns/1-overview.md","typescript/production-ready/markdowns/2-latest-typescript-features.md","typescript/production-ready/markdowns/3-app-vs-library-concerns.md","typescript/production-ready/markdowns/4-create-project-from-scratch.md","typescript/production-ready/markdowns/5-declaration-files.md","typescript/effective-typescript/markdowns/5-any.md","typescript/effective-typescript/markdowns/10-avoid-wrapper-types.md","typescript/effective-typescript/markdowns/3-code-gen.md","typescript/effective-typescript/markdowns/2-typescript-operations.md","typescript/effective-typescript/markdowns/11-excess-property-checking.md","typescript/effective-typescript/markdowns/1-js-and-ts-relationship.md","typescript/effective-typescript/markdowns/effective-type-item-1-1.jpg","typescript/effective-typescript/markdowns/8-spaces.md","typescript/effective-typescript/markdowns/4-structural-typing.md","typescript/effective-typescript/markdowns/9-avoid-type-assertions.md","typescript/effective-typescript/markdowns/12-type-to-function-expression.md","typescript/effective-typescript/markdowns/13-type-vs-interface.md","typescript/effective-typescript/markdowns/7-types-as-sets-of-values.md","typescript/effective-typescript/markdowns/6-use-your-editor.md","web-fundamentals/web-security/markdowns/web-security.md","web-fundamentals/web-performance/markdowns/web-performance.md","web-fundamentals/web-performance/markdowns/web-performance-1.png","web-fundamentals/http2/markdowns/http2.md","layout/menu/components/menu-item.tsx","layout/menu/components/menu.tsx","layout/menu/containers/menu.tsx","algorithms/overview.tsx","layout/menu/constants.ts","components/expandable-section.tsx","async-js/rx-js/basics.tsx","async-js/rx-js/thinking-reactive.tsx","async-js/rx-js/index.tsx","effective-java/exceptions/checked-exceptions.tsx","effective-java/exceptions/document-exceptions.tsx","effective-java/exceptions/exception-detail-messages.tsx","effective-java/exceptions/failure-atomicity.tsx","effective-java/exceptions/reuse-standard-exceptions.tsx","effective-java/exceptions/throw-exceptions.tsx","effective-java/exceptions/unnecessary-checked-exceptions.tsx","effective-java/exceptions/when-to-use-exceptions.tsx","effective-java/exceptions/index.tsx","js-fundamentals/event-loop/index.tsx","effective-java/objects/static-factory.tsx","effective-java/objects/builder.tsx","effective-java/objects/dependency-injection.tsx","effective-java/objects/index.tsx","effective-java/classes/favor-composition.tsx","effective-java/classes/minimize-mutability.tsx","effective-java/classes/index.tsx","async-js/basics/index.tsx","effective-java/generics/generic-types.tsx","effective-java/generics/raw-types.tsx","effective-java/generics/unchecked-warnings.tsx","effective-java/generics/prefer-lists.tsx","effective-java/generics/generic-methods.tsx","effective-java/generics/bounded-wildcards.tsx","effective-java/generics/combine-generics-and-varargs.tsx","effective-java/generics/typesafe-heterogeneous-containers.tsx","effective-java/generics/index.tsx","infrastructure/gcp/gke-foundation.tsx","infrastructure/gcp/security-in-gcp.tsx","infrastructure/gcp/index.tsx","typescript/production-ready/overview.tsx","typescript/production-ready/latest-typescript-features.tsx","typescript/production-ready/app-vs-library-concerns.tsx","typescript/production-ready/create-project-from-scratch.tsx","typescript/production-ready/declaration-files.tsx","typescript/production-ready/index.tsx","typescript/effective-typescript/any.tsx","typescript/effective-typescript/avoid-wrapper-types.tsx","typescript/effective-typescript/code-gen.tsx","typescript/effective-typescript/configuration-options.tsx","typescript/effective-typescript/excess-property-checking.tsx","typescript/effective-typescript/js-and-ts-relationship.tsx","typescript/effective-typescript/spaces.tsx","typescript/effective-typescript/structural-typing.tsx","typescript/effective-typescript/type-assertions.tsx","typescript/effective-typescript/type-to-function-expression.tsx","typescript/effective-typescript/type-vs-interface.tsx","typescript/effective-typescript/types-as-sets-of-values.tsx","typescript/effective-typescript/use-your-editor.tsx","typescript/effective-typescript/index.tsx","web-fundamentals/web-security/index.tsx","web-fundamentals/web-performance/index.tsx","web-fundamentals/http2/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","___HTML_LOADER_GET_SOURCE_FROM_IMPORT___","___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","code","MenuItem","memo","menuConfig","onClick","parent","showSubMenu","key","route","className","data-menuname","displayName","data-route","subMenu","menus","Menu","expandedMenu","onMenuItemClick","map","history","useHistory","useState","setExpandedMenu","useCallback","e","menuDisplayName","currentTarget","getAttribute","parentRoute","currentRoute","push","AlgorithmOverview","MENUS","ExpandableSection","children","description","title","expanded","setExpanded","toggleExpand","style","backgroundColor","padding","cursor","display","paddingRight","verticalAlign","fontSize","marginTop","buildingBlocksMd","require","observablesMd","mouseDragsExampleMd","moreOperatorsMd","netflixSearchExampleMd","threeDimensionalObservablesMd","additionalArrayOperatorsMd","Basics","thinkingReactivelyMd","ThinkingReactive","RxJs","rowGap","checkedExceptionsMd","CheckedExceptions","documentExceptionsMd","DocumentExceptions","exceptionDetailMessagesMd","ExceptionDetailMessages","failureAtomicityMd","FailureAtomicity","standardExceptionsMd","ReuseStandardExceptions","throwExceptionsMd","ThrowExceptions","unnecessaryCheckedExceptionsMd","UnnecessaryCheckedExceptions","whenToUseExceptionsMd","WhenToUseExceptions","Exceptions","eventLoopMd","EventLoop","staticFactoryMd","StaticFactory","builderMd","Builder","dependencyInjectionMd","DependencyInjection","ObjectCreationAndDestruction","favorCompositionMd","FavorComposition","minimizeMutabilitysMd","MinimizeMutability","ClassesAndInterfaces","basicsMd","genericTypesMd","GenericTypes","rawTypesMd","RawTypes","uncheckedWarningsMd","UncheckedWarnings","md","PreferLists","GenericMethods","BoundedWildcards","CombineGenericsAndVarargs","TypesafeHeterogeneousContainers","Generics","overviewMd","resourceManagementMd","billingMd","containersMd","containerImagesMd","k8sMd","gkeMd","computeOptionsMd","k8sComponentsMd","k8sControlPlaneMd","GkeFoundations","vpcMd","SecurityInGCP","GCP","Overview","latestTypeScriptFeaturesMd","LatestTypeScriptFeatures","appVsLibraryConcernsMd","AppVsLibraryConcerns","createProjectFromScratchMd","CreateProjectFromScratch","declarationFilesMd","DeclarationFiles","ProductionReadyTypeScript","Any","AvoidWrapperTypes","CodeGen","ConfigurationOptions","ExcessPropertyChecking","jsAndTsRelationshipMd","JsAndTsRelationship","Spaces","StructuralTyping","AvoidTypeAssertions","TypeToFunctionExpression","TypeVsInterface","TypesAsSetsOfValues","UseYourEditor","EffectiveTypeScript","WebSecurity","WebPerformance","HTTP2","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNAGAA,EAAOC,QAFI,6vJ,cCEXD,EAAOC,QAFI,gwL,cCEXD,EAAOC,QAFI,ie,cCEXD,EAAOC,QAFI,mpD,cCEXD,EAAOC,QAFI,87I,cCEXD,EAAOC,QAFI,y6D,cCEXD,EAAOC,QAFI,6lD,gBCAX,IAAIC,EAA2C,EAAQ,GACnDC,EAA6B,EAAQ,IACrCC,EAA6B,EAAQ,IAIrCC,EAAO,sjJAF2BH,EAAyCC,GAEuiJ,0gFADhlJD,EAAyCE,GACimO,82EAEhrOJ,EAAOC,QAAUI,G,gBCTjBL,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,mD,cCG3CD,EAAOC,QAFI,qpG,cCEXD,EAAOC,QAFI,o/B,cCEXD,EAAOC,QAFI,+9B,cCEXD,EAAOC,QAFI,k/F,cCEXD,EAAOC,QAFI,s6E,cCEXD,EAAOC,QAFI,y0D,cCEXD,EAAOC,QAFI,g1D,cCEXD,EAAOC,QAFI,wwG,cCEXD,EAAOC,QAFI,q0B,cCEXD,EAAOC,QAFI,iwI,cCEXD,EAAOC,QAFI,kgK,cCEXD,EAAOC,QAFI,g4E,cCEXD,EAAOC,QAFI,o5L,cCEXD,EAAOC,QAFI,k7H,cCEXD,EAAOC,QAFI,kse,cCEXD,EAAOC,QAFI,w6D,cCEXD,EAAOC,QAFI,k3E,cCEXD,EAAOC,QAFI,wiD,cCEXD,EAAOC,QAFI,inE,cCEXD,EAAOC,QAFI,ykG,cCEXD,EAAOC,QAFI,08G,cCEXD,EAAOC,QAFI,g1G,cCEXD,EAAOC,QAFI,kzJ,cCEXD,EAAOC,QAFI,kvG,cCEXD,EAAOC,QAFI,i9G,cCEXD,EAAOC,QAFI,o/D,cCEXD,EAAOC,QAFI,+mH,cCEXD,EAAOC,QAFI,2sN,cCEXD,EAAOC,QAFI,kqF,cCEXD,EAAOC,QAFI,2kF,cCEXD,EAAOC,QAFI,ysN,cCEXD,EAAOC,QAFI,ymF,cCEXD,EAAOC,QAFI,u6K,cCEXD,EAAOC,QAFI,8lQ,cCEXD,EAAOC,QAFI,8pS,gBCAX,IAIII,EAAO,u1CAJoC,EAAQ,EAGjBH,CAFL,EAAQ,KAGw2C,whVAEj5CF,EAAOC,QAAUI,G,gBCPjBL,EAAOC,QAAU,IAA0B,mC,gBCC3C,IAAIC,EAA2C,EAAQ,GACnDC,EAA6B,EAAQ,IACrCC,EAA6B,EAAQ,IAIrCC,EAAO,8xUAF2BH,EAAyCC,GAEqxU,k8HAD9zUD,EAAyCE,GACqwc,mlHAEp1cJ,EAAOC,QAAUI,G,gBCTjBL,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,cCG3CD,EAAOC,QAFI,+/B,cCEXD,EAAOC,QAFI,u/L,cCEXD,EAAOC,QAFI,ijC,cCEXD,EAAOC,QAFI,wwD,cCEXD,EAAOC,QAFI,iqD,cCEXD,EAAOC,QAFI,imE,cCEXD,EAAOC,QAFI,ioF,cCEXD,EAAOC,QAFI,23J,cCEXD,EAAOC,QAFI,+xD,cCEXD,EAAOC,QAFI,4+I,gBCAX,IAIII,EAAO,oqFAJoC,EAAQ,EAGjBH,CAFL,EAAQ,KAG0qF,grBAEntFF,EAAOC,QAAUI,G,gBCPjBL,EAAOC,QAAU,IAA0B,qD,cCG3CD,EAAOC,QAFI,svI,cCEXD,EAAOC,QAFI,u1F,cCEXD,EAAOC,QAFI,kyH,cCEXD,EAAOC,QAFI,6kE,cCEXD,EAAOC,QAFI,soG,cCEXD,EAAOC,QAFI,wrI,cCEXD,EAAOC,QAFI,4V,cCEXD,EAAOC,QAFI,imW,gBCAX,IAIII,EAAO,ihGAJoC,EAAQ,EAGjBH,CAFL,EAAQ,MAGghG,s6eAEzjGF,EAAOC,QAAUI,G,gBCPjBL,EAAOC,QAAU,IAA0B,+C,cCG3CD,EAAOC,QAFI,2rI,uGCUEK,EAAWC,gBAAgB,gBAAEC,EAAF,EAAEA,WAAYC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,OAAQC,EAA/B,EAA+BA,YAA/B,OACpC,yBACIC,IAAKJ,EAAWK,MAChBC,UAAS,UAAKJ,EAAS,gBAAkB,sBAAhC,YAAyDC,EAAc,WAAa,KAC7F,yBACIC,IAAI,eACJE,UAAU,yBACVC,gBAAeP,EAAWQ,YAC1BC,aAAYT,EAAWK,MACvBJ,QAASA,GAET,yBAAKG,IAAI,QAAQJ,EAAWQ,aAC3BL,GACG,yBAAKC,IAAI,QAAQE,UAAU,kBAA3B,WAMJH,GACIH,EAAWU,SACP,kBAAC,EAAD,CAAMC,MAAOX,EAAWU,QAASR,OAAQF,QCpBhDY,EAAOb,gBAAY,gBAAEc,EAAF,EAAEA,aAAcF,EAAhB,EAAgBA,MAAOT,EAAvB,EAAuBA,OAAQY,EAA/B,EAA+BA,gBAA/B,OAC5B,yBAAKV,IAAI,iBAAiBE,UAAWJ,EAAS,qBAAuB,kBAChES,EAAMI,KAAI,SAAAf,GAAU,OACjB,kBAACF,EAAD,CACIM,IAAKJ,EAAWK,MAChBL,WAAYA,EACZE,OAAQA,EACRC,YAAaH,EAAWQ,cAAgBK,EACxCZ,QAASa,WCRZF,G,MAAO,SAAC,GAA4B,IAA3BD,EAA0B,EAA1BA,MAAOT,EAAmB,EAAnBA,OACnBc,EAAUC,cAD4B,EAEJC,mBAAS,IAFL,mBAErCL,EAFqC,KAEvBM,EAFuB,KAGtCL,EAAkBM,uBAAY,SAACC,GAAmB,IAAD,EAEb,EADhCC,EAAe,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAGE,qBAAN,aAAG,EAAkBC,aAAa,iBACvD,GAAIX,IAAiBS,GAEjB,GADAH,EAAgBG,GAAmB,IACnC,OAAID,QAAJ,IAAIA,GAAJ,UAAIA,EAAGE,qBAAP,aAAI,EAAkBC,aAAa,cAAe,CAC9C,IAAMC,EAAcvB,EAAM,WAAOA,EAAOG,MAAd,KAAyB,IAC7CqB,EAAeL,EAAEE,cAAcC,aAAa,eAAiB,GAC7DnB,EAAK,UAAMoB,GAAN,OAAoBC,GAC/BV,EAAQW,KAAKtB,SAGjBc,EAAgB,MAErB,CAACN,EAAcM,IAElB,OACI,kBAAC,EAAD,CACIR,MAAOA,EACPG,gBAAiBA,EACjBD,aAAcA,EACdX,OAAQA,MChCP0B,EAAoB,kBAC7B,iCACI,oDCsGKC,G,MAA2B,CACpC,CACIrB,YAAa,aACbH,MAAO,4BACPK,QA5GkC,CACtC,CACIF,YAAa,QACbH,MAAO,SAEX,CACIG,YAAa,UACbH,MAAO,WAEX,CACIG,YAAa,gBACbH,MAAO,mBAmGX,CACIG,YAAa,kBACbH,MAAO,iCACPK,QAlGsC,CAC1C,CACIF,YAAa,iBACbH,MAAO,kBAEX,CACIG,YAAa,cACbH,MAAO,eAEX,CACIG,YAAa,aACbH,MAAO,cAEX,CACIG,YAAa,MACbH,MAAO,SAqFX,CACIG,YAAa,WACbH,MAAO,0BACPK,QApF+B,CACnC,CACIF,YAAa,SACbH,MAAO,UAEX,CACIG,YAAa,QACbH,MAAO,WA+EX,CACIG,YAAa,kBACbH,MAAO,iCACPK,QAjCsC,CAC1C,CACIF,YAAa,aACbH,MAAO,gBAgCX,CACIG,YAAa,mBACbH,MAAO,kCACPK,QAnFuC,CAC3C,CACIF,YAAa,QACbH,MAAO,SAEX,CACIG,YAAa,eACbH,MAAO,YAEX,CACIG,YAAa,kBACbH,MAAO,iBA0EX,CACIG,YAAa,sBACbH,MAAO,qCACPK,QAzEqC,CACzC,CACIF,YAAa,aACbH,MAAO,cAEX,CACIG,YAAa,gCACbH,MAAO,WAEX,CACIG,YAAa,yBACbH,MAAO,0BAEX,CACIG,YAAa,WACbH,MAAO,cA4DX,CACIG,YAAa,aACbH,MAAO,4BACPK,QA3DkC,CACtC,CACIF,YAAa,4BACbH,MAAO,kBAEX,CACIG,YAAa,8BACbH,MAAO,sBAsDX,CACIG,YAAa,iBACbH,MAAO,gCACPK,QA9CsC,CAC1C,CACIF,YAAa,wBACbH,MAAO,W,OC/FFyB,EAAoB,SAAC,GAAwD,IAAvDC,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,MAA+B,EACrDf,oBAAS,GAD4C,mBAC9EgB,EAD8E,KACpEC,EADoE,KAE/EC,EAAehB,uBAAY,WAC7Be,GAAaD,KACd,CAACA,IAEJ,OACI,6BACI,yBACIjC,QAASmC,EACTC,MAAO,CACHC,gBAAiB,UACjBC,QAASL,EAAW,qBAAuB,cAC3CM,OAAQ,YAGZ,yBACIH,MAAO,CACHI,QAAS,eACTC,aAAc,OACdC,cAAe,SACfC,SAAU,SAGbV,EAAW,IAAM,KAEtB,yBAAKG,MAAO,CAACI,QAAS,eAAgBE,cAAe,WACjD,yBAAKN,MAAO,CAACO,SAAU,SAAUX,GAChCD,GACG,yBAAKK,MAAO,CAACO,SAAU,OAAQC,UAAW,SAAUb,KAI/DE,GACG,yBAAKG,MAAO,CAACC,gBAAiB,YAAaP,KCrCrDe,EAAmBC,EAAQ,IAC3BC,EAAgBD,EAAQ,IACxBE,EAAsBF,EAAQ,IAC9BG,EAAkBH,EAAQ,IAC1BI,EAAyBJ,EAAQ,IACjCK,EAAgCL,EAAQ,IACxCM,EAA6BN,EAAQ,IAE9BO,EAAS,kBAClB,iCACI,kBAAC,EAAD,CAAmBrB,MAAM,eACrB,yBAAKI,MAAO,CAACE,QAAS,wBAClB,kBAAC,IAAD,KAAWO,IAEf,yBAAKT,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWS,IAEf,yBAAKX,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWU,IAEf,yBAAKZ,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWW,IAEf,yBAAKb,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWY,IAEf,yBAAKd,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWa,IAEf,yBAAKf,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWc,OC9BrBE,EAAuBR,EAAQ,IAExBS,EAAmB,kBAC5B,iCACI,kBAAC,EAAD,CACIxB,YAAY,wEACZC,MAAM,uBAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWgB,OCVdE,EAAO,kBAChB,6BAASpB,MAAO,CAACI,QAAS,OAAQiB,OAAQ,WACtC,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFFC,EAAsBZ,EAAQ,IAEvBa,EAAoB,kBAC7B,iCACI,kBAAC,EAAD,CACI5B,YAAY,iGACZC,MAAM,+CAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWoB,OCTrBE,EAAuBd,EAAQ,IAExBe,EAAqB,kBAC9B,iCACI,kBAAC,EAAD,CAAmB7B,MAAM,iDACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWsB,OCNrBE,EAA4BhB,EAAQ,IAE7BiB,EAA0B,kBACnC,iCACI,kBAAC,EAAD,CAAmB/B,MAAM,0DACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWwB,OCNrBE,EAAqBlB,EAAQ,IAEtBmB,EAAmB,kBAC5B,iCACI,kBAAC,EAAD,CAAmBjC,MAAM,gCACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0B,OCNrBE,EAAuBpB,EAAQ,IAExBqB,EAA0B,kBACnC,iCACI,kBAAC,EAAD,CAAmBnC,MAAM,oCACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW4B,OCNrBE,EAAoBtB,EAAQ,IAErBuB,EAAkB,kBAC3B,iCACI,kBAAC,EAAD,CAAmBrC,MAAM,oDACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW8B,OCNrBE,EAAiCxB,EAAQ,IAElCyB,EAA+B,kBACxC,iCACI,kBAAC,EAAD,CAAmBvC,MAAM,wCACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWgC,OCNrBE,EAAwB1B,EAAQ,IAEzB2B,EAAsB,kBAC/B,iCACI,kBAAC,EAAD,CACI1C,YAAY,iDACZC,MAAM,0BAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWkC,OCJdE,EAAa,kBACtB,6BAAStC,MAAO,CAACI,QAAS,OAAQiB,OAAQ,WACtC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QChBFkB,EAAc7B,EAAQ,IAEf8B,EAAY,kBACrB,iCACI,yBAAKxC,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWqC,MCHjBE,EAAkB/B,EAAQ,IAEnBgC,EAAgB,kBACzB,iCACI,kBAAC,EAAD,CACI/C,YAAY,0DACZC,MAAM,yBAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWuC,OCTrBE,EAAYjC,EAAQ,IAEbkC,EAAU,kBACnB,iCACI,kBAAC,EAAD,CACIjD,YAAY,kEACZC,MAAM,4CAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWyC,OCTrBE,EAAwBnC,EAAQ,IAEzBoC,EAAsB,kBAC/B,iCACI,kBAAC,EAAD,CAAmBlD,MAAM,yDACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW2C,OCNdE,EAA+B,kBACxC,6BAAS/C,MAAO,CAACI,QAAS,OAAQiB,OAAQ,WACtC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJF2B,GAAqBtC,EAAQ,IAEtBuC,GAAmB,kBAC5B,iCACI,kBAAC,EAAD,CAAmBrD,MAAM,sCACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW8C,QCNrBE,GAAwBxC,EAAQ,IAEzByC,GAAqB,kBAC9B,iCACI,kBAAC,EAAD,CAAmBvD,MAAM,wBACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWgD,QCPdE,GAAuB,kBAChC,6BAASpD,MAAO,CAACI,QAAS,OAAQiB,OAAQ,WACtC,kBAAC,GAAD,MACA,kBAAC,GAAD,QCJFgC,GAAW3C,EAAQ,IAEZO,GAAS,kBAClB,iCACI,yBAAKjB,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWmD,OCHjBC,GAAiB5C,EAAQ,IAElB6C,GAAe,kBACxB,iCACI,kBAAC,EAAD,CAAmB3D,MAAM,uBACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWoD,QCNrBE,GAAa9C,EAAQ,IAEd+C,GAAW,kBACpB,iCACI,kBAAC,EAAD,CAAmB7D,MAAM,wBACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWsD,QCNrBE,GAAsBhD,EAAQ,IAEvBiD,GAAoB,kBAC7B,iCACI,kBAAC,EAAD,CAAmB/D,MAAM,gCACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWwD,QCNrBE,GAAKlD,EAAQ,IAENmD,GAAc,kBACvB,iCACI,kBAAC,EAAD,CAAmBjE,MAAM,0BACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCNrBA,GAAKlD,EAAQ,IAENoD,GAAiB,kBAC1B,iCACI,kBAAC,EAAD,CAAmBlE,MAAM,yBACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCNrBA,GAAKlD,EAAQ,IAENqD,GAAmB,kBAC5B,iCACI,kBAAC,EAAD,CAAmBnE,MAAM,qDACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCNrBA,GAAKlD,EAAQ,IAENsD,GAA4B,kBACrC,iCACI,kBAAC,EAAD,CAAmBpE,MAAM,4CACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCNrBA,GAAKlD,EAAQ,IAENuD,GAAkC,kBAC3C,iCACI,kBAAC,EAAD,CAAmBrE,MAAM,6CACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCDdM,GAAW,kBACpB,6BAASlE,MAAO,CAACI,QAAS,OAAQiB,OAAQ,WACtC,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,QCdF8C,GAAazD,EAAQ,IACrB0D,GAAuB1D,EAAQ,IAC/B2D,GAAY3D,EAAQ,IACpB4D,GAAe5D,EAAQ,IACvB6D,GAAoB7D,EAAQ,IAC5B8D,GAAQ9D,EAAQ,IAChB+D,GAAQ/D,EAAQ,IAChBgE,GAAmBhE,EAAQ,IAC3BiE,GAAkBjE,EAAQ,IAC1BkE,GAAoBlE,EAAQ,IAErBmE,GAAiB,kBAC1B,iCACI,kBAAC,EAAD,CAAmBjF,MAAM,sCACrB,yBAAKI,MAAO,CAACE,QAAS,wBAClB,kBAAC,IAAD,KAAWiE,KAEf,yBAAKnE,MAAO,CAACE,QAAS,wBAClB,kBAAC,IAAD,KAAWkE,KAEf,yBAAKpE,MAAO,CAACE,QAAS,wBAClB,kBAAC,IAAD,KAAWmE,KAEf,yBAAKrE,MAAO,CAACE,QAAS,wBAClB,kBAAC,IAAD,KAAWoE,KAEf,yBAAKtE,MAAO,CAACE,QAAS,wBAClB,kBAAC,IAAD,KAAWqE,KAEf,yBAAKvE,MAAO,CAACE,QAAS,wBAClB,kBAAC,IAAD,KAAWsE,KAEf,yBAAKxE,MAAO,CAACE,QAAS,wBAClB,kBAAC,IAAD,KAAWuE,KAEf,yBAAKzE,MAAO,CAACE,QAAS,wBAClB,kBAAC,IAAD,KAAWwE,KAEf,yBAAK1E,MAAO,CAACE,QAAS,wBAClB,kBAAC,IAAD,KAAWyE,KAEf,yBAAK3E,MAAO,CAACE,QAAS,wBAClB,kBAAC,IAAD,KAAW0E,QC1CrBT,GAAazD,EAAQ,IAGrBoE,IAFkBpE,EAAQ,IAClBA,EAAQ,IACRA,EAAQ,KAETqE,GAAgB,kBACzB,iCACI,kBAAC,EAAD,CAAmBnF,MAAM,mBACrB,yBAAKI,MAAO,CAACE,QAAS,wBAClB,kBAAC,IAAD,KAAWiE,KAQf,yBAAKnE,MAAO,CAACE,QAAS,wBAClB,kBAAC,IAAD,KAAW4E,QCnBdE,GAAM,kBACf,6BAAShF,MAAO,CAACI,QAAS,OAAQiB,OAAQ,WACtC,kBAAC,GAAD,MACA,kBAAC,GAAD,QCFF8C,GAAazD,EAAQ,IAEduE,GAAW,kBACpB,iCACI,kBAAC,EAAD,CAAmBrF,MAAM,0BACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWiE,QCNrBe,GAA6BxE,EAAQ,IAE9ByE,GAA2B,kBACpC,iCACI,kBAAC,EAAD,CAAmBvF,MAAM,6CACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWgF,QCNrBE,GAAyB1E,EAAQ,IAE1B2E,GAAuB,kBAChC,iCACI,kBAAC,EAAD,CAAmBzF,MAAM,mCACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWkF,QCNrBE,GAA6B5E,EAAQ,IAE9B6E,GAA2B,kBACpC,iCACI,kBAAC,EAAD,CAAmB3F,MAAM,+BACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWoF,QCNrBE,GAAqB9E,EAAQ,IAEtB+E,GAAmB,kBAC5B,iCACI,kBAAC,EAAD,CAAmB7F,MAAM,qBACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAWsF,QCJdE,GAA4B,kBACrC,6BAAS1F,MAAO,CAACI,QAAS,OAAQiB,OAAQ,WACtC,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,QCRFuC,GAAKlD,EAAQ,IAENiF,GAAM,kBACf,iCACI,kBAAC,EAAD,CAAmB/F,MAAM,6BACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCNrBA,GAAKlD,EAAQ,IAENkF,GAAoB,kBAC7B,iCACI,kBAAC,EAAD,CAAmBhG,MAAM,8BACrB,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCNrBA,GAAKlD,EAAQ,IAENmF,GAAU,kBACnB,iCACI,kBAAC,EAAD,CACIjG,MAAM,sDAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCRrBA,GAAKlD,EAAQ,IAENoF,GAAuB,kBAChC,iCACI,kBAAC,EAAD,CACIlG,MAAM,+CAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCRrBA,GAAKlD,EAAQ,IAENqF,GAAyB,kBAClC,iCACI,kBAAC,EAAD,CACInG,MAAM,oDAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCRrBoC,GAAwBtF,EAAQ,IAEzBuF,GAAsB,kBAC/B,iCACI,kBAAC,EAAD,CACIrG,MAAM,+DAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW8F,QCRrBpC,GAAKlD,EAAQ,IAENwF,GAAS,kBAClB,iCACI,kBAAC,EAAD,CACItG,MAAM,qEAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCRrBA,GAAKlD,EAAQ,IAENyF,GAAmB,kBAC5B,iCACI,kBAAC,EAAD,CACIvG,MAAM,0CAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCRrBA,GAAKlD,EAAQ,IAEN0F,GAAsB,kBAC/B,iCACI,kBAAC,EAAD,CACIxG,MAAM,6CAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCRrBA,GAAKlD,EAAQ,IAEN2F,GAA2B,kBACpC,iCACI,kBAAC,EAAD,CACIzG,MAAM,2DAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCRrBA,GAAKlD,EAAQ,IAEN4F,GAAkB,kBAC3B,iCACI,kBAAC,EAAD,CACI1G,MAAM,kDAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCRrBA,GAAKlD,EAAQ,IAEN6F,GAAsB,kBAC/B,iCACI,kBAAC,EAAD,CACI3G,MAAM,oCAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCRrBA,GAAKlD,EAAQ,IAEN8F,GAAgB,kBACzB,iCACI,kBAAC,EAAD,CACI5G,MAAM,8DAEN,yBAAKI,MAAO,CAACE,QAAS,cAClB,kBAAC,IAAD,KAAW0D,QCCd6C,GAAsB,kBAC/B,6BAASzG,MAAO,CAACI,QAAS,OAAQiB,OAAQ,WACtC,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,QCzBFuC,GAAKlD,EAAQ,KAENgG,GAAc,kBACvB,6BAAS1G,MAAO,CAACI,QAAS,OAAQiB,OAAQ,WACtC,kBAAC,IAAD,KAAWuC,MCJbA,GAAKlD,EAAQ,KAENiG,GAAiB,kBAC1B,6BAAS3G,MAAO,CAACI,QAAS,OAAQiB,OAAQ,WACtC,kBAAC,IAAD,KAAWuC,MCJbA,GAAKlD,EAAQ,KAENkG,GAAQ,kBACjB,6BAAS5G,MAAO,CAACI,QAAS,OAAQiB,OAAQ,WACtC,kBAAC,IAAD,KAAWuC,MCuGJiD,OAzFf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK5I,UAAU,OACb,kBAAC,EAAD,CAAMK,MAAOkB,IACb,yBAAKvB,UAAU,sBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,6BACLC,UAAWzH,IAEb,kBAAC,IAAD,CACEuH,OAAK,EACLC,KAAK,kCACLC,UAAW/F,KAEb,kBAAC,IAAD,CACE6F,OAAK,EACLC,KAAK,iCACLC,UAAW5F,IAEb,kBAAC,IAAD,CACE0F,OAAK,EACLC,KAAK,iDACLC,UAAW1E,IAEb,kBAAC,IAAD,CACEwE,OAAK,EACLC,KAAK,+CACLC,UAAW9C,KAEb,kBAAC,IAAD,CACE4C,OAAK,EACLC,KAAK,8CACLC,UAAWjE,IAEb,kBAAC,IAAD,CACE+D,OAAK,EACLC,KAAK,6DACLC,UAAW5D,KAEb,kBAAC,IAAD,CACE0D,OAAK,EACLC,KAAK,6BACLC,UAAWP,KAEb,kBAAC,IAAD,CACEK,OAAK,EACLC,KAAK,4CACLC,UAAWP,KAEb,kBAAC,IAAD,CACEK,OAAK,EACLC,KAAK,8CACLC,UAAWtB,KAEb,kBAAC,IAAD,CACEoB,OAAK,EACLC,KAAK,6CACLC,UAAWxE,IAEb,kBAAC,IAAD,CACEsE,OAAK,EACLC,KAAK,qCACLC,UAAWhC,KAEb,kBAAC,IAAD,CACE8B,OAAK,EACLC,KAAK,4CACLC,UAAWN,KAEb,kBAAC,IAAD,CACEI,OAAK,EACLC,KAAK,+CACLC,UAAWL,KAEb,kBAAC,IAAD,CACEG,OAAK,EACLC,KAAK,yCACLC,UAAWJ,UCzFLK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,e","file":"static/js/main.5e31e8cf.chunk.js","sourcesContent":["// Module\nvar code = \"<h2 id=\\\"building-blocks\\\">Building Blocks</h2> <p>Async seems hard:</p> <ul> <li>Race conditions: you can start two actions, they are running concurrently, expecting one will be finished before the other, or <em>enforce</em> it to finish before the other.</li> <li>Memory leaks: attaching a DOM event but forgetting to detach it from the DOM.</li> <li>Complex state machines</li> <li>Uncaught async errors</li> <li>Callback hell</li> <li>Code is hard to understand and debug in general<pre>\\nfunction play(movieId, cancelButton, callback) {\\n  // movieTicket and playErrors are your \\\\\\\\\\\"states\\\\\\\\\\\" to\\n  // track and manage.\\n  var movieTicket, playError;\\n  var tryFinish = function() {\\n      if (playError) {\\n          callback(null, playError);\\n      } else if (movieTicket && player.initialized) {\\n          callback(null, ticket);\\n      }\\n  };\\n  // Here is a bug: the click event is not detached anywhere.\\n  cancelButton.addEvent(\\\\\\\\\\\"click\\\\\\\\\\\", function() {\\n      playError = \\\"cancelled\\\";\\n  });\\n  if (!player.initialized) {\\n      player.init(function(error) {\\n          playerError = error;\\n          tryFinish();\\n      });\\n  }\\n  authorizeMovie(function(error, ticket)) {\\n      playError = error;\\n      movieTicket = ticket;\\n      tryFinish();\\n  });\\n}\\n</pre> </li> </ul> <h3 id=\\\"functions\\\">Functions</h3> <p>Async Programming without <em>loops</em>. You cannot repeat asynchronous function with a loop.</p> <h4 id=\\\"foreach\\\"><code>forEach</code></h4> <p><code>forEach</code> takes in a function and applies the function to each of the items in an array.</p> <pre>\\n[1, 2, 3].forEach(x => console.log(x));\\n</pre> <h4 id=\\\"map\\\"><code>map</code></h4> <p><code>map</code> takes in a function and applies it to every item in an array creating a new value and put it into a new array. <strong><code>map</code> does not mutate the original array.</strong></p> <pre>\\n[1, 2, 3].map(x => x + 1);\\n</pre> <h4 id=\\\"filter\\\"><code>filter</code></h4> <p><code>filter</code> takes in a test function and applies it to every item in an array, only the items that pass the test would make it into the new array <code>filter</code> returns.</p> <pre>\\n[1, 2, 3].filter(x => x > 1);\\n</pre> <h4 id=\\\"concatall\\\"><code>concatAll</code></h4> <p><code>concatAll</code> takes in a multi-dimensional array and flattens it into a single-dimensional array.</p> <pre>\\n[[1], [2, 3], [], [4]].concatAll();\\n</pre> <p>Note: <code>concatAll</code> is not available in native JavaScript.</p> <h4 id=\\\"example-mouse-drag-collection\\\">Example: Mouse Drag Collection</h4> <pre>\\nconst getElementDrags = elmt => elmt.mouseDowns\\n    .map(mouseDown => (\\n        // Think of takeUntil as filter, it maps a mouseDown\\n        // event to a mouseMove until a mouseUp event happens.\\n        document.mouseMoves.takeUntil(document.mouseUps)\\n    ))\\n    .concatAll();\\ngetElementDrags(image).forEach(pos => image.position = pos);\\n</pre> <h3 id=\\\"events\\\">Events</h3> <p><strong>Events and Arrays are both collections.</strong></p> <p>Then why cannot we program them the same way?</p> <h4 id=\\\"iterator-vs-observer\\\">Iterator vs. Observer</h4> <h5 id=\\\"how-does-iterator-work\\\">How does iterator work?</h5> <p>There are a PRODUCER and a CONSUMER. The consumer requests/<strong>pulls</strong> information one at a time from the producer until the producer has no item left.</p> <pre>\\nconst iterator = [1, 2, 3].iterator();\\n// Interface of an iterator\\nconsole.log(iterator.next());\\n// print: {value: 1, done: false}\\n</pre> <p>Note: <code>map</code>, <code>filter</code> and <code>concatAll</code> can be implemented using an iterator.</p> <h4 id=\\\"observables--observers\\\">Observables &amp; Observers</h4> <p>The main usage of this deisgn pattern is building user interfaces. If you have a change to your data model, how do you communicate it with your views and visa versa?</p> <pre>\\ndocument.addEventListener(\\\\\\\\\\\"mousemove\\\\\\\\\\\", function(event) {\\n    console.log(event);\\n});\\n</pre> <p>The best example of this design pattern is <strong>DOM events</strong>: you can add a function to a data producer and instead of the consumer pulling the data out of the producer, the producer <strong>pushes</strong> the data to the consumers.</p> <h4 id=\\\"summary\\\">Summary</h4> <ul> <li>Iterators and observables both <strong>progressively</strong> send information to the consumers.</li> <li>Iterators and observables are symmetrical, except there is no way defined for Observable design pattern to indicate the data stream ends or errors out.<ul> <li>in JavaScript world, we do not just handle DOM events, we handle data streams that end all the time.</li> </ul> </li> </ul> <p>We have defined so many Push APIs that helps handle or inidicate the completion/error of the data stream:</p> <ul> <li>Websockets</li> <li>Server-sent events</li> <li>Node streams</li> <li>...</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<hr> <h2 id=\\\"observerables--observers\\\">Observerables &amp; Observers</h2> <p><strong>Observable === Collection + Time</strong></p> <p>An Observable is a collection of which items are arrives over time.</p> <h3 id=\\\"why-is-observable-so-powerful\\\">Why is Observable so powerful?</h3> <p>Observables can model:</p> <ul> <li>Events</li> <li>Async server requests</li> <li>Animations</li> <li>Ported to many languages<ul> <li>C</li> <li>.NET</li> <li>JavaScript</li> <li>Java (Netflix)</li> <li>Objective-C</li> </ul> </li> </ul> <h3 id=\\\"events-to-observables\\\">Events to observables</h3> <p>We need to take all of these async APIs (e.g., DOM events) and adapt them into Observables.</p> <pre>\\n// fromEvent takes a DOM object and a DOM event and adapt them into an Observable\\nconst mouseMoves = Observable.fromEvent(element, \\\"mousemove\\\");\\n</pre> <h3 id=\\\"event-subscription\\\">Event subscription</h3> <pre>\\n// Subscribe in the traditional way\\nconst handler = (event) => console.log(event);\\ndocument.addEventListener(\\\"mousemove\\\", handler);\\n// Unsubscribe in the tranditional way\\ndocument.removeEventListener(\\\"mousemove\\\", handler);\\n</pre> <p>Use <code>Obserable.forEach</code>:</p> <pre>\\n// Subscribe\\nconst subscription = mouseMoves.forEach(console.log);\\n// Unsubscribe\\nsubscription.dispose();\\n</pre> <p>Note: the difference between <code>Obserable.forEach</code> and <code>Array.forEach</code> is <code>Obserable.forEach</code> returns a subscription object.</p> <ul> <li>Each iteration of <code>Array.forEach</code> completes synchronously (immediately). <code>Array.forEach</code> runs through the entire array with the given callback function and then <strong>finish</strong>.</li> <li>Observable is a collection that arrives <strong>over time</strong>. When you <code>forEach</code> over an <code>Observable</code>, as the items arrive over time, the callback function gets invoked.</li> <li>When you do not care about the data from the <code>Observable</code> any more, you need a way to unsubscribe to the <code>Observable</code>.</li> </ul> <p>Expanded <code>Observable.forEach</code>:</p> <pre>\\nconst subscription = mouseMoves.forEach(\\n    // Observer object\\n    {\\n        // next data | required: receiving data\\n        onNext: event => console.log(event),\\n        // error | optional: error out\\n        onError: error => console.error(error),\\n        // completed | optional: no more data is arriving\\n        onCompleted: () => console.log(\\\"done!\\\")\\n    }\\n);\\n</pre> <h3 id=\\\"observable-metaphor\\\">Observable metaphor</h3> <p>The fundatmental difference between Observable &amp; Observer and Iterator patterns is <strong>who is in control</strong>.</p> <ul> <li>is the puller in control -&gt; Iterator, the consumer is in control.</li> <li>is the pusher in control -&gt; Observable &amp; observer, the producer is in control.</li> </ul> <h3 id=\\\"converting-events-to-observables\\\">Converting events to observables</h3> <pre>\\nObservale.fromEvent = function(domElement, eventName) {\\n    // returning Observable object\\n    return {\\n        forEach: function(observer) {\\n            const handler = (event) => observer.onNext(event);\\n            element.addEventListener(eventName, handler);\\n            return {\\n                dispose: function() {\\n                    element.removeEventListener(eventName, handler);\\n                }\\n            }\\n        }\\n    };\\n};\\n</pre> <h2 id=\\\"flatten-an-observable-of-observables\\\">Flatten an Observable of Observables</h2> <p>Assume and use <code>{...}</code> to present an Observable for now:</p> <pre>\\n{\\n    ...{1},\\n    .........{2................3},\\n    ...................{},\\n    ..............{4},\\n}\\n</pre> <h3 id=\\\"concatall\\\"><code>concatAll</code></h3> <p><code>concatAll</code> strategy is to always make sure that the elements come out in the order of the collections they are inside of. It is consistent with <code>Array.concat</code>, it goes from top to bottom, left to right.</p> <pre>\\n{\\n    ...{1},\\n    .........{2................3},\\n    ...................{},\\n    ..............{4},\\n}.concatAll()\\n\\nOutcome:\\n---> {...1.........2................3...4}\\n</pre> <p><strong>Cold Observable</strong>: a cold observable will not do anything until somone calls <code>forEach</code> on it. The above example is a Cold Observable. <strong>Hot Observable</strong>: e.g., mousemove events, a hot data source, it is going whether you are listening or not.</p> <p><code>concatAll</code> is one of the strategies dealing with concurrency (or race conditions). You do not use <code>concatAll</code> when dealing with infinite streams. For instance, in the above example, the second observable (or data stream) never ends, then <code>concatAll</code> will never reach the third data stream.</p> <p><strong>DOM events are hot observables and have no notion of completion.</strong></p> <p>If there is an error happened between 2 and 3 in the above example, the resulting data stream will not have 3 and 4.</p> <h3 id=\\\"takeuntil\\\"><code>takeUntil</code></h3> <p><code>takeUntil</code> takes in two observables: source observable and stop observable, then creates a new observable.</p> <pre>\\n       1      2                  3\\n-------x------x------------------x----------\\n                      4\\n----------------------x---------------------\\nResult:\\n       1      2                  \\n-------x------x--------\\n</pre> <p>Every time when the source observable emits data, <code>takeUntil</code> forwards it on, but as soon as the stop observable emits <strong>the first value</strong> or errors out, it completes the new observable. Under the hood, it calls <code>dispose</code> to unsubscribe on both the source observable and the stop observable.</p> <p><strong><code>takeUntil</code> can take in two infinite observables and produce an observable that completes when you want to.</strong></p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<hr> <h2 id=\\\"mouse-drags-collection\\\">Mouse Drags Collection</h2> <pre>\\nconst getElementDrags = el => {\\n    [\\\"mousedown\\\", \\\"mousemove\\\", \\\"mouseup\\\"].forEach(key => {\\n        el[`${key}Stream`] = Observable.fromEvent(el, key);\\n    });\\n    return el.mousedownStream\\n        .map(mousedownEvent => {\\n            el.mousemoveStream.takeUtil(el.mouseupStream)\\n        })\\n        .concatAll();\\n}\\ngetElementDrags(image).forEach(pos => {\\n    image.position = pos;\\n});\\n</pre> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<hr> <h2 id=\\\"more-operators\\\">More operators</h2> <h3 id=\\\"mergeall\\\"><code>mergeAll</code></h3> <p>The second flattening strategy: <code>mergeAll</code> - <strong>first comes, first served</strong></p> <pre>\\nAn observable of observables:\\n----------------------------------------------> time axe\\n{\\n...{1},\\n...........{2.............3},\\n...............{},\\n....................{4}\\n}.mergeAll()\\n\\nResulting observable:\\n{...1...........2.......4....3}\\n</pre> <h3 id=\\\"switchlatest\\\"><code>switchLatest</code></h3> <p>The third and final flattening strategy: <code>switchLatest</code></p> <pre>\\nAn observable of observables:\\n----------------------------------------------> time axe\\n{\\n...{1},\\n...........{2.............3},\\n...............{},  // this observable triggered the unsubscription to the previous observable\\n....................{4}\\n}.switchLatest()\\n\\nResulting observable:\\n{...1...........2.......4}\\n</pre> <p>What <code>switchLatest</code> does is to swith to the latest observable (stream), it tells the previous observable that it does not want any more data (unsubscribe) and move on to the next observable arrived.</p> <p>This is the most common flattening strategy when dealing with user interfaces.</p> <p>For example, we have a submit button on a form, the user might click the submit button multiple times. Use <code>switchLatest</code> which will cancel all the ongoing requests before it heads out.</p> <ol> <li>Map all the click events as an observable waiting for a request to come back with a response.</li> <li><code>switchLatest</code> will unsubscribe from the old click observable and move on the newly arrived observable.</li> </ol> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<hr> <p><strong>Do NOT unsubscribe from events, complete them when another event fires.</strong></p> <p>In most of the cases, these are the two operators you will need.</p> <ol> <li>takeUntil</li> <li>switchLatest</li> </ol> <h2 id=\\\"case-study-netflix-search\\\">Case study: Netflix Search</h2> <p>Auto-complete search box: hard to build from scratch.</p> <ul> <li>input race conditions Example:</li> </ul> <ol> <li>you type <code>a</code> -&gt; a network request, A, sent to query all the result with <code>a</code></li> <li>you type <code>b</code> -&gt; a network request, B, sent to query all the result with <code>ab</code> There is no guarantee that the response of <code>A</code> comes back before the response of <code>B</code>. In result, we might end up showing the results from <code>A</code> on top of the results from <code>B</code>, which is undesirable.</li> </ol> <ul> <li>user types too fast</li> </ul> <h3 id=\\\"sample-code-in-netflix\\\">Sample Code in Netflix</h3> <pre><code class=\\\"language-javascript\\\">var searchResultSets = keyPresses\\n    .throttle(250)\\n    // Here we are turning 1D observable into a 2D observables\\n    // (an observable of observables), since each keypress event\\n    // is mapped to an observable that is the network request we\\n    // send to search the items with the current input value (a\\n    // string with the accumulated key presses).\\n    .map(key =&gt; (\\n        // getJSON returns an observable with the results we\\n        // get back from the server. It is an observable with\\n        // one response value in it.\\n        getJSON(&quot;/searchResults?q=&quot; + input.value)\\n            .retry(3)\\n            // We take the data from the network response until\\n            // another keypress event is fired.\\n            .takeUntil(keyPresses)\\n    ))\\n    .concatAll();\\nsearchResultSets.forEach(\\n    resultSet =&gt; updateSearchResults(resultSet),\\n    error =&gt; showMessage(&quot;the server appears to be down.&quot;),\\n);</code></pre> <pre>\\ndata stream:\\n------------------------------------------------------ time axis\\n                keypresses: ........a.........b......\\n network response with \\\"a\\\": ..................x\\n(The response is not yet coming back, key \\\"b\\\" is pressed. Since we\\nhave takeUntil listen on keypress on the network response data stream,\\nwe unsubscribe the network response for \\\"a\\\" data stream)\\nnetwork response with \\\"ab\\\": ........................result\\n</pre> <p>When solving this type of problems, we begin with describing the solution in four steps:</p> <ol> <li>What collection/data stream/observable do I have?</li> <li>What collection/data stream/observable do I want?</li> <li>How do I get from the collection I have to the collection I want?</li> <li>What am I going to do with the data coming out the collection I want?</li> </ol> <p>For an auto-complete search box:</p> <ol> <li>Collections I have:<ul> <li>DOM events, in particular, keypress events.</li> <li>Network requests we send, each one of the requests is an observable / data collection with the response come back from the server.</li> </ul> </li> <li>Collection I want: the results from the network requests</li> <li>Transform the keypresses into network requests and then into network respoonse collections</li> <li>Loop through the results with <code>forEach</code> and do something with it or error out</li> </ol> <p>In the code sample above, <code>switchLatest</code> is the more appropriate operator, but the <code>takeUntil</code> + <code>concatAll</code> is simulating what <code>switchLatest</code> does: Every time when a new observable comes along (a new keypress mapped to a new network request to the server), the old observable (the old network request) gets completed, and move on and switch to the new observable.</p> <pre><code class=\\\"language-javascript\\\">// Simplified version\\nvar searchResultSets = keyPresses\\n    .throttle(250)\\n    .map(key =&gt; (\\n        getJSON(&quot;/searchResults?q=&quot; + input.value).retry(3)\\n    ))\\n    .switchLatest();</code></pre> <p>Since you cannot cancel a <code>Promise</code>, it is a hot observable meaning once you declare and initiate a <code>Promise</code>, it will start working. A cold observable does not do anything on creation (lazy initialization).</p> <p>With <code>Promise</code>, you cannot retry an operation (in this case it is a network request), you cannot cancel an operation. With observable, you can trigger the network request as many times as you want -&gt; <code>Observable.retry</code>.</p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<hr> <h2 id=\\\"3d-observables\\\">3D Observables</h2> <p>Media Player Example: rewritten with Observables</p> <pre><code class=\\\"language-javascript\\\">var authorization = player\\n    .init()\\n    .map(() =&gt; (\\n        // playAttempts are click events on play button.\\n        playAttempts\\n            .map(movieId =&gt; (\\n                player\\n                    // Make a request to the server to authorize the user\\n                    // to play the movie. If the user does not have the\\n                    // permission to play the movie, do nothing, move on\\n                    // to the next movie.\\n                    .authorize(movieId)\\n                    .catch(err =&gt; (Observable.empty))\\n                    // cancels is an observable of click events on cancel\\n                    // button of the player.\\n                    .takeUntil(cancels)\\n            ))\\n            .concatAll()\\n    ))\\n    .concatAll();\\nauthorizations.forEach(\\n    license =&gt; player.play(license),\\n    error =&gt; showDialog(&quot;Sorry, cannot play right now&quot;),\\n);</code></pre> <ol> <li>What collections do I have?<ul> <li>Initialize the player</li> <li>Somebody clicks <code>play</code> on the player</li> <li>Somebody clicks <code>cancel</code> on the player</li> <li>Authorize a movie request (a network request)</li> </ul> </li> <li>What collection do I want?<ul> <li>A collection of movies to play (a collection of authorized movie IDs)</li> </ul> </li> </ol> <p>Notice that in this example, we cannot substitute <code>takeUntil</code> + <code>concatAll</code> with a <code>switchLatest</code>. Why? Because the incoming data collection/events is <strong>NOT</strong> the same type of the data collection/events we would want to use to switch to the new observable.</p> <ul> <li>Incoming events: clicks on <code>play</code> button.</li> <li>Events to use to switch to the new observables: clicks on <code>cancel</code> button.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h3 id=\\\"concatall\\\"><code>concatAll</code></h3> <p>TBD</p> <h3 id=\\\"concatmap\\\"><code>concatMap</code></h3> <p>TBD</p> <h3 id=\\\"reduce\\\"><code>reduce</code></h3> <pre><code class=\\\"language-javascript\\\">Array.prototype.reduce = function(combiner, initialValue) {\\n    var counter, accumulatedValue;\\n    if (this.length === 0) {\\n        return this;\\n    }\\n    if (arguments.length === 1) {\\n        counter = 1;\\n        accumulatedValue = this[0];\\n    } else if (arguments.length &gt;= 2) {\\n        counter = 0;\\n        accumulatedValue = initialValue;\\n    } else {\\n        throw &quot;Invalid argument&quot;;\\n    }\\n    while(counter &lt; this.length) {\\n        accumulatedValue = combiner(accumulatedValue, this[counter]);\\n        counter++;\\n    }\\n    return [accumulatedValue];\\n}</code></pre> <p>Note that in this definition of <code>reduce</code>, we return an array with a single value which is the accumulated value (the result of <code>reduce</code>).</p> <ul> <li>Better compatability: you can chain this result with all the other operations <code>map</code>, <code>filter</code>, <code>concatAll</code>, <code>concatMap</code>.</li> <li><code>[].reduce</code> will return an empty array instead of an JS error.</li> <li>In asynchronous programming, always think of the source as a stream. When you apply <code>reduce</code> to an <code>Observable</code> (an asynchronous collection that arrives over time), you cannot return a single value from a return of an <code>Observable</code>, you would have to <strong>block</strong>, you would have to wait until the <code>Observable</code> to complete.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Imports\nvar ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ = require(\"../../../../../node_modules/html-loader/dist/runtime/getUrl.js\");\nvar ___HTML_LOADER_IMPORT_0___ = require(\"./promise-doodle.jpg\");\nvar ___HTML_LOADER_IMPORT_1___ = require(\"./thinking-reactively-1.jpg\");\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \"<h3 id=\\\"synchronous-vs-asynchronous-computing\\\">Synchronous vs. Asynchronous computing</h3> <p>The main difference between synchronous and asynchronous computing/code is <strong>latency/waitime</strong>.</p> <h4 id=\\\"blocking-code\\\">Blocking code</h4> <p>Synchronous execution occurs when each block of code must wait for the previous block to complete before running.</p> <ul> <li>Easy to implement</li> <li>Easy to understand</li> <li>Easy to debug</li> </ul> <p>JavaScript is a single-threaded language. Writing blocking code creates awful user experience.</p> <ul> <li>waiting for AJAX call to return</li> <li>waiting for database operations to complete The entire application would pause/sit idle waiting for the data to be loaded and wasting precious computing cycles that could be executing other code.</li> </ul> <p>Other than horrible user experience, browsers may deem your scripts unresponsive after a certain period of inactivity and terminate them.</p> <h4 id=\\\"non-blocking-code-with-callback-functions\\\">Non-blocking code with callback functions</h4> <img src=\\\"https://renee1988.github.io/panda-learning-cs//images/rx-js-cb.png\\\"> <p>As a single-threaded language, JavaScript provides callback functions to tackle the problem of blocking for long-running operations to complete by allowing you to provide a handler function that the JavaScript runtime will invoke once the data is ready to use.</p> <ul> <li>JavaScript callback functions create <strong>inversion of control</strong> where functions call the application back insetad of the other way around.</li> <li>Inversion of control refers to the way in which certain parts of your code receive the flow of control back from teh runtime system.</li> </ul> <p>Callback functions allow you to invoke code asynchronously, so that the application can return control to you later. This allows the program to continue with any other task in the meantime.</p> <h4 id=\\\"time-and-space\\\">Time and space</h4> <ul> <li>Synchronous functions allows us to reason directly about the state of the application</li> <li>Asynchronous code forces us to reason about its <strong>future</strong> state</li> </ul> <p>For example, if you have three functions performing three independent tasks, then executing them in any order wouldn&#39;t matter. However, if they are sharing some global state, their behavior would be determined by the order in which they were called -&gt; <strong><em>Side Effect</em></strong></p> <h4 id=\\\"callback-or-rxjs\\\">Callback or RxJS?</h4> <ul> <li>If your script issues a single remote HTTP request, RxJS is an overkill, callbacks remain the perfert solution.</li> <li>RxJS begins to shine when implementing state machines of advanced complexity such as:<ul> <li>dynamic UIs: rich UI made up of several widgets on the page that interact with each other</li> <li>service orchestration: orchestrate the execution of several business process that consumes several microservice, data mashups</li> </ul> </li> </ul> <pre>\\n// Example: callback hell\\najax(\\n    '<host1>/items',\\n    items => {\\n        items.forEach(item => {\\n            ajax(`<host2>/items/${items.getId()}/info`, dataInfo => {\\n                ajax(`<host3>/files/${dataInfo.files}`, processFiles)\\n            });\\n        });\\n    },\\n);\\n</host3></host2></host1></pre> <h4 id=\\\"event-emitters\\\">Event Emitters</h4> <p>Event emitter is a popular mechanism for asynchronous event-based architecture.</p> <ul> <li><strong>DOM</strong> is an event emitter.</li> <li><code>EventEmitter</code> class in NodeJs is used to implement APIs:<ul> <li>WebSocket I/O</li> <li>File reading &amp; writing</li> </ul> </li> </ul> <p>Subscribing to an event emitter is done through the <code>addListener()</code> method, which allows you to provide the callback that will be called when an event of interest is fired.</p> <p>Unfortunately as you can tell, event emitters have all the same problems associated with using callbacks to handle emitted data coming from multiple composed resources.</p> <h4 id=\\\"promises\\\">Promises</h4> <p><code>Promises</code> represent any asynchronous computatation that is expected to complete in the <strong>future</strong>. You can chain together actions with future values to form a <strong>continuation</strong> (i.e., callbacks).</p> <p>A <code>Promise</code> is a data type that wraps an asynchronous or long-running operation, <strong>a future value</strong>, with the the ability for you to subscribe to its result or its error.</p> <ul> <li>One cannot alter the vlaue of a <code>Promise</code> once it has been executed, the value is <strong>immutable</strong>.</li> </ul> <img style=\\\"width:80%\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\"> <h4 id=\\\"what-problems-are-rxjs-solving\\\">What problems are RxJS solving?</h4> <p>RxJs is combining both functional and reactive programming paradigms:</p> <ul> <li><code>for</code> and <code>while</code> loops are not async aware, meaning they do not have knowledge of wait time or latency between iterations.</li> <li>Nested callbacks (callback hell) are hard to reason about.</li> <li>Error handling become convoluted when you begin to nesting try/catch blocks within each callback.</li> <li>Excessive use of closure -&gt; side effects -&gt; bad.</li> <li>It is hard to determine when to cancel a long-running operation.</li> <li>It is hard to deal with throttle and debounce in the traditional way.</li> <li>As the UI becomes larger and richer, memory management becomes harder (memory leaks and growth of browser process become noticable).</li> </ul> <p>The goal is to abstract the notion of time/latency away from our code and model our async code using a linear sequence of steps <strong>through which data can flow over time</strong>.</p> <ul> <li>Works with both synchronous and asynchronous code</li> <li>Handles errors</li> <li>Discourage side effects</li> <li>Scales out from one to a stream of events</li> </ul> <h3 id=\\\"thinking-in-streams\\\">Thinking in streams</h3> <p>Definition of a <strong>stream</strong> traditionally is an abstract object related to I/O operations such as reading a file, reading a socket or requesting data from an HTTP server.</p> <ul> <li>Node has readable, writable and duplex streams.</li> </ul> <p>Defintion of a <strong>stream</strong> in the Reactive Programming world is expanded to <em>any data source that can be consumed</em>.</p> <h4 id=\\\"propogation-of-change\\\">Propogation of Change</h4> <pre>\\nlet a = 20;\\nlet b = 22;\\nlet c = a + b; // c = 42\\na = 100;\\n// c is still 42\\n</pre> <p>The code above has no <strong>propogation of change</strong>.</p> <pre>\\n// Create A$ and B$, two data streams.\\nconst A$ = [20];\\nconst B$ = [22];\\nconst C$ = A$.concat(B$).reduce(add);\\n// C$ is a stream with values: [42]\\nA$.push(100);\\n// Now what values does C$ have?\\n</pre> <p>If A$ receives a new value, this state is pushed through any streams that it&#39;s a part of.</p> <p><strong>Reactive programming is oriented around data flows and propogation.</strong></p> <p>In the example above, C$ is an always-on varaible that <em>reacts</em> to any change and causes actions to ripple through it when any constituent part changes.</p> <hr> <h3 id=\\\"stream-breakdown-view\\\">Stream breakdown view</h3> <img style=\\\"width:80%\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\"> <ul> <li>Data source = producer<ul> <li>DOM events: mouse clicks, key presses, etc.</li> <li>Network requests</li> </ul> </li> <li>Consumer = subscribers of the data source</li> </ul> <p><strong>A stream is nothing more than a sequence of events over time.</strong></p> <ul> <li>A stream can be applied to ANY data point that holds value, from a single integer to bytes of data received from a remote HTTP call.</li> <li>A stream stays idel/does nothing until there is a subscriber (or observer) that listens for it.<ul> <li>streams are <strong>lazy</strong> data types.</li> <li>different from <code>Promise</code> since it executes its operations as soon as they are created.</li> </ul> </li> <li>The data pipeline shown above consists of a list of RxJS operators to transfor the values from the data sources into the desired form and pass to the observers.</li> </ul> <h3 id=\\\"static-data-sources\\\">Static data sources</h3> <p>Static data sources include: numbers, strings, sequences and arrays.</p> <pre><code class=\\\"language-javascript\\\">Stream([1, 2, 3, 4, 5])\\n  .filter(num =&gt; (num % 2) === 0)\\n  .map(num =&gt; num * num)\\n  .subscribe(val =&gt; {\\n    console.log(val);\\n  });\\n// Outputs: 4, 16</code></pre> <ul> <li><code>Stream([1, 2, 3, 4, 5])</code> is the data source.</li> <li><code>filter</code> and <code>map</code> are the data operators in the data pipeline.</li> </ul> <h3 id=\\\"components-of-an-rx-stream\\\">Components of an Rx stream</h3> <ul> <li>Producer</li> <li>Consumer</li> <li>Data pipeline</li> <li>Time</li> </ul> <h4 id=\\\"producers\\\">Producers</h4> <p>Producers are the source of your data. A producer is the starting point for any logic that you will perform in RxJS.</p> <ul> <li>A producer is created from something that generates events independently, anything from a signle value, an array, mouse clicks, to a stream of bytes read from a file.</li> <li>A producer is the <em>subject</em> in Observer design pattern.</li> <li>A producer is referred to as <code>Observable</code> in RxJS, something that can be observed.</li> <li>An observable is in charge of pushing notifications, <em>fire-and-forget</em>.</li> </ul> <h4 id=\\\"consumers\\\">Consumers</h4> <p>A consumer accepts events from the producer and prcess them. When a consumer begins listening to the producer for events to consume, the stream is activiated, meaning the stream (the producer) starts pushing events.</p> \";\n// Exports\nmodule.exports = code;","module.exports = __webpack_public_path__ + \"static/media/promise-doodle.e82778df.jpg\";","module.exports = __webpack_public_path__ + \"static/media/thinking-reactively-1.5d4d3e7b.jpg\";","// Module\nvar code = \"<p>There are three kinds of throwables:</p> <ul> <li>checked exceptions</li> <li>runtime exceptions</li> <li>errors</li> </ul> <h2 id=\\\"guidance-on-when-to-apply-different-types-of-throwables\\\">Guidance on when to apply different types of throwables</h2> <p><em>Use checked exceptions for conditions from which the called can reasonably be expected to recover.</em></p> <p>By throwing a checked exception, you force the caller to handle the exception in a <code>catch</code> clause or to propagate it outward.</p> <pre>\\npublic class SomeClass {\\n  // ...\\n  // ...\\n  public void mightThrow(...) throws SomeException {\\n      // ...\\n  }\\n}\\n</pre> <p>With a checked exception, the API designer presents a mandate to recover from the condition.</p> <ul> <li>User can choose to disregard the mandate by catching the exception and ignoring it, which is usually <em>a bad idea</em>.</li> </ul> <p>Since checked exceptions indicate recoverable conditions, it is especiallly important for them to provide methods that furnish information to help the caller recover from the exceptional condition.</p> <p>Example:</p> <p>A checked exception is thrown when an attempt to make a purchase with a gift card fails due to insufficient funds.</p> <p>In this case, the exception should provide an accessor method to query the amount of the shortfall.</p> <p>There are two kinds of unchecked throwables:</p> <ul> <li>runtime exceptions</li> <li>errors They behave the same, both are throwables that needn&#39;t and shouldn&#39;t be caught.</li> <li>If a program throws an unchecked exception or an error, it is the case that recovery is impossible and continued execution would do more harm than good.</li> <li>If a program does not catch such a throwable, it will cause the current thread to halt with an appropriate error message.</li> </ul> <p><em>Use runtime exceptions to indicate programming errors.</em></p> <p>It is not always clear whether you are dealing with a recoverable conditions or a programming error (e.g., resource exhaustion).</p> <p>If it isn&#39;t clear whether recovery is possible, you are better off using an unchecked exception.</p> <p><em>Never implement any new <code>Error</code> subclasses.</em></p> <ul> <li>Errors are reserved for us by the JVM to indicate resource deficiencies, invariant failures or other conditions that make it impossible to continue execution.</li> </ul> <p><em>All of the unchecked throwables implemented should subclass <code>RuntimeException</code>.</em></p> <p>It is possible to define a throwable that is not a subclass of <code>Exception</code>, <code>RuntimeException</code> or <code>Error</code>. They behave as ordinary checked exceptions (subclasses of <code>Exception</code> but not <code>RuntimeException</code>) -&gt; Never implement it -&gt; confuse the consumers of your API.</p> <h2 id=\\\"summary\\\">Summary</h2> <ul> <li>Throw checked exceptions for recoverable conditions.</li> <li>Trhow unchecked exceptions for programming errors.</li> <li>When in doubt, throw unchecked exceptions.</li> <li>Do not define any throwables that are neither checked exception nor runtime exceptions.</li> <li>Provide methods on your checked exceptions to aid in recovery.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>Always declare checked exceptions individually, and document precisely the conditions under which each one is thrown.</p> <p>A well-documented list of the unchecked exceptionsd describesthe <strong>preconditions</strong> for its successful execution.</p> <ul> <li>Unchecked exceptions generally represent programming errors and familiarizing programmers with all of the errors they can make helps them avoid making these errors.</li> <li>It is particularly important that methods in interfaces document the unchecked exceptions they may throw. This document forms a part of the interface general contract and enables common behavior among multiple implementations of the interface.</li> </ul> <p><strong>Use <code>@throws</code> tag to document each exception that a method can trhow, but do not use the throws keyword on uncheched exceptions.</strong></p> <p>If an exception is thrown by many methods in a class for the same reason, you can document the exception in the class documentation comment.</p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>The stack trace contains the <strong>string</strong> representation of the exception thrown (by invoking <code>toString</code> method on the exception object).</p> <ul> <li>It typically consists of the exception class name and its <strong>detail message</strong>.</li> <li>It is crucial that the exception <code>toString</code> method return as much information as possible concerning the cause of the failure.</li> </ul> <p><strong>To capture a failure, the detial message should contain the values of all the parameters and fields that contributed tot he exception.</strong></p> <p>Example <code>IndexOutOfBoundsException</code> should contain the lower and upper bound, and index value that fialed to lie between the bouinds.</p> <p><strong>Do not include passwords, encryption keys and the like in the detail message.</strong></p> <p>To ensure the exceptions contain adequate failure-capture information in their detail message, require the information in their constructors.</p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>An object should be in a well-defined usable state after it throws an exception.</p> <ul> <li>Especially true for checked exceptions, since the caller expects to recover from the exception.</li> </ul> <h2 id=\\\"failure-atomicity\\\">Failure atomicity</h2> <p><strong>Failure atomicity: A failed method invocation should leave the object in the state that it was in prior to the invocation.</strong></p> <h3 id=\\\"way-to-achieve-failure-atomicity\\\">Way to achieve failure atomicity</h3> <ol> <li>Design immutable objects: if the object is immutable, failure atomicity is <strong>free</strong>.</li> </ol> <ul> <li>If an operation fails, the invokation will not create and return a new object.</li> <li>it will never leave an existing object in an inconsistent state. Once the object is created, it cannot be modified.</li> </ul> <ol start=\\\"2\\\"> <li>For mutable objects, design the mutation methods in the way that it always check parameters for validity before performing the operation.</li> </ol> <ul> <li>This will let most exceptions to get thrown before the object modification commences.<pre>\\n// Pop operation on an array\\npublic Object pop() {\\n  if (this.size == 0) {\\n      throw new EmptyStackException();\\n  }\\n  Object result = elements[this.size--];\\n  elements[this.size] = null;\\n  return result;\\n}\\n</pre> If we do not validate the <code>size</code> field first, the exception will still be thrown but the <code>size</code> field will be left out in a bad state, causing all the future method invocations on the object to fail.</li> </ul> <ol start=\\\"3\\\"> <li>For method parameters that cannot be checked/validated, order the computation before any modification to the object takes place.</li> </ol> <ul> <li>For example <code>TreeMap</code> (whose elements are sorted), to add an element to the <code>TreeMap</code>, the element must be of a type that can be compared using the TreeMap ordering.</li> </ul> <ol start=\\\"4\\\"> <li>Perform any operation on a temporary copy of the object and replace the contents of the object with the temporary copy once the operation is complete.</li> </ol> <ul> <li>For example, some sorting function copies the input list into an array prior to sorting to reduce the cost of accessing elements in the inner loop of the sort. This is done for performance, but as an additional benefit, it ensures that the input list will be untouched if the sort fails.</li> </ul> <ol start=\\\"5\\\"> <li>Write <em>recovery code</em> that intercepts a failure that occurs in the midst of an operation, and cause the objec to roll back its state to the point before the operation began.</li> </ol> <h2 id=\\\"failure-atomicity-not-always-achievable\\\">Failure Atomicity: not always achievable</h2> <p>When two threads attempt to modify the same object concurrently without proper synchronization, failure atomicity is not achievable in this case, the object will be left in an inconsistent state. <strong>It would be wrong to assume taht an object was still usable after catching a <code>ConcurrentModificationException</code>.</strong></p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>Expert programmers strive and achieve a high degree of <strong>code reuse</strong>. Exceptions are no exception to the rule that code reuse is a good thing.</p> <h2 id=\\\"benefit-of-resuing-standard-exceptions\\\">Benefit of resuing standard exceptions</h2> <p>Reusing standard exceptions:</p> <ul> <li>makes your API easy to learn and use since it matches the established conventions.</li> <li>programs using your API are easier to read and understand since they are not cluttered with unfamiliar exceptions.</li> <li>fewer exception classes means a smaller memory footprint and less time spent loading classes.</li> </ul> <h2 id=\\\"types-of-standard-exceptions\\\">Types of standard exceptions</h2> <p>Every errorneous method invocation boils down to an illegal argument or state.</p> <h3 id=\\\"illegalarugmentexception\\\"><code>IllegalArugmentException</code></h3> <p><code>IllegalArgumentException</code> is the exception to throw when the caller passes in an argument whose vlaue is <strong>inapproporiate</strong>.</p> <p>Example:</p> <pre>\\npublic SomeClass {\\n    // ...\\n    public static divide(int divider) {\\n        if (divider == 0) {\\n            throw new IllegalArgumentException(\\\"Divider cannot be zero.\\\");\\n        }\\n        // ...\\n    }\\n}\\n</pre> <h3 id=\\\"illegalstateexception\\\"><code>IllegalStateException</code></h3> <p><code>IllegalStateException</code> is thrown if the invocation is illegal because of the state of the receiving object.</p> <p>Example: <code>IllegalStateException</code> is an exception to throw if the caller attempted to use some object before it had been properly initialized.</p> <h3 id=\\\"concurrentmodificationexception\\\"><code>ConcurrentModificationException</code></h3> <p><code>ConcurrentModificationException</code> is thrown if an object that was designed for use by a single thread (or with external synchronization) detects that it is being modified concurrently.</p> <h2 id=\\\"some-best-pratices\\\">Some best pratices</h2> <p><strong>Do not reuse <code>Exception</code>, <code>RuntimeException</code>, <code>Throwable</code> or <code>Error</code> directly.</strong></p> <ul> <li>Treat these classes as <code>abstract</code></li> <li>You cannot rielably test for these exceptions because they are superclasses of other exceptions that a method may throw.</li> </ul> <p><strong>Trhow <code>IllegalStateException</code> if no argument values would have worked, otherwise throw <code>IllegalArgumentException</code>.</strong></p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h2 id=\\\"exception-translation\\\">Exception translation</h2> <p><strong>Higher layers should catch lower-level exceptions and in their place, throw exceptions that can be explained in terms of the higher-level abstraction.</strong></p> <pre>\\ntry {\\n    // ...\\n} catch (LowerLevelException e) {\\n    trhow new HigherLevelException(...);\\n}\\n</pre> <p>Example: <code>get</code> method of <code>AbstractSequentialList</code> which is an implementation of <code>List</code>.</p> <pre>\\npulbic E get(int index) {\\n    ListIterator<E> i = listInterator(index);\\n    try {\\n        return i.next();\\n    } catch (NoSuchElementException e) {\\n        throw new IndexOutOfBoundsException(\\\"Index: \\\" + index);\\n    }\\n}\\n</E></pre> <h2 id=\\\"exception-chaining\\\">Exception chaining</h2> <p>Exception chaining is useful when the lower-level exception might be helpful to someone debugging the problem that caused the higher-level exception.</p> <pre>\\ntry {\\n    // ...\\n} catch (LowerLevelException lowerLevelCause) {\\n    throw new HigherLevelException(lowerLevelCause);\\n}\\n</pre> <pre>\\n// Exception with chaining-aware constructor\\nclass HigherLevelException extends Exception {\\n    HigherLevelException(Throwable cause) {\\n        super(cause);\\n    }\\n}\\n</pre> <ul> <li>Most standard exceptions have chaining-aware constructors.</li> <li>You can set the cause using <code>Throwable.initCause</code> for exceptions that do not have chainging-aware constructors.</li> </ul> <h2 id=\\\"best-practices\\\">Best practices</h2> <ol> <li>The best way to deal with exceptions from lower layers is <strong>to avoid them</strong>, by ensuring that lower-level methods succeed.</li> <li>If (1) is not possible, the next best thing is to have the higher layer silently work around these exceptions, insulating the caller of the higher-level method from lower-level problems.</li> </ol> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>If a method throws checked exceptions, the code that invokes it must handle them in one or more catch blocks, or declare that it throws them and let them propagate outward.</p> <p><strong>Checked exceptions put a burden on the user of the API.</strong></p> <p><strong>Methods throwing checked exceptions cannot be used directly in streams.</strong></p> <p>Use checked exceptions if the exceptional condition cannot be prevented by proper use of the API <em>and</em> the programmer using the API can take some useful action once confronted with the exception.</p> <p>Otherwise use unchecked exceptions.</p> <h2 id=\\\"how-to-eliminate-checked-exceptions\\\">How to eliminate checked exceptions?</h2> <ul> <li><p>The easist way to eliminate checked exceptions is to <strong>return an optional of the desired result type</strong>. The shortcoming of this solution is that you can&#39;t provide additional details on why it fails perform the desired computation.</p> </li> <li><p>You can always turn a checked exception into an unchecked exception. </p> <pre>\\n// Invocation with checked exception\\ntry {\\n  // ...\\n} catch(SomeCheckedException e) {\\n  // ...\\n}\\n</pre> <pre>\\n// Invocation with state-testing method and unchecked exception\\nif (someConditionCheck) {\\n  fn();\\n} else {\\n  // Handle exceptional condition\\n}\\n// Alternative: if the programmer knows the call will succeed, or\\n// is content to let the thread terminate if it fails:\\nfn();\\n</pre> </li> </ul> <h2 id=\\\"summary\\\">Summary</h2> <ul> <li>If callers won&#39;t be able to recover from failures, throw unchecked exceptions.</li> <li>If recovery may be possible and you want to force the callers to handle exceptional conditions:<ul> <li>consider returning an optional first</li> <li>only if this would not provide sufficient information on the failure, throw checked exception.</li> </ul> </li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"use-exceptions-only-for-exceptional-conditions\\\">Use exceptions only for exceptional conditions</h1> <pre>\\ntry {\\n    int i = 0;\\n    while(true) {\\n        range[i++].climb();\\n    }\\n} catch(ArrayIndexOutOfBoundsException e) {}\\n</pre> <p>The inifinite loop terminates by throwing, catching and ignoring an <code>ArrayIndexOutOfBoundsException</code> when it attempts to access the first array element outside the bounds of the array.</p> <p>Why would someone write the code above?</p> <p>Reasoning: VM checks the bounds of all array accesses, the normal loop termination test -- hidden by the compiler but still present in the for-each loop -- is redundant and should be avoided.</p> <p>What is wrong with the reasoning above?</p> <ul> <li>Exceptions are designed for exceptional circumstances, there is little incetive for JVM implementors to make them as fast as explicit tests.</li> <li>Placing code inside a try-catch block inhibits certain optimizations that JVM implementations might otherwise perform.</li> <li>The standard idiom for looping through an array doesn&#39;t necessarily result in redundant checks. Many JVM implementations optimize them away.</li> <li>In fact, exception-based idiom is far slower than the standard one.</li> </ul> <p>What else is wrong with the code above?</p> <ul> <li>It is not guaranteed to work. If there is a bug in the loop, the use of exceptions for <em>flow control</em> can mask the bug.<ul> <li>If a reasonable loop idiom is used, the bug would generate an uncaught exception, resulting in immediate thread termination with a full stack trace.</li> <li>If the exception-based loop idiom is used, the bug-related exception would be caught and misinterpreted as a normal loop termination.</li> </ul> </li> </ul> <p><strong>Exceptions are to be used only for exceptional conditions, they should never be used for ordinary control flow.</strong></p> <p>A class with a &quot;state-dependent&quot; method that can be invoked only under certain unpredictable conditions should generally have a separate &quot;state-testing&quot; method indicating whether it is appropriate to invoke the state-dependent method.</p> <ul> <li>Example: iterator.next() &amp; iterator.hasNext()</li> </ul> <p>An alternative to providing a separate state-testing method is to have the state-dependent method return an empty optional or a distinguished return value (<code>null</code>).</p> <p>If an object is to be accessed concurrently without external synchronization or is subject to externally induced state transitions, <em>you must use an optional or distinguished return value</em>, as the object state could change in the interval between the invocation of a state-testing method and its state-dependent method.</p> <p>Performance concerns may dictate that an optional or distinguished return value be used if a separate state-testing method would duplicate the work of the state-dependent method.</p> <p>State-testing method is mildly preferrable to a distinguished return value.</p> <ul> <li>Readability.</li> <li>Incorrect use may be easier to detect.<ul> <li>if you forget to call a state-testing method, the state-dependent method will throw an exception, making the bug obvious</li> <li>if you forget to check for a distinguished return value, the bug may be subtle</li> </ul> </li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"what-the-heck-is-event-loop\\\">What the heck is Event Loop</h1> <ul> <li>Event loop is a mechanism that handles executing multiple chunks of your program over time</li> <li>At each moment, it invokes the JavaScript engine</li> <li>JavaScript engine has no sense of time</li> <li>It is an on-demand execution environment for any snippet of javascript</li> <li>Event loop is an array that acts as a queue</li> <li>Event loop breaks its works into tasks and executes them in serial</li> <li>Event loop does not allow parallel access and changes to shared memory</li> <li>JavaScript never shares memory across threads</li> <li>JavaScript is single-threaded, but browser is not</li> <li>Process 1 and process 2 run concurrently task-level in parallel, but their individual events run sequentially on the event loop queue</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>A class can provide its consumers with static factory methods or public constructors.</p> <h2 id=\\\"advantages-of-static-factory-methods\\\">Advantages of static factory methods</h2> <p>Unlike constructors, <em>they have names</em>.</p> <p><code>BigInteger(int, int, Random)</code> vs. <code>BigInteger.probablePrime(int, int, Random)</code></p> <p>Sometimes you see class author overloading their constructors whose parameter lists differ only in the order of their parameter types, which is a bad idea → The user of such an API will never remember which constructor is which and end up calling the wrong one.</p> <p>Unlike constructors, they are <em>NOT</em> required to create a new object each time they are called.</p> <ul> <li>Allows immutable classes to use pre-constructed instances.</li> <li>Allows to cache instances as they are constructed and dispense them repreatedly to avoid creating unnecessary duplicate objects.<ul> <li><code>Boolean.valueOf(boolean)</code> never creates an object (Flyweight pattern).</li> <li>Greatly improve performance if equivalent objects are requested often, especially if they are expensive to create.</li> </ul> </li> <li>Allows classes to maintain strict control over what instances exist at any time → instance-controlled classes.<ul> <li>Instance control allows a class to guarantee that it is a singleton or non-instantiable.</li> <li>Instance control allows an immutable value class to make the guarantee that no two equal instances exist (two instances have the same reference).</li> </ul> </li> </ul> <p>Unlike constructors, they can return an object of <em>any subtype of their return type</em>.</p> <p>An API can return objects without making their classes public, hiding implementation classes in this fashion leads to a very compact API → interface-based frameworks</p> <ul> <li>Interfaces provide natural return types for static factory methods (Example: <a href=\\\"https://docs.oracle.com/javase/1.5.0/docs/guide/collections/\\\">Collection framework</a>)</li> <li><a href=\\\"https://workout-genie.quip.com/5LrYA1z9O9WG/Refer-to-objects-by-their-interfaces\\\">Using such a static factory method requires the client to refer to the returned object by interface rather than implementation class</a></li> </ul> <p>The class of the returned object <strong>can vary</strong> from call to call as a function of the input parameters.</p> <ul> <li>The consumer neither knows nor cares about the class of the object they get back from the factory. The class of the returned object need not exist when the class containing the method is written → service provider framework</li> <li>Service provider framework is a system decoupling the clients from the implementation of a service:<ul> <li>Service interface: represents an implementation</li> <li>Provider registration API: providers use it to register implementations</li> <li>Service access API: clients use it to obtain instances of the service → it is a flexible static factory.</li> </ul> </li> </ul> <h2 id=\\\"disadvantages-of-only-providing-static-factory-methods-in-class\\\">Disadvantages of only providing static factory methods in class</h2> <p>Main limitation of providing only static factory methods: <strong>Classes without public or protected constructors can’t be subclassed</strong>, which can be a blessing</p> <ul> <li><a href=\\\"https://workout-genie.quip.com/JTdGApOFFHN8/Favor-composition-over-inheritance\\\">It encourages programmers to use composition over inheritance</a></li> <li><a href=\\\"https://workout-genie.quip.com/yzIfAt9XPtJt/Minimize-mutability\\\">It is required for immutable types</a></li> </ul> <p>Static factory methods are hard for programmers to find, they do not stand out in API documentation like constructors do</p> <ul> <li>use common naming conventions</li> <li><code>from</code>: type-conversion method: ClassA.from(instant)</li> <li><code>of</code>: aggregation method: ClassA.of(x, y, z)</li> <li><code>valueOf</code>: BigInteger.valueOf(123)</li> <li><code>instance</code> or <code>getInstance</code>: returns an instance that is described by its parameters</li> <li><code>create</code> or <code>newInstance</code>: returns a new instance</li> <li><code>getType</code>: <code>Files.getFileStore(path)</code></li> <li><code>newType</code>: <code>Files.newBufferedReader(path)</code></li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>Static factories and constructors shared a limitation: <strong>they do not scale well to large numbers of optiona parameters</strong></p> <p><strong>Telescoping constructor pattern</strong> works, but it is hard to write client code when there are many parameters and harder still to read it.</p> <ul> <li>Long sequences of identically typed parameters can cause subtle bugs</li> </ul> <pre><code class=\\\"language-java\\\">// Example: telescoping constructor\\npublic class SomeClass {\\n    private final int a;\\n    private final int b;\\n    ...\\n    private final int f;\\n\\n    public SomeClass(a, b, c) {\\n        this(a, b, c, 0);\\n    }\\n    public SomeClass(a, b, c, d) {\\n        this(a, b, c, d, 1);\\n    }\\n    public SomeClass(a, b, c, d, e) {\\n        this(a, b, c, d, e, 2);\\n    }\\n    public SomeClass(a, b, c, d, e, f) {\\n        this(a, b, c, d, e, f);\\n    }\\n}</code></pre> <p><strong>JavaBeans pattern</strong>: you can call a parameterless constructor to create the object and then call setter methods to set each required parameter and each optional parameter of interest.</p> <ul> <li>It allows inconsistency, mandates mutability.</li> <li>It precludes the possibility of making a class immutable.</li> <li>It requires effort on the part of the programmer to ensure thread safety.</li> </ul> <h2 id=\\\"builder-pattern\\\">Builder Pattern</h2> <p>Combining the safety of telescoping constructor pattern with the readability of JavaBeans pattern → <strong>Builder</strong>.</p> <pre><code class=\\\"language-java\\\">// Builder pattern\\npublic class SomeClass {\\n    private final int a;\\n    private final int b;\\n    ...\\n    private final int f;\\n    public static class Builder {\\n        private final int a;\\n        private final int b;\\n        private final int c;\\n\\n        private int d = 0;\\n        private int e = 1;\\n        private int f = 2;\\n\\n        public Builder(int a, int b, int c) {\\n            this.a = a;\\n            this.b = b;\\n            this.c = c;\\n        }\\n        public Builder setD(int val) {\\n            this.d = val;\\n            return this;\\n        }\\n        public Builder setE(int val) {\\n            this.e = val;\\n            return this;\\n        }\\n        public Builder setF(int val) {\\n            this.f = val;\\n            return this;\\n        }\\n\\n        public SomeClass build() {\\n            return new SomeClass(this);\\n        }\\n    }\\n    private SomeClass(Builder builder) {\\n        a = builder.a;\\n        ...\\n        f = builder.f;\\n    }\\n}</code></pre> <ul> <li>The builder pattern simulates named optional parameters.</li> <li>The builder pattern is well suited to class hierarchies.<ul> <li>Abstract classes have abstract builders, concrete classes have concrete builders.</li> </ul> </li> </ul> <pre><code class=\\\"language-java\\\">public abstract class Pizza {\\n    public enum Topping { HAM, MUSHROOM, ONION, PEPPER, SAUSAGE }\\n    final Set&lt;Topping&gt; toppings;\\n\\n    abstract static class Builder&lt;T extends Builder&lt;T&gt;&gt; {\\n        EnumSet&lt;Topping&gt; toppings = EnumSet.noneOf(Toppings.class);\\n        public T addTopping(Topping topping) {\\n            toppings.add(Objects.requireNonNull(topping));\\n            return self();\\n        }\\n        abstract Pizza build();\\n        // Subclasses must override this method to return &quot;this&quot;\\n        protected abstract T self();\\n    }\\n\\n    Pizza(Builder&lt;?&gt; builder) {\\n        toppings = builder.toppings.clone();\\n    }\\n}</code></pre> <p>Note: Pizza.Builder is a generic type with a recursive type parameter .</p> <ul> <li>Along with abstract self method, allows method chaining to work properly in subclasses without casting</li> </ul> <pre><code class=\\\"language-java\\\">public class NyPizza extends Pizza {\\n    public enum Size { SMALL, MEDIUM, LARGE }\\n    private final Size size;\\n\\n    public static class Builder extends Pizza.Builder&lt;Builder&gt; {\\n        private final Size size;\\n\\n        public Builder(Size size) {\\n            this.size = Objects.requireNonNull(size);\\n        }\\n        @Override\\n        public NyPizza build() {\\n            return new NyPizza(this);\\n        }\\n        @Override\\n        protected Builder self() {\\n            return this;\\n        }\\n    }\\n\\n    private NyPizza(Builder builder) {\\n        super(builder);\\n        size = builder.size;\\n    }\\n}</code></pre> <p>A subclass method is declared to return a subtype of the return type declared in the superclass → <strong>covariant return typing</strong>.</p> <h2 id=\\\"disadvantages-of-a-builder\\\">Disadvantages of a builder</h2> <p>In order to create an object, you must first create a builder. While the cost of creating this builder is unlikely to be noticeable in practice. It could be <strong>a problem in performance-critical situations</strong>.</p> <h2 id=\\\"summary\\\">Summary</h2> <p>The builder pattern is a good choice when designing classes whose constructors or static factories would have more than a handful of parameters. Especially if <strong>many of the parameters are optional or of identical type</strong>.</p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>Many classes depend on one or more underlying resources.</p> <p>Example: Spell checker on a dictionary</p> <h2 id=\\\"bad-implementation-static-utility-classes\\\">Bad implementation: static utility classes</h2> <pre>\\n// Inappropriate use of static utility - inflexible and untestable\\npublic class SpellChecker {\\n    private static final Lexicon dictionary = ...;\\n    private SpellChecker() {}\\n    public static List<String> suggestions(String typo) {...}\\n}\\n</String></pre> <h2 id=\\\"bad-implementation-singletons\\\">Bad implementation: singletons</h2> <pre>\\n// Inappropriate use of singleton - inflexible and untestable\\npublic class SpellChecker {\\n    private static final Lexicon dictionary = ...;\\n    private SpellChecker(...) {}\\n    public static SpellChecker INSTANCE = new SpellChecker(...);\\n    public static List<String> suggestions(String typo) {...}\\n}\\n</String></pre> <h2 id=\\\"why-are-singletons-and-static-utility-classes-bad\\\">Why are singletons and static utility classes bad?</h2> <p>Both of singletons and static utility classes assume there is only one dictionary worth using. In general, <strong>singletons and static utility classes are inappropriate for classes whose behavior is parameterized by an underlying resource</strong>.</p> <h2 id=\\\"dependency-injection\\\">Dependency injection</h2> <p>To support multiple instances of the class, you can pass the resource into the constructor when creating a new instance → <strong>dependency injection</strong>.</p> <p>Example: SpellChecker, dictionary is a dependency injected into the spell checker when it is created.</p> <pre>\\n// Dependency injection provides flexibility and testability\\n// You can mock the dictionary however you desire in your tests\\npublic class SpellChecker {\\n    private final Lexicon dictionary;    \\n    public SpellChecker(Lexicon dictionary) {\\n        this.dictionary = Objects.requireNonNull(dictionary);\\n    }\\n    public List<String> suggestions(String typo) {...}\\n}\\n</String></pre> <ul> <li>Dependency injection works with an arbitrary number of resources and arbitrary dependency graphs.</li> <li>It preserves immutability, so multiple clients can share dependent objects.</li> </ul> <h2 id=\\\"dependency-injection-framework\\\">Dependency injection framework</h2> <p>For large projects, they contain thousands of dependencies, to eliminate the clutter → use a <strong>dependency injection framework</strong>.</p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>It is safe to use inheritance:</p> <ul> <li>within a package, subclass and superclass are all under the control of the same programmers</li> <li>when extending classes specifically designed and documented for extension</li> </ul> <p>Inheriting from ordinary concrete classes across package boundaries is dangerous → <strong>inheritance violates encapsulation</strong>.</p> <ul> <li>If superclass changes, the subclass might break even though its code has not been touched</li> </ul> <h2 id=\\\"example-hashset-extension\\\">Example: <code>HashSet</code> extension</h2> <p>Suppose that we need a way to query the HashSet as to how many elements have been added since it is created.</p> <pre><code class=\\\"language-java\\\">// Broken - Inapproporiate use of inheritance\\npublic class InstrumentedHashSet&lt;E&gt; extends HashSet&lt;E&gt; {\\n    private int addCount = 0;\\n    // ... constrcutors\\n    @Override\\n    public boolean add(E e) {\\n        addCount++;\\n        return super.add(e);\\n    }\\n    @Override\\n    public boolean addAll(Collection&lt;? extends E&gt; c) {\\n        addCount += c.size();\\n        return super.addAll(c);\\n    }\\n    public int getAddCount() {\\n        return addCount;\\n    }\\n}\\n// This class doesn&#39;t work:\\nInstrumentedHashSet&lt;String&gt; s = new InstrumentedHashSet&lt;&gt;();\\ns.addAll(List.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;));\\n// addCount is 6 instead of 3, since HashSet&#39;s addAll method is implemented\\n// on top of its add method.</code></pre> <p>We can &quot;fix&quot; <code>InstrumentedHashSet</code> by eliminating its override of the <code>addAll</code> method. This self-use is an implementation detail, not guaranteed to hold in all implementations of all Java platform and subject to change from release to release → the resulting <code>InstrumentedHashSet</code> is fragile.</p> <h2 id=\\\"composition\\\">Composition</h2> <p>To avoid the problem above → Composition, Instead of extending the existing class, give your new class <strong>a private field that references an instance of the existing class</strong>.</p> <ul> <li>The existing class becomes a component of the new class</li> <li>Each instance method in the new class calls the corresponding method on the contained instance of the existing class and returns the results → <strong>forwarding</strong><ul> <li>The methods in the new class are known as <strong>forwarding methods</strong>.</li> </ul> </li> <li>The new class will be stable, with no dependencies on the implementation details of the existing class.</li> </ul> <h3 id=\\\"composition-and--forwarding-approach\\\">Composition-and -forwarding approach</h3> <p>This approach is broken into two pieces:</p> <ul> <li>the class itself</li> <li>a reusable forwarding class that contains all of the forwarding methods</li> </ul> <pre><code class=\\\"language-java\\\">// Wrapper class - uses composition in place of inheritance\\npublic class InstrumentedSet&lt;E&gt; extends ForwardingSet&lt;E&gt; {\\n    private int addCount = 0;\\n    public InstrumentedSet(Set&lt;E&gt; e) {\\n        super(s);\\n    }\\n    @Override public boolean add(E e) {\\n        addCount++;\\n        return super.add(e);\\n    }\\n    @Override public boolean addAll(Collection&lt;? extends E&gt; c) {\\n        addCount += c.size();\\n        return super.addAll(c);\\n    }\\n    public int getAddCount() {\\n        return addCount;\\n    }\\n}\\n// Reusable forwarding class\\n// Set interface captures the functionality of the HashSet class.\\npublic class ForwardingSet&lt;E&gt; implements Set&lt;E&gt; {\\n    private final Set&lt;E&gt; s;   \\n    public ForwardingSet(Set&lt;E&gt; s) {\\n        this.s = s;\\n    }\\n    //...\\n    public boolean add(E e) {\\n        return s.add(e);\\n    }\\n    public boolean addAll(Collection&lt;? extends E&gt; c) {\\n        return s.addAll(c);\\n    }\\n    //...\\n}</code></pre> <p>In essence, <code>InstrumentedSet</code> transforms one <code>Set</code> into another, adding the instrumentation functionality.</p> <ul> <li>Inheritance-based approach only works for a single concrete class and requires a separate constructor for each supported constructor in the superclass.</li> <li>The wrapper class can be used to instrument any <code>Set</code> implementation and will work in conjunction with any preexisting constructor.</li> </ul> <pre><code class=\\\"language-java\\\">Set&lt;A&gt; a = new InstrumentedSet&lt;&gt;(new TreeSet&lt;&gt;(...));\\nSet&lt;B&gt; b = new InstrumentedSet&lt;&gt;(new HashSet&lt;&gt;(...));</code></pre> <p><code>InstrumentedSet</code> is a wrapper class → each <code>InstrumentedSet</code> instance contains (wraps) another <code>Set</code> instance → <strong>Decorator pattern</strong> → <code>InstrumentedSet</code> class “decorates” a set of by adding instrumentation.</p> <h2 id=\\\"disadvantages-of-wrapper-classes\\\">Disadvantages of wrapper classes</h2> <p>Wrapper classes are not suited for use in <strong>callback framework</strong>.</p> <ul> <li>In callback framework, objects pass self-references to other objects for callbacks.<ul> <li>A wrapped object doesn’t its wrapper, it passes a reference to itself (this) and callbacks elude the wrapper (<a href=\\\"https://stackoverflow.com/questions/28254116/wrapper-classes-are-not-suited-for-callback-frameworks\\\">SELF problem</a>).</li> </ul> </li> </ul> <h2 id=\\\"when-to-use-inheritance\\\">When to use inheritance?</h2> <p>Inheritance is only appropriate when subclass really is a <strong>subtype</strong> of the superclass. If you attempt to have a class B extends class A, ask yourself the question:</p> <p><strong>“Is every B really an A?”</strong></p> <p>If the answer is “not sure” or “no”, B should not extend A.</p> <ul> <li>Normally B should contain a private instance of A and expose a different API. If you use inheritance where composition is appropriate, you are exposing implementation details.</li> <li><strong>Inheritance propagates any flaws in the superclass’s API</strong>.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h2 id=\\\"advantages-of-immutability\\\">Advantages of Immutability</h2> <p>An <strong>immutable</strong> class is simply a class whose <strong>instances cannot be modified</strong></p> <ul> <li>All of the information contained in each instance is fixed for the lifetime of the object, so no changes can ever be observed.</li> <li>Examples in Java platform libraries: String, boxed primitive classes (Boolean, Integer, Float, Double, etc.)</li> </ul> <p>To make a class immutable:</p> <ul> <li>Don’t provide methods that modify the object’s state (mutators, setters)</li> <li>Ensure that the class can’t be extended.<ul> <li>Prevents subclasses from compromising the immutable behavior of the class.</li> <li>Makes the class <strong><code>final</code></strong>.</li> </ul> </li> <li>Make all fields <strong><code>private</code></strong></li> <li>Ensure exclusive access to any mutable components.<ul> <li>If your class has any fields that refer to mutable objects, ensure that clients of the class cannot obtain references to these objects.</li> <li>Make defensive copies in constructors, accessors and readObject methods.</li> </ul> </li> </ul> <pre>\\n// Example: immutable class\\npublic final class Complex {\\n    private final double re;\\n    private final double im;\\n    ...\\n    // Functional approach: instead of modifying this instance,\\n    // create and return a new Complex instance.\\n    public Complex plus(Complex c) {\\n        return new Complex(re + c.re, im + c.im)\\n    }\\n}\\n</pre> <ul> <li>Immutable objects are simple, it can be in only one state.</li> <li><strong>Immutable objects are inherently thread-safe, they require no synchronization</strong>.<ul> <li>They can’t be corrupted by multiple threads accessing them concurrently.</li> <li>They can be shared freely.</li> </ul> </li> <li>Immutable classes should encourage clients to reuse existing instances wherever possible (reducing memory footprint and garbage collection costs).<ul> <li>You can provide public static final constants for commonly used values.</li> <li>An immutable class can provide static factories that cache frequently requested instances to avoid creating new instances when existing ones would do.</li> </ul> </li> <li>You need not and should not provide a clone method or copy constructor on an immutable class.<ul> <li>String class does have a copy constructor, but you should not use it.</li> </ul> </li> <li>Immutable objects make great building blocks for other objects.<ul> <li><strong>Immutable objects make great map keys and set elements</strong>.</li> </ul> </li> </ul> <h2 id=\\\"disadvantages-of-immutability\\\">Disadvantages of Immutability</h2> <p><strong>Immutable classes require a separate object for each distinct value.</strong></p> <ul> <li>Creating these objects can be very costly, especially if they are large.</li> <li>Example: change its lower-order bit of a million-bit BigInteger.</li> </ul> <p>The performance problem is magnified if you perform a multistep operation that generates a new object at every step, eventually discarding all objects except the final result.</p> <h2 id=\\\"design-alternatives\\\">Design alternatives</h2> <ul> <li>Instead of making an immutable class final, you can make all of its constructors private or package-private, and add public static factories in place of the public constructors.</li> <li>It allows the use of multiple package-private implementation classes</li> <li>Some immutable classes have one or more non-final fields in which they cache the results of expensive computations the first time they are needed. This trick works precisely because the object is immutable, which guarantees that the computation would yield the same result if it were repeated.</li> </ul> <p>Note: constructors should create fully initialized objects with all of their invariants established.</p> <ul> <li>Do not provide a public initialization method separate from the constructor or static factory unless there is a compelling reason to do so.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"async-javascript\\\">Async JavaScript</h1> <h2 id=\\\"parallel-vs-async\\\">Parallel vs. Async</h2> <p>Parallel vs Non-parallel: Roller coster example</p> <ul> <li>You are waiting inline to ride the roller coster, you are the only one allowed to ride it, even though there are empty seats in the roller coster → Non-parallel</li> <li>You are waiting inline to ride the roller coster, you and other 20 people are allowed to ride it at the same time, you are experiencing the ride at the same time → parallel</li> </ul> <p>In the computing sense, parallelism is expressed through <strong>threads</strong>.</p> <ul> <li>You can have one thread running on one CPU core in your system</li> <li>They are like queues of actions/operations that needs to happen</li> <li>At any given instance, one core could be doing one of these operations and at the exact same moment, another operation can happen at a different core</li> <li>Because we don’t have infinite number of cores, the OS has a layer of virtual threads which take care of scheduling the events across the available cores as much in parallel as possible</li> </ul> <p>Parallelism is about optimization → get things done faster <strong>Asynchronicity → single thread</strong>.</p> <ul> <li>The programs inside our JavaScript run entirely on a single thread, even though the browser (or Node engine) can access to multiple threads</li> <li>At any given instance, there is one-line of JavaScript running in the JavaScript engine</li> <li>You could run JavaScript in multiple instances (which might look like multi-threading), but those programs can’t communicate with each other (e.g., web worker)</li> </ul> <p><strong>Concurrency: multiple higher-level tasks happening within the same timeframe</strong></p> <p>Async programming is to manage the concurrency in our JavaScript program.</p> <h2 id=\\\"callback\\\">Callback</h2> <pre><code class=\\\"language-javascript\\\">setTimeout(function() {\\n    console.log(“callback!“);\\n}, 1000);</code></pre> <p>There are two parts of the above code:</p> <ul> <li>The first half of the above code is setTimeout function call</li> <li>The second half of the above code is wrapped inside a callback which is deferred to a later moment. At that later moment, it is picked up and continue the program from where we left off.</li> </ul> <p><strong>Example exercise:</strong></p> <ol> <li>Request all 3 files at the same time,</li> <li>Render them ASAP</li> <li>Render them in proper order: file1, file2, file3</li> <li>Output “Complete” after all 3 are done</li> </ol> <pre><code class=\\\"language-javascript\\\">function fakeAjax(url, cb) {\\n    const fake_responses = {\\n        file1: “first text“,\\n        file2: “second text“,\\n        file3: “third text“,\\n    };\\n    const randomDelay = (Math.round(Math.random() * 1e4) % 8000) + 1000;\\n    console.log(“Requesting: “ + url);\\n\\n    setTimeout(function(){\\n        cb(fake_responses[url]);\\n    },randomDelay);\\n}\\nfunction output(text) {\\n    console.log(text);\\n}\\nconst responses = new Map();\\n// Ugly but gets the job done :)\\nfunction handleResponse(file, content) {\\n    if (!responses.has(file)) {\\n        responses.set(file, content);\\n    }\\n    const files = [“file1“, “file2“, “file3“];\\n    for (let i = 0; i &lt; files.length; i++) {\\n        if (!responses.has(files[i])) {\\n            return;\\n        }\\n        if (typeof responses.get(files[i]) === “string“) {\\n            output(responses.get(files[i]));\\n            responses.set(files[i], false);\\n        }\\n    }\\n    output(“Complete“);\\n}\\nfunction getFile(file) {\\n    fakeAjax(file, function(text){\\n        handleResponse(file, text);\\n    });\\n}\\n// Request all files at once in &quot;parallel&quot;\\ngetFile(“file1“);\\ngetFile(“file2“);\\ngetFile(“file3“);</code></pre> <h2 id=\\\"thunks\\\">Thunks</h2> <p>From synchronous perspective, a thunk is a function that has everything already that it needs to do to give you some value back → a function with some closure state keeping track of some value(s) and giving you those values whenever you call it.</p> <pre><code class=\\\"language-javascript\\\">// Synchronous thunk\\nfunction add(x, y) {\\n    return x + y;\\n}\\nconst thunk = function() {\\n    return add(10, 15);\\n}\\nthunk();</code></pre> <p>Asynchronous thunk is a function that doesn’t need any parameters except a callback function to do its job.</p> <pre><code class=\\\"language-javascript\\\">function addAsync(x, y, cb) {\\n    setTimeout(function () {\\n        cb(x + y);\\n    }, 1000);\\n}\\nconst thunk = function (cb) {\\n    addAsync(10, 15, cb);\\n};\\nthunk(function(sum) {\\n    return sum;\\n});</code></pre> <p><strong>Example exercise:</strong></p> <pre><code class=\\\"language-javascript\\\">// Active thunk\\nfunction getFile(file) {\\n    let text;\\n    let fn;\\n    fakeAjax(file, function (response) {\\n        if (fn) {\\n            fn(response);\\n        } else {\\n            text = response;\\n        }\\n    });\\n    return function (cb) {\\n        if (text) {\\n            cb(text);\\n        } else {\\n            fn = cb;\\n        }\\n    };\\n}\\nconst thunk1 = getFile(“file1“);\\nconst thunk2 = getFile(“file2“);\\nconst thunk3 = getFile(“file3“);\\n// Request all files at once in &quot;parallel&quot;\\nthunk1(function (text1) {\\n    output(text1);\\n    thunk2(function (text2) {\\n        output(text2);\\n        thunk3(function (text3) {\\n            output(text3);\\n            output(“Complete“);\\n        });\\n    });\\n});</code></pre> <p>Thunk is using the closure to maintain a state of something, which eliminates time as a complex factor of state.</p> <h2 id=\\\"promises\\\">Promises</h2> <p>Promise example: restaurant ordering. When you pay a meal at a fast food restaurant, you will get a receipt for the food you paid for. This receipt is the placeholder of your future food, it is a promise that the restaurant owes a meal.</p> <p><strong>Promise → a placeholder to eliminate time as a concern wrapped around the future value.</strong></p> <pre><code class=\\\"language-javascript\\\">function trackCheckout(info) {\\n    return new Promise(\\n        function(resolve, reject) {\\n            // attempt to track the checkout\\n            // ...\\n            // if successful, call resolve\\n            // otherwise, call reject\\n        }\\n    );\\n}</code></pre> <p><strong>Promise trust:</strong></p> <ul> <li>only resolved once</li> <li>either success or error</li> <li>messages passed / kept</li> <li>exceptions become errors</li> <li>immutable once resolved</li> </ul> <p><strong>Promise flow control → promise chaining</strong></p> <pre><code class=\\\"language-javascript\\\">doFirstThing                        doFirstThing()\\n    then doSecondThing                  .then(function() {\\n                                            return doSecondThing();\\n                                        })\\n    then doThirdThing                   .then(function() {\\n                                            return doThirdThing();\\n                                        })\\n    then complete                       .then(complete, error);\\nor error</code></pre> <p><strong>Example exercise:</strong></p> <pre><code class=\\\"language-javascript\\\">function getFile(file) {\\n    return new Promise(function (resolve, reject) {\\n        fakeAjax(file, resolve);\\n    });\\n}\\nconst promises = [“file1“, “file2“, “file3“].map(getFile);\\npromises\\n    .reduce((acc, curr) =&gt; {\\n        return acc.then(function () {\\n            return curr;\\n        }).then(output);\\n    }, Promise.resolve()\\n    .then(function () {\\n        output(“Complete“);\\n    });  \\n// Note: resolve function is NOT the output function, it is a function\\n// that fires off an asynchronous function under the covers that tells\\n// the built-in JS Promise to go through a list of &quot;then&quot; handlers\\n// registered and execute them.</code></pre> <p><strong>Abstractions</strong></p> <ul> <li><code>Promise.all</code></li> <li><code>Promise.race</code></li> </ul> <pre><code class=\\\"language-javascript\\\">// Race example: implement a timeout\\n// Some async action returns a promise\\nfunction someAsyncAction() {...}\\nPromise.race([\\n    someAsyncAction(),\\n    new Promise(function executor(_, reject) {\\n        // 3 seconds timeout: if 3 seconds passes,\\n        // promise from someAsyncAction is not\\n        // resovled, reject.\\n        setTimeout(function () {\\n            reject(“Timeout!“);\\n        }, 3000);\\n    });\\n]);</code></pre> <h2 id=\\\"generators\\\">Generators</h2> <p>All normal functions in JavaScript has a “<strong>run-to-completion</strong>” semantic → one of the most important JavaScript characteristics is that it allows us to reason about our code in a single-threaded fashion, never need to worry about two functions one interrupting the other, corrupting the shared memories.</p> <ul> <li>A generator is a syntactic form of declaring a state machine.</li> <li>A generator can be thought of a <strong>pause-able function</strong>.</li> </ul> <pre><code class=\\\"language-javascript\\\">function* gen() {\\n    console.log(“Hello“);\\n    yield; // pause\\n    console.log(“World“);\\n}\\nconst it = gen();\\nit.next(); // Hello\\nit.next(); // World</code></pre> <p><strong>Messaging</strong></p> <pre><code class=\\\"language-javascript\\\">function* main() {\\n    yield 1;\\n    yield 2;\\n    yield 3;\\n    return 4;\\n}\\nconst it = main();\\nit.next(); // returns {value: 1, done: false}\\nit.next(); // returns {value: 2, done: false}\\nit.next(); // returns {value: 3, done: false}\\nit.next(); // returns {value: 4, done: true}</code></pre> <pre><code class=\\\"language-javascript\\\">function coroutine(g) {\\n    const it = g();\\n    return function() {\\n        return it.next.apply(it, arguments);\\n    };\\n}\\nconst run = coroutine(function* () {\\n    const x = 1 + (yield);\\n    const y = 1 + (yield);\\n    yield (x + y);\\n});\\nrun(); // generator is paused to wait for a value for const x = 1 + (yield);\\nrun(10); // this call completes const x = 1 + (yield); -&gt; 11\\nconsole.log(\\n    “Meaning of life: “ + run(30).value\\n); // Meaning of life: 42</code></pre> <p><strong>Asynchronous generators</strong></p> <pre><code class=\\\"language-javascript\\\">function getData(d) {\\n    setTimeout(function () {\\n        run(d);\\n    }, 1000);\\n}\\n// Synchronous looking asynchronous code :)\\nconst run = coroutine(function* () {\\n    const x = 1 + (yield getData(10));\\n    const y = 1 + (yield getData(30));\\n    const answer = yield getData(\\n        “Meaning of life: “ + (x + y)\\n    );\\n    // After ~2 seconds, print Meaning of life: 42\\n    console.log(answer);\\n});\\nrun();</code></pre> <p><strong>Promise + Generator → yield promise</strong></p> <pre><code class=\\\"language-javascript\\\">async function foo() {\\n    await ajax(...);\\n}\\nfoo();</code></pre> <p><strong>Example exercise:</strong></p> <pre><code class=\\\"language-javascript\\\">async function getFiles() {\\n    const p1 = getFile(“file1“);\\n    const p2 = getFile(“file2“);\\n    const p3 = getFile(“file3“);\\n    output(await p1)\\n    output(await p2)\\n    output(await p3)\\n    output(“Complete“);    \\n}</code></pre> <blockquote> <p>Do I need anything to happen in parallel? If so, store those things into intermediate promises and then sequence out the response.</p> </blockquote> <h2 id=\\\"observables\\\">Observables</h2> <p>Example: spreadsheet An observable is similar to a chain of calculated fields in a spreadsheet. In a spreadsheet, you can have a data in a field and a calculated data in another field. → The calculation chain is a flow of data.</p> <p><strong>An observable is an adapter hooked onto an event source that produces promise every time there is an event coming through.</strong></p> <p>In our code, we can declare an observable as our data source (data stream), and we can subscribe to the observable in one or more locations in our system.</p> <pre><code class=\\\"language-javascript\\\">// Example using RxJS\\n// Rx.Observable.fromEvent takes in a DOM element and\\n// a DOM event. It hooks the event name to the element\\n// Every time when the event fires, it pumps a piece of\\n// data through the observable.\\nconst observable = Rx.Observable.fromEvent(btn, “click“);\\nobservable\\n    .map(function mapper(evt) {\\n        return evt.target.className;\\n    })\\n    .filter(function filterer(className) {\\n        return /foobar/.test(className);\\n    })\\n    .distinctUntilChanged()\\n    .subscribe(function (data) {\\n        const className = data[1];\\n        console.log(className);\\n    });</code></pre> <p><strong>RxJS Examples Reference: <a href=\\\"http://rxmarbles.com/\\\">rxmarbles.com</a></strong></p> <h2 id=\\\"communicating-sequential-processes\\\">Communicating Sequential Processes</h2> <p>CPS models concurrency with channels.</p> <ul> <li>Channel is similar to a stream / pipe without buffer size but with built-in back pressure<ul> <li>back pressure: The two ends of the stream cannot communicate with each other, the only way to tell one end to stop sending data is to block the end → back pressure</li> <li>back pressure is a reversed way of communicating from consumer to producer to tell the producer to stop producing/pushing data.</li> </ul> </li> <li>Channel can only take one message at a time → blocking channels<ul> <li>You can’t send me something until I am ready to take it.</li> <li>I can’t take anything until you are ready to send it.</li> </ul> </li> </ul> <p>CSP models your application with lots of tiny independent processes.</p> <ul> <li>There are times when the processes need to coordinate with each other, send messages to each other. After the coordination is done, they are unblocked and go back to being independent again.</li> <li>In JavaScript world, things aren’t running independently as above, but generators is close to it.<ul> <li>Generator can block itself but not affect any other part of the application.</li> <li>We can have a bunch of generators running in different parts of our application, they are all independent of each other. At some point in time, two generators want to coordinate with each other, they need a communication channel where they can both block each other, waiting for each other to show up. Once the message is shown up and sent to each other, they will be unblocked and go back to be independent again.</li> </ul> </li> </ul> <pre><code class=\\\"language-javascript\\\">const ch = chan();\\nfunction* process1() {\\n    yield put(ch, “Hello“);\\n    const msg = yield take(ch);\\n    console.log(msg);\\n}\\nfunction* process2() {\\n    const greeting = yield take(ch);\\n    yield put(ch, greeting + “ World“);\\n    console.log(“Done!“);\\n}\\n// Hello World\\n// Done!</code></pre> <p><strong>Event channels</strong></p> <pre><code class=\\\"language-javascript\\\">function fromEvent(element, eventType) {\\n    const ch = csp.chan();\\n    ${el}.bind(eventType, function (e) {\\n        csp.putAsync(ch, e);\\n    });\\n    return ch;\\n}\\ncsp.go(function* () {\\n    const ch = fromEvent(el, “mousemove“);\\n    while (true) {\\n        const e = yield csp.take(ch);\\n        console.log(\\n            e.clientX + “, “ + e.clientY\\n        );\\n    }\\n});</code></pre> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h2 id=\\\"example-candidate-for-generics\\\">Example candidate for generics</h2> <pre><code class=\\\"language-java\\\">// Object-based collection\\npublic class Stack {\\n    private Object[] elements;\\n    private int size = 0;\\n    private static final int DEFAULT_CAPACITY = 16;\\n    public Stack() {\\n        this.elements = new Object[DEFAULT_CAPACITY];\\n    }\\n    public void push(Object e) {\\n        ensureCapacity();\\n        elements[size++] = e;\\n    }\\n    public Object pop() {\\n        if (size == 0) {\\n            throw new EmptyStackException();\\n        }\\n        Object result = elements[--size];\\n        elements[size] = null;\\n        return result;\\n    }\\n    public boolean isEmpty() {\\n        return size == 0;\\n    }\\n    public void ensureCapacity() {\\n        if (elements.length == size) {\\n            elements = Arrays.copyOf(elements, 2 * size + 1);\\n        }\\n    }\\n}</code></pre> <h2 id=\\\"generification\\\">Generification</h2> <ol> <li>Add one or more type parameters to class declarations</li> <li>Replace all the uses of the type Object with the appropriate type parameter</li> </ol> <pre><code class=\\\"language-java\\\">public class Stack&lt;E&gt; {\\n    private E[] elements;\\n    private int size = 0;\\n    private static final int DEFAULT_CAPACITY = 16;\\n    @SuppressWarnings(&quot;unchecked&quot;)\\n    public Stack() {\\n        this.elements = (E[]) new Object[DEFAULT_CAPACITY];\\n    }\\n    public void push(E e) {\\n        ensureCapacity();\\n        elements[size++] = e;\\n    }\\n    public E pop() {\\n        if (size == 0) {\\n            throw new EmptyStackException();\\n        }\\n        E result = elements[--size];\\n        elements[size] = null;\\n        return result;\\n    }\\n    public boolean isEmpty() {\\n        return size == 0;\\n    }\\n    public void ensureCapacity() {\\n        if (elements.length == size) {\\n            elements = Arrays.copyOf(elements, 2 * size + 1);\\n        }\\n    }\\n}</code></pre> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h2 id=\\\"generics-definition\\\">Generics Definition</h2> <p>A class or an interface whose declaration has one or more type parameters is a <strong>generic</strong> class or interface.</p> <p>Example: <code>List</code> interface has a single type parameter, representing its element type.</p> <ul> <li><code>List&lt;E&gt;</code>: a <code>List</code> of element with type <code>E</code></li> </ul> <p>Generic classes and interfaces are known as <strong>generic types</strong></p> <ul> <li>Each generic type defines a set of parameterized types</li> <li><code>List&lt;String&gt;</code> is a parameterized type representing a list whose elements are of type <code>String</code>.</li> </ul> <p>Each generic type defines a <strong>raw type</strong>.</p> <ul> <li>A raw type of <code>List&lt;E&gt;</code> is <code>List</code>.</li> <li>A raw type behaves as if all of the generic type information were erased from teh type delaration.</li> <li>It exists for compatibility with pre-generic code.</li> </ul> <h2 id=\\\"raw-type-example\\\">Raw type example</h2> <pre>\\n// Raw Collection type - DON'T DO THIS\\nprivate final Collection stamps = ...;\\n</pre> <p>If you use this declaration and then accidentally put an element of type <code>Coin</code> into the <code>stamps</code> collection, it will compile and run without error.</p> <pre>\\nstamps.add(new Coin(...));\\n</pre> <p>You do not get an error until you try to retrieve the <code>coin</code> from <code>stamps</code>:</p> <pre>\\nfor (Iterator i = stamps.iterator(); i.hasNext()) {\\n    // Throws ClassCastException\\n    Stamp stamp = (Stamp) i.next();\\n}\\n</pre> <h2 id=\\\"use-generics\\\">Use generics</h2> <p>With generics, the type declaration contains the information:</p> <pre>\\nprivate final Collection<Stamp> stamps = ...;\\n</Stamp></pre> <ul> <li>From this declartion, the compiler knows that stamps should contain only <code>Stamp</code> instances. If not, the code will fail at the compilation time.</li> </ul> <p><strong>If you use raw types, you lose all the safety and expressiveness benefits of generics.</strong></p> <h2 id=\\\"exceptions\\\">Exceptions</h2> <ul> <li>You must use raw types in class literals.</li> <li>Since generic type information is erased at runtime, it is illegal to use the <code>instanceof</code> operator on parameterized types other than unbounded wildcard types.<pre>\\nif (o instanceof Set) {\\n  Set<?> s = (Set<?>) o;\\n}\\n</pre></li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<ul> <li>unchecked cast warnings</li> <li>unchecked method invocation warnings</li> <li>unchecked conversion warnings</li> <li>unchecked parameterized varag type warnings</li> </ul> <pre><code class=\\\"language-java\\\">// warning: unchecked conversion\\n// required: Set&lt;Lark&gt;\\n// found:    HashSet\\nSet&lt;Lark&gt; exaltation = new HashSet();</code></pre> <p>Fix for the above code:</p> <pre><code class=\\\"language-java\\\">// &lt;&gt; diamond operator tells the compiler to infer\\n// the correct actual type parameter.\\nSet&lt;Lark&gt; exaltation = new HashSet&lt;&gt;();</code></pre> <p><strong>Eliminate every unchecked warnings that you can.</strong></p> <ul> <li>if you eliminate all the unchecked warnings, you are assured your code is <strong>typesafe</strong>,</li> <li><strong>typesafe</strong> means you will not get a <code>ClassCastException</code> at runtime.</li> <li>if you cannot eliminate a warning but you can prove that the code that provoked the warning is typesafe, then suppress the warning with an <code>@SuppressWarnings(&quot;unchecked&quot;)</code> annotation.<ul> <li>always use the <code>SuppressWarnings</code> annotation on the smallest scope possible.</li> <li>it is illegal to put a <code>SuppressWarnings</code> annotation on the return statement because it is not a declaration. You might need to declare a local variable to hold the return value and annotate its declaration.</li> </ul> </li> <li>every time you use <code>@SuppressWarnings(&quot;unchecked&quot;)</code> annotation, add a comment saying why it is safe to do so.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h3 id=\\\"arrays-are-covariant\\\">Arrays are <strong>covariant</strong></h3> <p>What does covariant mean? Example: if <code>Sub</code> is a subtype of type <code>Super</code>, then the array type <code>Sub[]</code> is a subtype of the array type <code>Super[]</code>.</p> <p>Generics are <strong>invariant</strong>. Example: for any two distinct types <code>Type1</code> and <code>Type2</code>, <code>List&lt;Type1&gt;</code> is neither a subtype nor a supertype of <code>List&lt;Type2&gt;</code>.</p> <pre><code class=\\\"language-java\\\">// Fails at runtime:\\nObject[] objectArray = new Long[1];\\n// Throws an ArrayStoreException:\\nobjectArray[0] = &quot;I do not fit in&quot;;</code></pre> <pre><code class=\\\"language-java\\\">// Will not compile, incompatible types\\nList&lt;Object&gt; objectList = new ArrayList&lt;Long&gt;();\\nobjectList.add(&quot;I do not fit in&quot;);</code></pre> <p>Either way you cannot put a <code>String</code> into a <code>Long</code> container.</p> <ul> <li>With array, you find out the mistake at <strong>runtime</strong>.</li> <li>With list, you find out at <strong>compile time</strong>.</li> </ul> <h3 id=\\\"arrays-are-reified\\\">Arrays are <strong>reified</strong></h3> <p>What does reified mean? Array knows and enforces its element type at <strong>runtime</strong>.</p> <p>Generics are implemented by <strong>erasure</strong>, which means they enforce their type constraints only at <strong>compile time</strong> and discard (or <em>erase</em>) their element type information at runtime.</p> <ul> <li>Erasure is what allows generic types to interoperate freely with legacy code that did not use generics, ensuring a smooth transition to generics in Java 5.</li> </ul> <p>Due to these two fundamental differences between arrays and generics, arrays and generics do not mix well.</p> <pre><code class=\\\"language-java\\\">// Illegal array creation expressions:\\nnew List&lt;E&gt;[]\\nnew List&lt;String&gt;[]\\nnew E[]\\n// All of the above will result in generic array creation errors\\n// at compile time.</code></pre> <blockquote> <p>Why is it illegal to create a generic array? <strong>Because it is not typesafe.</strong></p> </blockquote> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>Static utility methods that operate on parameterized types are generic.</p> <ul> <li>All of the algorithm methods in <code>Collections</code> are generic: e.g., <code>binarySearch</code> and <code>sort</code>.</li> <li>The type parameter list, which declares the type parameters, goes between a method modifiers and its return type. Example of a generic method:<pre><code class=\\\"language-java\\\">// Generic method\\npublic static &lt;E&gt; Set&lt;E&gt; union(Set&lt;E&gt; s1, Set&lt;E&gt; s2) {\\n  Set&lt;E&gt; result = new HashSet&lt;&gt;(s1);\\n  result.addAll(s2);\\n  return result;\\n}</code></pre> Example of a program exercising the generic method:<pre><code class=\\\"language-java\\\">pulbic static void main(String[] args) {\\n  Set&lt;String&gt; guys = set.of(&quot;Tom&quot;, &quot;John&quot;, &quot;Harry&quot;);\\n  Set&lt;String&gt; stooges = set.of(&quot;Larry&quot;, &quot;Moe&quot;, &quot;Harry&quot;);\\n  Set&lt;String&gt; aflCio = union(guys, stooges);\\n  System.out.println(aflCio);\\n}</code></pre> </li> </ul> <h3 id=\\\"generic-singleton-factory\\\">Generic singleton factory</h3> <p>There are times that you need to create an object that is immutable but applicable to many different types.</p> <p>Since generics are implemented by <strong>erasure</strong>, you can use a single object for all required type parameterizations, but you need to write a <em>static factory method</em> to repeatedly dole out the object for each requested type parameterization. &lt;- Generic Singleton Factory.</p> <pre><code class=\\\"language-java\\\">// Generic singleton factory pattern\\nprivate static UnaryOperator&lt;Object&gt; IDENTITY_FN = (t) -&gt; t;\\n@SuppressWarnings(&quot;unchecked&quot;)\\npublic static &lt;T&gt; UnaryOperator&lt;T&gt; identityFunction() {\\n    return (UnaryOperator&lt;T&gt;) IDENTITY_FN;\\n}</code></pre> <ul> <li>It would be wastful to create a new identity function object for each type, since it is stateless, generic singleton factory is suffice.</li> <li>The cast from <code>UnaryOperator&lt;Object&gt;</code> to <code>UnaryOperator&lt;T&gt;</code> will cause an unchecked cast warning, but we know IDENTITY_FN is returning the value of T directly, it is type safe.</li> </ul> <h3 id=\\\"recursive-type-bound\\\">Recursive type bound</h3> <p>It is relatively rare for a type parameter to be bounded by some expression involving the type parameter itself, which is called <strong>recursive type bound</strong>.</p> <ul> <li>a common use of recursive type bounds is in connection with the <code>Comparable</code> interface.<pre><code class=\\\"language-java\\\">public interface Comparable&lt;T&gt; {\\n  int compareTo(T o);\\n}</code></pre> Every element in a comparable collection is comparable to every other element in the collection &lt;- <strong>mutually comparable</strong>.<pre><code class=\\\"language-java\\\">// Using a recursive type bound to express mutual comparability\\npublic static &lt;E extends Comparable&lt;E&gt;&gt; E max(Collection&lt;E&gt; collection);</code></pre> </li> <li>The type bound <code>&lt;E extends Comparable&lt;E&gt;&gt;</code> is read as <code>any type E that can be compared to itself</code>.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>Parameterized types are <em>invariant</em>.</p> <ul> <li>For two distinct types <code>Type1</code> and <code>Type2</code>, <code>List&lt;Type1&gt;</code> is neither a subtype nor a supertype of <code>List&lt;Type2&gt;</code>.</li> <li>Although it is counterintuitive that <code>List&lt;String&gt;</code> is not a subtype of <code>List&lt;Object&gt;</code>.</li> </ul> <p>Consider the <code>Stack</code> class:</p> <pre><code class=\\\"language-java\\\">public class Stack&lt;E&gt; {\\n    public Stack();\\n    public void push(E e);\\n    public E pop();\\n    public boolean isEmpty();\\n}</code></pre> <p>Add a method that takes a sequence of elements and pushes them onto the stack:</p> <pre><code class=\\\"language-java\\\">public void pushAll(Iterable&lt;E&gt; src) {\\n    for (E e : src) {\\n        push(e);\\n    }\\n}</code></pre> <p>This compiles fine, but the following code will not work as expected:</p> <pre><code class=\\\"language-java\\\">Stack&lt;Number&gt; numberStack = new Stack();\\nIterable&lt;Integer&gt; integers = ...;\\nnumberStack.pushAll(integers); // Compilation error</code></pre> <p>To get away from this error: <strong>bounded wildcard type</strong></p> <pre><code class=\\\"language-java\\\">// The input parameter is an iterable of some subtype of E\\n// Wildcard type for a parameter that serves as an E producer\\npublic void pushAll(Iterable&lt;? extends E&gt; src) {\\n    for (E e : src) {\\n        push(e);\\n    }\\n}</code></pre> <p>Add a method that pops each element off the stack and adds the elements to the given collection.</p> <pre><code class=\\\"language-java\\\">public void popAll(Collection&lt;E&gt; dst) {\\n    while (!isEmpty()) {\\n        dts.add(pop());\\n    }\\n}</code></pre> <p>Again this compiles file, but the following code will not work as expected:</p> <pre><code class=\\\"language-java\\\">Stack&lt;Number&gt; numberStack = new Stack();\\nCollection&lt;Object&gt; objects = ...;\\nnumberStack.popAll(objects); // Compilation error</code></pre> <p><code>popAll</code> should not be <code>collection of type E</code> but <code>collection of some supertype of E</code>.</p> <pre><code class=\\\"language-java\\\">// Wildcard type for a parameter that serves as an E consumer\\npublic void popAll(Iterable&lt;? super E&gt; dst) {\\n    while (!isEmpty()) {\\n        dts.add(pop());\\n    }\\n}</code></pre> <p><strong>For maximum flexibility, use wildcard types on input parameters that represent producers or consumers.</strong></p> <ul> <li>if an input parameter is both a producer and a consumer, then wildcard types will not help you. You will need an exact type match.</li> <li><strong>PECS</strong> stands for producer-extends, consumer-super.<ul> <li>if a parameterized type represents a <code>T</code> producer, use <code>&lt;? extends T&gt;</code>.</li> <li>if a parameterized type represents a <code>T</code> consumer, use <code>&lt;? super T&gt;</code>.</li> </ul> </li> </ul> <p><strong>Do not use wildcard types as return types.</strong></p> <ul> <li>it will force the users of this method to use wildcard types in client code.</li> </ul> <p>Revise the declaration of <code>max</code> method in Item 30:</p> <pre><code class=\\\"language-java\\\">// Original version\\npublic static &lt;T extends Comparable&lt;T&gt;&gt; T max(List&lt;T&gt; list)\\n// Revised version\\npublic static &lt;T extends Comparable&lt;? super T&gt;&gt; T max(List&lt;? extends T&gt; list)</code></pre> <ul> <li>Comparables are always <em>consumers</em>. You should always prefer to use <code>Comparable&lt;? super T&gt;</code>.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>The purpose of<code>varargs</code> is to allow clients to pass a variable number of arguments to a method, but it is a <em>leaky absctraction</em>.</p> <ul> <li>When you invoke a <code>varargs</code> method, an array is created to hold the <code>varargs</code> parameters.</li> <li>This array, which should be an implementation detail, is <strong>visible</strong>.</li> </ul> <p>You will get confusing warnings when <code>varargs</code> parameters have generic or parameterized types.</p> <ul> <li>All generic and parameterized types are non-reifiable. If a method declares its varargs parameter to be of a non-reifiable type, the compiler generates a confusing warning on the declaration.</li> <li>If a method is invoked on <code>varargs</code> parameters whose inferred type is non-reifiable, the compiler generates a warning on the invokation.</li> </ul> <pre><code>warning: [unchecked] Possible heap pollution from parameterized vararg type ...</code></pre> <p><strong>Heap Pollution</strong> occurs when a variable of a parameterized type refers to an object that is not of that type.</p> <pre><code class=\\\"language-java\\\">// Mixing generics and varargs can violate type safety\\nstatic void dangerous(List&lt;String&gt;... stringLists) {\\n    List&lt;Integer&gt; intList = List.of(42);\\n    Object[] objects =  stringLists;\\n    objects[0] = intList; // Heap pollution\\n    String s = stringLists[0].get(0); // ClassCastException\\n}</code></pre> <p><strong>It is unsafe to store a value in a generic varargs array parameter.</strong></p> <h3 id=\\\"why-is-it-legal-to-declare-a-method-with-a-generic-varargs-parameter\\\">Why is it legal to declare a method with a generic <code>varargs</code> parameter?</h3> <p>The methods with <code>varargs</code> parameters of generic or parameterized types can be very useful in practice, so the language designer opted to live with this inconsistency.</p> <p>Java libraries export serveral such methods:</p> <ul> <li><code>Arrays.asList(T... items)</code></li> <li><code>Collections.addAll(Collection&lt;? super T&gt; c, T... otherElements)</code></li> <li><code>EnumSet.of(E first, E... rest)</code></li> </ul> <h3 id=\\\"how-to-suppress-the-warnings\\\">How to suppress the warnings?</h3> <p>Prior to Java 7, you had to use <code>@SuppressWarnings(&quot;unchecked&quot;)</code> to eliminate the warnings at every call site.</p> <p>In Java 7, the <code>SafeVarargs</code> annotation was added to the platform, to allow the author of a method with a generic <code>varargs</code> parameter to suppress client warnings automatically.</p> <p><strong>the <code>SafeVarargs</code> annotation constitutes a promise by the author of a method that it is typesafe.</strong></p> <h3 id=\\\"how-to-ensure-a-method-with-a-generic-varargs-parameter-safe\\\">How to ensure a method with a generic <code>varargs</code> parameter safe?</h3> <p>A method with a generic <code>varargs</code> parameter is safe:</p> <ol> <li>If the method does not store anything into the array, which overrides the parameters: it does not store anything in the <code>varargs</code> parameter array, and</li> <li>If it does not allow a reference to the array to escape, which would enable untrusted code to access the array: it does not make the array (or a clone) visible to untrusted code.</li> </ol> <p>Note: In Java 8, <code>SafeVarargs</code> is only legal on static methods and final instance methods.</p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>Common uses of generics include:</p> <ul> <li>Collections: <code>Set&lt;T&gt;</code>, <code>Map&lt;K, V&gt;</code></li> <li>Single-element containers: <code>ThreadLocal&lt;T&gt;</code>, <code>AtomicReference&lt;T&gt;</code></li> </ul> <p>Sometimes you might need more flexibility, for example, a database row can have arbitrarily many columns and it would be nice to be able to access all of them in a typesafe manner.</p> <p>The idea is to <em>parameterize the key instead of the container</em>.</p> <p>Consider a <code>Favorites</code> class that allows its clients to store and retrieve a favorite instance of arbitrarily many types.</p> <ul> <li><code>Class</code> object for the type will play the part of the parameterized key.</li> <li>The reason this works is that class <code>Class</code> is generic: <code>String.class</code> is of type <code>Class&lt;String&gt;</code>.</li> <li>When a class literal is passed among methods to communicate both compile-time and runtim type information, it is called a <strong>type token</strong>.</li> </ul> <pre><code class=\\\"language-java\\\">// Typesafe heterogeneous container pattern - API\\npublic class Favorites {\\n    public &lt;T&gt; void putFavorite(Class&lt;T&gt; type, T instance);\\n    public &lt;T&gt; T getFavorite(Class&lt;T&gt; type);\\n}</code></pre> <pre><code class=\\\"language-java\\\">// Typesafe heterogeneous container pattern - Client\\npublic static void main(String[] args) {\\n    Favorites f = new Favorites();\\n    f.putFavorite(String.class, &quot;Java&quot;);\\n    f.putFavorite(Integer.class, 0xcafebabe);\\n    f.putFavorite(Class.class, Favorites.class);\\n    String favString = f.getFavorite(String.class);\\n    int favInt = f.getFavorite(Integer.class);\\n    Class&lt;?&gt; favClass = f.getFavorite(Class.class);\\n    System.out.printf(&quot;%s %x %s%n&quot;, favString, favInt, favClass.getName());\\n}</code></pre> <p>A <code>Favorites</code> instance is <em>typesafe</em>.</p> <ul> <li>it will never return an <code>Integer</code> when you ask it for a <code>String</code>.</li> <li>it is also heterogeneous: unlike an ordinary map, all the keys are of different types.</li> </ul> <pre><code class=\\\"language-java\\\">// Typesafe heterogeneous container pattern - Implementation\\npublic class Favorites {\\n    // Every key can have a different parameterized type.\\n    private Map&lt;Class&lt;?&gt;, Object&gt; favorites = new HashMap&lt;&gt;();\\n    public &lt;T&gt; void putFavorite(Class&lt;T&gt; type, T instance) {\\n        // Achieve runtim type safety with a dynamic cast\\n        favorites.put(Objects.requireNonNull(type), type.cast(instance));\\n    }\\n    public &lt;T&gt; T getFavorite(Class&lt;T&gt; type) {\\n        return type.cast(favorites.get(type));\\n    }\\n}</code></pre> <p>The implementation of <code>getFavorite</code>:</p> <ol> <li>It gets from the <code>favorites</code> map the value corresponding to the given <code>Class</code> object. This is the correct object reference to return, but it has the wrong compile-time type: it is <code>Object</code>and we need to return a value of type <code>T</code>.</li> <li><code>getFavorite</code> dynamically casts the object reference to the type represented by the <code>Class</code> object.<ul> <li><code>Class.cast</code> checks that its argument is an instance of the type represented by the <code>Class</code> object (<code>Class&lt;T&gt;</code>). If so, returns the argument. Otherwise throws <code>ClassCastException</code>.</li> </ul> </li> </ol> <pre><code class=\\\"language-java\\\">public class Class&lt;T&gt; {\\n    T cast(Object obj);\\n}</code></pre> <p><code>Favorites</code> class cannot be used on a non-reifiable type.</p> <ul> <li>You can store your favorite <code>String</code> or <code>String[]</code>.</li> <li>You cannot store your favorite <code>List&lt;String&gt;</code> or <code>List&lt;Integer&gt;</code>.<ul> <li>The class literal <code>List&lt;String&gt;.class</code> is a syntax error: <code>List&lt;String&gt;</code> and <code>List&lt;Integer&gt;</code> share the same <code>Class</code> object: <code>List.class</code>.</li> </ul> </li> </ul> <p>The type tokens used by <code>Favorites</code> are unbounded. What if you want to pass an object of type <code>Class&lt;?&gt;</code> to a method that requires a bounded type token?</p> <pre><code class=\\\"language-java\\\">public &lt;T extends Annotation&gt; T getAnnotation(Class&lt;T&gt; annotationType);</code></pre> <pre><code class=\\\"language-java\\\">// Use of asSubclass to safely cast to a bounded type token\\nstatic Annotation getAnnotation(\\n    AnnotatedElement element,\\n    String annotationTypeName) {\\n    Class&lt;?&gt; annotationType = null;\\n    try {\\n        annotationType = Class.forName(annotationTypeName);\\n    } catch(Exception e) {\\n        throw new IllegalArgumentException(e);\\n    }\\n    return element.getAnnotation(annotationType.asSubclass(Annotation.class));\\n}</code></pre> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h2 id=\\\"what-is-kubernetes\\\">What is Kubernetes</h2> <p>K8s is an orchestration framework for software containers.</p> <ul> <li>Containers are a way to package and run code that is more efficient than VMs.</li> <li>K8s is a software layer that sits in between your applications and your hardware infrastructure.</li> <li>K8s provides the tools you need to run containerized applications in production and at scale.</li> </ul> <h2 id=\\\"what-is-gke\\\">What is GKE</h2> <p>GKE is short for Google K9s Engine, is a Google-managed service for K8s. GKE is built on top of GCE.</p> <h2 id=\\\"what-is-cloud-computing\\\">What is Cloud Computing</h2> <p>Cloud computing entails resources being provided to you, <em>as a service</em>. GCP offers several services that let you run general purpose compute workloads on Google hardware.</p> <h3 id=\\\"five-fundamental-addributes-of-cloud-computing\\\">Five fundamental addributes of Cloud Computing</h3> <ul> <li>Compute resources are <strong>on-demand and self-service</strong>: Cloud computing customers using automated interface and get the processing power, storage and network they need with no human intervention.</li> <li>Compute resources are accessible over a network from <strong>any</strong> location: Providers allocate resources to customers from a large pool, allowing them to benefit from economies of scale. Customers do not care about the exact physical location of these resources.</li> <li>Compute resources themselves are <strong>elastic</strong>: Customers who need more resources can get them quickly, when they need less, they can scale back/down.</li> <li>Compute resources are only paid for what the customers have used: Customers stop paying when they stop using the resources.</li> </ul> <h3 id=\\\"what-does-gcp-offer\\\">What does GCP offer</h3> <p>Run your code in Cloud with Google-managed services.</p> <h4 id=\\\"different-type-of-solutions\\\">Different type of solutions</h4> <ul> <li>GCE, Google Compute Engine: lets you run VMs on demand in the Cloud. It is essentially a Google-Infrastrcture-as -a-service (IaaS) solution. It provides the <strong>max.</strong> flexibility for people who prefer to manage those server instances themselves.<ul> <li>Most of the applications need a DB of some kind. If you build a Cloud application, you can install and run your own DB forward on a VM inside of GCE. You start up the VM, instlal your DB engine, set it up just like you would in a DC.</li> <li>You have to support and manage the DB yourself.</li> <li>Or you can use Google fully managed DB and storage services.</li> </ul> </li> <li>GKE, Google K8s Engine: lets you run containerized applications on a Cloud environment that Google Cloud manages fro you under your administrative control.</li> <li>GAE, Google App Engine: GCP fully managed Platform-as-a-Service (PaaS) framework. It is a way to run your code in the Cloud <strong>without having to worry about infrastructure at all</strong>. You can focus on your code and let Google deal with all the provisioning and resource management.</li> <li>GCF, Google Cloud Functions: is a completely serverless execution environment or Functions-as-a-Serivce (FaaS) solution. It executes your code in response to events, Google scales resources as required, but you only pay for service while your code runs.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<hr> <h2 id=\\\"resource-management-in-gcp\\\">Resource Management in GCP</h2> <h3 id=\\\"google-cloud-regions\\\">Google Cloud Regions</h3> <p>Behind services provided by GCP, lay a huge range of GPC resources, physical assets such as physical servers and hard drives and virtual resources such as VMs and containers.</p> <ul> <li>Resources are managed by Google within its global DCs.</li> <li>GCP provides resources in multi-regions, regions, zones.<ul> <li>GCP divides the world up into 3 multi-regional areas: Americas, Europe, and Asia Pacific.</li> <li>The 3 multi-regional areas are divided into regions which are independent geographic areas on the same continent.<ul> <li>Within a region, there is fast network connectivity, generally round-trip network latencies of under p95 1ms.</li> </ul> </li> <li>Regions are divided into zones which are deployment areas for GCP resources within a focus geographic area.<ul> <li>You can think of a zone as a DC or multiple DCs within a region.</li> <li>GCE VM instances reside within a specific zone, if that zone becomes unavailable, so would your VMs and the workloads running in them.</li> <li>GKE uses GCE, so your GKE workloads could be affected as well if a zone is down.</li> <li>Deploying applications across multiple zones enables fault tolerance and high availability.</li> </ul> </li> </ul> </li> </ul> <h3 id=\\\"resource-hierarchy\\\">Resource Hierarchy</h3> <p>The GCP resources you use, no matter where they reside, <strong>must belong to a project</strong>.</p> <h4 id=\\\"what-is-a-project\\\">What is a project</h4> <p>A project is the base level organizing entity for creating and using resources and services and managing billing APIs and permissions.</p> <ul> <li>Regions and zones physically organize a GCP resources you use and projects logically organize them.</li> <li>Each project is identified by a unique project ID and project number. Project ID and number are not changable.</li> <li>You can name your project and apply labels for filtering. These labels are changable.</li> </ul> <h4 id=\\\"what-is-a-folder\\\">What is a folder</h4> <p>Projects can belong to a folder which is another grouping mechanism.</p> <ul> <li>You should use folders to reflect their hierarchy of your enterprise and apply policies at the right levels within your enterprise.</li> <li>You can nest folders inside of folders. For example, you can have a folder for each department, and with each department folder, you can have sub folders for each of the teams that make it up. The projects of each team belong to its folder.</li> </ul> <h4 id=\\\"what-is-an-organization\\\">What is an organization</h4> <p>A single organization owns all the folders beneath it. Organization is the root node of a GCP resource hierarchy.</p> <ul> <li>You are not required to have an organization to use GCP.</li> <li>Organizations let you set policies that apply throughout your entire enterprise.</li> <li>Organization is required for you to use folders.</li> </ul> <h4 id=\\\"iam\\\">IAM</h4> <p>IAM lets you fine tune access controls all the GCP resources you use.</p> <ul> <li>You define IAM policies that control user access to resources.</li> <li>You apply these policies at the level you choose, and those policies inherit downwards.</li> </ul> <h4 id=\\\"billing\\\">Billing</h4> <p>Billing accumulates at the <strong>project</strong> level.</p> <ul> <li>Most GCP customers have a resource hierarchy that looks like their employee organization chart.</li> <li>Their project billing looks like their cost center structure.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<hr> <h2 id=\\\"billing-in-gcp\\\">Billing in GCP</h2> <p>Billing in GCP is set up at the GCP project level.</p> <ul> <li>When you define a GCP project, you will link a billing account to it.</li> <li>This billing account is where you will configure all your billing information, including your payment option.</li> <li>You can link a billing account to one or more projects.</li> <li>Projects you do not link any billing account could only use free GCP services.</li> </ul> <p>Your billing account can be charged automatically and invoiced every month, or at every threshold limit.</p> <p>You can separate project billings by setting up billing sub-accounts. Some GCP customers who resell GCP services use those sub-accounts for each of their own clients.</p> <h3 id=\\\"how-can-i-prevent-running-up-a-big-gcp-bill\\\">How can I prevent running up a big GCP bill?</h3> <p>GCP provides tools to help:</p> <ul> <li>Budgets: You can define budgets at the billing account level or even at the project level.</li> <li>Alerts: To be notified when costs approach your budget limit, you can create alerts.</li> <li>Billing export: allows you to store detailed billing information in places where it is easy to retrieve for external analysis, such as a BigQuery dataset or a Cloud Storage bucket.</li> </ul> <h4 id=\\\"billing-quotas\\\">Billing quotas</h4> <p>GCP Billing also implements quotas which limit unforeseen extra billing charges.</p> <ul> <li>Quotas are designed to prevent the over consumption of resources because of an error or a malicious attack.</li> <li>Quotas apply at the project level.</li> </ul> <p>Two types of quotas:</p> <ul> <li>Rate quota<ul> <li>Rate quotas reset after a specific time.</li> <li>GKE service implements a quota of 1000 calls to its API for each GCP project every 100 seconds. After the 100 seconds, that limit is reset.</li> </ul> </li> <li>Allocation quota<ul> <li>Allocation quota controls the number of resources you can have in your projects.</li> <li>They do not reset at any interval.</li> </ul> </li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<hr> <h2 id=\\\"introduction-to-containers\\\">Introduction to Containers</h2> <ul> <li><p>Not long ago the default way to deploy an application was on its own physical computer.</p> <ul> <li>Define physical space, power, cooling, network connectivity, OS installation, software dependencies.</li> <li>If you need more processing power, security or scalability, you have to add more computers.</li> </ul> </li> <li><p>Vertualization helped by making possible to run multiple virtual servers and OS on the same physical computer.</p> <ul> <li>A hypervisor is the software layer that breaks the dependencies of an OS with its underlying hardware.</li> <li>Hypervisor allows several virtual machines and share that same hardware.</li> <li>KVM is a well-known hypervisor.</li> <li>An application, all of its dependencies and OS are still bundled together and it is not very easy to move from a VM from one hypervisor product to another.<ul> <li>Everytime you start up a VM, its OS still takes time to boot up.</li> <li>Running multiple applications within a single VM creates problem where applications that share dependencies are not isolated from each other and the resource requirements from one application can starve out other applications the resource they need.</li> <li>A dependency upgrade for one application might break another application.</li> <li>You can solve the above problems in the way that each application maintains its own dependencies and the kernal is isolated. This way has its own limitations: dedicated VMs are redundant and wasteful.</li> </ul> </li> </ul> </li> </ul> <p>A more efficient way to resolve the dependency problem is to implement abstraction at the level of the application and its dependencies.</p> <ul> <li>You do not need to virtualize the entire machine, or even the entire OS, but just the <strong>user space</strong>.</li> <li><strong>User space</strong> is all the code that resides above the kernel and includes the applications and their dependencies.</li> </ul> <p>This is what it means to <strong>create containers</strong>.</p> <ul> <li>Containers are isolated user spaces per running application code.</li> <li>Containers are lightweight because they do not carry a full OS.</li> <li>Containers can be scheduled or packed tightly onto the underlying system.</li> <li>Containers can be created and shut down very quickly because you are just starting and stopping the processes that make up the application and not booting up the entire VM and initializing OS for each application.</li> </ul> <p>Containerization is the next step in the evolution of managing code.</p> <ul> <li>Containers are delivery vehicles for application code, they are lightweight, stand-alone, resource efficient and portable execution packages.</li> <li>Containers allow you to execute your code on VMs without worrying about software dependencies: application runtimes, system tools, system libraries, and other settings.<ul> <li>You package your code with all the dependencies it needs, and the engine that executes your container is responsible for making them available at runtime.</li> </ul> </li> <li>Containers allow you to safely make assumptions about the underlying hardware and software.</li> <li>You make incremental changes to a container image against the production image, you can deploy it very quickly with a single file copy.</li> <li>Containers make it easier to build applications that use the microservices design pattern.<ul> <li>That is, loosely coupled, fine-grained components.</li> <li>This modular design pattern allows the OS to scale and upgrade components of an application without affecting the application as a whole.</li> </ul> </li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<hr> <h2 id=\\\"container-images\\\">Container Images</h2> <p>An application and its dependencies are called an image.</p> <ul> <li>A container is simply a running instance of an image.</li> <li>By building software into container images, developers can easily package and ship an application without worrying about the system it will be running on.</li> </ul> <p><strong>Docker</strong> is a tool to build container images and run them.</p> <h3 id=\\\"containers-use-a-set-of-linux-technologies\\\">Containers use a set of Linux technologies</h3> <h4 id=\\\"linux-proccesses\\\">Linux proccesses</h4> <ul> <li><p>Each Linux processes has its own virtual memory address phase, separate from all others.</p> </li> <li><p>Linux processes are rapidly created and destroyed.</p> </li> <li><p>Containers use <em>Linux namespaces</em> to control what an application can see, process ID, directory trees, IP addresses and more.</p> </li> <li><p>Containers use <em>Linux cgroups</em> to control what an application can use, its maximum consumption of CPU time, memory, IO bandwidth and other resources.</p> </li> <li><p>Containers use <em>Union File System</em> to efficiently encapsulate applications and their dependencies into a set of clean minimal layers.</p> </li> </ul> <h3 id=\\\"container-structure\\\">Container structure</h3> <p>Containers are structured in layers. The tool to build the container image (e.g., Docker) reads instructions frmo a file called &quot;Container Manifest&quot; (e.g., Docker file).</p> <ul> <li>Each instruction in the Docker file specifies a layer inside the container image.</li> <li>Each layer is <em>READ ONLY</em>.</li> </ul> <h4 id=\\\"example-docker-file\\\">Example Docker file</h4> <pre><code># Creates the first layer: Pulls a base image from a public repository.\\nFROM ubuntu:18.05\\n# Creates a new layer: contains files copied in from your build tools current directory.\\nCOPY ./app\\n# Builds the application using make command and puts the result of the build into a third layer.\\nRUN make /app\\n# Last layer: specifies what command to run within the container when it is launched.\\nCMD python /app/app.py</code></pre> <p>The best practice is NOT to build your application in the very same comtainer that you ship and run.</p> <ul> <li>Application packaging relies on a multi-stage bulid process in which one container builds the final executable image, a separate container receives only what is needed to actually run the application.</li> </ul> <h3 id=\\\"container-layer\\\">Container layer</h3> <p>When you launch a new container from an image, the container runtime adds a new <em>writable</em> layer on the top of the underlying layers: Container Layer</p> <ul> <li>all changes made to the running container (e.g., writing new files, modifying existing files and deleting files) are written in this thin writable container layer.</li> <li>when the container is deleted, the contents of this writable layer are lost forever.</li> <li>the underlying container image itself remains unchanged.</li> </ul> <p>This fact about containers has an implication for your application design: whenever you want to store data permanently, you must do so somewhere other than a running container image.</p> <p>Since each container has its own writable container layer and all changes are stored in this layer, multiple containers can share access to the same underlying image and yet have their own data state.</p> <h3 id=\\\"container-registry\\\">Container Registry</h3> <p>Google maintains a Container Registry, gcr.io. This registry contains many public open source images and GCP customers use it to store their own private images in a way that integrates well with Clou IAM.</p> <ul> <li>You can store your images that are not public. They are private to your GCP project.</li> </ul> <h3 id=\\\"cloud-build\\\">Cloud Build</h3> <p>You can use Docker command to build your own Container images, one downside is that you must trust the computer you do your builds on.</p> <p>Google provides a managed service for building containers that is also integrated with Cloud IAM: Cloud Build.</p> <ul> <li>Cloud Build can retrieve the source code for your builds from a variety of different storage locations: Cloud Source Repositories, Cloud Storage or git compatible repositories.</li> <li>To generate the build with Cloud Build, you can define a series of steps.<ul> <li>you can configure build steps to fetch dependencies, compile source code, run integration tests, or use tools like Docker, Gradle and Maven.</li> <li>each build step in Cloud Build runs in a Docker container.</li> </ul> </li> <li>Then Cloud Build can deliver your newly built images to various execution environments: GCF, GCA, GCE, GKE, etc.</li> </ul> <h3 id=\\\"lab\\\">Lab</h3> <p>quickstart.sh:</p> <pre><code class=\\\"language-shell\\\">#!/bin/sh\\necho &quot;Hello, world! The time is $(date).&quot;</code></pre> <p>Docker file:</p> <pre><code>FROM alpine\\nCOPY quickstart.sh /\\nCMD [&quot;/quickstart.sh&quot;]</code></pre> <p>Run the following command to build the Docker container image in Cloud Build</p> <pre><code class=\\\"language-shell\\\">gcloud builds submit --tag gcr.io/${GOOGLE_CLOUD_PROJECT}/quickstart-image .</code></pre> <pre><code class=\\\"language-shell\\\"># Clone the training repository\\ngit clone https://github.com/GoogleCloudPlatform/training-data-analyst\\n# Create a soft link as a shortcut to the working directory\\nln -s ~/training-data-analyst/courses/ak8s/v1.1 ~/ak8s\\ncd ~/ak8s/Cloud_Build/a</code></pre> <p>A sample Cloud Build configuration yaml file:</p> <pre><code>steps:\\n- name: &#39;gcr.io/cloud-builders/docker&#39;\\n  args: [ &#39;build&#39;, &#39;-t&#39;, &#39;gcr.io/$PROJECT_ID/quickstart-image&#39;, &#39;.&#39; ]\\nimages:\\n- &#39;gcr.io/$PROJECT_ID/quickstart-image&#39;</code></pre> <p>This configuration file instructs Cloud Build to use Docker to build an image using the Dockerfile speficication in the current local directory, tag it with <code>gcr.io/$PROJECT_ID/quickstart-image</code>.</p> <pre><code class=\\\"language-shell\\\"># Push the image to Container Registry\\ngcloud builds submit --config cloudbuild.yaml .</code></pre> <p>The true power of custom build configuration files is their ability to perform other actions, <strong>in parallel or in sequence</strong>, in addition to simply building containers: running tests on your newly built containers, pushing them to various destinations, and even deploying them to Kubernetes Engine.</p> <pre><code>steps:\\n- name: &#39;gcr.io/cloud-builders/docker&#39;\\n  args: [ &#39;build&#39;, &#39;-t&#39;, &#39;gcr.io/$PROJECT_ID/quickstart-image&#39;, &#39;.&#39; ]\\n# quickstart.sh script simulates a test failure when an argument [&#39;fail&#39;] is passed to it.\\n- name: &#39;gcr.io/$PROJECT_ID/quickstart-image&#39;\\n  args: [&#39;fail&#39;]\\nimages:\\n- &#39;gcr.io/$PROJECT_ID/quickstart-image</code></pre> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<hr> <p>Containers are lean, op devs can create them in numbers far exceeding the counts of virtual machines you used to have. The applications running in the containers need to communicate over the network. However you do not have a network fabric that lets containers find each other. How can you manage your container infrastructure better?</p> <p><strong>K8s is an open source platform that helps you orchestrate and manage your container infrastructure on-premises or on the cloud.</strong></p> <h3 id=\\\"what-is-k8s\\\">What is K8s?</h3> <p>K8s is a container-centric management environment.</p> <ul> <li>K8s automates the deployment, scaling, load balancing, logging, monitoring and all the other features of containerized applications. (These are the features that are characteristic of a typical PaaS)</li> <li>K8s also facilitates the features of IaaS:<ul> <li>allows a wide range of user preferences and configuration flexibility</li> </ul> </li> <li>K8s supports <em>declarative configurations</em>. When you administrate your infrastructure declaratively, you describe the desired state you want to achieve instead of issuing a series of commands to achieve that desired state. K8s job is to make the deployed system conform to your desired state and then keep it there in spite of failures.</li> <li>K8s also allows <em>imperative configuration</em> in which you issue commands to change the system state. Administrating K8s as scale imperatively will be a big missed opportunity. <strong>One of the primary strengths of K8s is its ability to automatically keep a system in a state that you declare.</strong><ul> <li>Experienced K8s admins use imperative configuration only for quick temporary fixes and as a tool in building a declarative configuration.</li> </ul> </li> </ul> <h3 id=\\\"k8s-features\\\">K8s features</h3> <ul> <li>K8s supports different workload types:<ul> <li>K8s supports stateless applications such as an Nginx or Apache web server.</li> <li>and supports stateful applications where user in session data can be stored persistently.</li> <li>K8s also supports batched jobs and demon tasks.</li> </ul> </li> <li>K8s can automatically scale in and out containerized applications based on resource utilization.<ul> <li>You can specify resource requests levels and resource limits for your workloads and K8s will obey them.</li> <li>These resource controls improve overall workload performance within a cluster.</li> </ul> </li> <li>K8s supports workload portability across on-premises or multiple cloud service providers such as GCP, AWS, Azure and others.<ul> <li>This allows K8s to be deployed anywhere.</li> <li>You can move K8s workloadss freely without a vendor login.</li> </ul> </li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<hr> <h3 id=\\\"what-is-gke\\\">What is GKE?</h3> <p>GKE = Google K8s Engine</p> <p>GKE helps you deploy, manage and scale K8s environments for your containerized applications on GCP.</p> <ul> <li>GKE is a component of GCP computer offering.</li> <li>GKE makes it easy to bring your K8s workloads into the cloud.</li> <li>GKE is fully managed by Google, meaning you do not have to provision the underlying resources.<ul> <li>GKE uses a container-optmized OS. These OS are managed by Google. They are optmized to scale quickly and with a minimal resource footprint.</li> </ul> </li> </ul> <h4 id=\\\"clusters\\\">Clusters</h4> <p>When you use GKE, you start by directing the service to instantiate a K8s system for you. This system is called a <strong>cluster</strong>.</p> <ul> <li>GKE auto-upgrade feature can be enabled to ensure that your clusters are automatically upgraded with the latest and greatest version of K8s.</li> </ul> <h4 id=\\\"nodes\\\">Nodes</h4> <p>The VMs that host your containers inside of a GKE cluster, are called <strong>nodes</strong>.</p> <ul> <li>If you enable GKE auto-repair feature, GKE will automatically repair unhealthy nodes for you.<ul> <li>GKE will make periodic health checks on each node in the cluster.</li> <li>If a node is determined to be unhealthy and requires repair, GKE will drain the node, in other words, GKE will cause the worloads in the unhealthy node gracefully exit and then recreate that node.</li> </ul> </li> </ul> <h3 id=\\\"gke-cluster-scaling\\\">GKE cluster scaling</h3> <p>Just as K8s supports scaling workloads, GKE supports scaling the cluster itself.</p> <h3 id=\\\"integration-with-other-gcp-services\\\">Integration with other GCP services</h3> <p>GKE seamlessly integrates with Google Cloud Build and Google Container Registry.</p> <ul> <li>This allows you to automate deployment using private container images that you have securely store in Container Registry.</li> </ul> <p>GKE also integrates with Google IAM, which allows you to control access through the use of accounts and role permissions.</p> <p>Stackdriver is a GCP service for monitoring and management for services, containers, applications and infrastructure. GKE integrates with Stackdriver monitoring to help you understand your applications performance.</p> <p>GKE also integrates with Google virtual private clouds or VPCs, it makes use of GCP networking features.</p> <p>GCP console provides insights into GKE clusters and the resources. It allows you to view, inspect and delete resources in those clusters.</p> <ul> <li>GCP console is a dashbaord for GKE clusters and workloads that you do not have to manage.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<hr> <h3 id=\\\"computing-options-in-gcp\\\">Computing options in GCP</h3> <ul> <li>GCE: Google Compute Engine</li> <li>GKE: Google K8s Engine</li> <li>GAE: Google App Engine</li> <li>Cloud Run</li> <li>Cloud Functions</li> </ul> <h4 id=\\\"gce\\\">GCE</h4> <p><strong>GCE offers VMs that run on GCP.</strong></p> <ul> <li>You can select predefined VM configurations.</li> <li>These VMs can be as large as 160 vCPUs with more than 3TB of memory.</li> <li>You can also create customized configurations to precisely match your performance and cost requirements.</li> </ul> <p><strong>VMs need block storage. GCE offers you two main choices:</strong></p> <ul> <li>persistent disks: offer network stores that cna scale up to 64TB and you can easily take snapshots of these disks for backup and mobility.</li> <li>local SSDs: enable very high I/O operations per second.</li> </ul> <p><strong>You can place your GCE workloads behind global load balancers that support autoscaling.</strong></p> <p><strong>GCE offers a feature called managed instance groups</strong></p> <ul> <li>You can define resources that are automatically deployed to meet demand.</li> </ul> <p><strong>GCP enables fine grained control of costs of GCE resources by per-second billing.</strong></p> <ul> <li>This granularity helps reduce your costs when deploying compute resources for short periods of time, such as batch processing jobs.</li> </ul> <h4 id=\\\"why-gce\\\">Why GCE?</h4> <p>With GCE, you have complete control over your infrastructure.</p> <ul> <li>You can customize OS and even run applications that rely on a mix of OS.</li> <li>You can easily lift and shift your on-premise workloads into GCP without rewriting your applications or making any changes.</li> </ul> <p>GCE is the best option when other computing options do not support your applications or requirements.</p> <h4 id=\\\"gae\\\">GAE</h4> <p>GAE is a fully managed application platform.</p> <ul> <li>Using GAE means <em>zero server management</em> and <em>zero configuration deployments</em>.</li> <li>If you are a developer, you can focus on building applications and not worrying about the deployment part. GAE deploys the required infrastructure for you.</li> </ul> <p>GAE supports popular languages: Java, Node.js, Python, PHP, C#, .NET, Ruby and Go.</p> <p>You can use GAE to run container workloads.</p> <p>Stackdriver monitoring, logging, and diagnostics (debugging, error reporting) are tightly integrated with GAE.</p> <p>GAE also supports version control and traffic splitting.</p> <h4 id=\\\"why-gae\\\">Why GAE?</h4> <p>GAE is a good choice if you simply want to focus on writing code, and you do not want to worry about building the highly reliable and scalable infrastructure that will run on.</p> <ul> <li>You can focus on building application instead of deploying and managing the environment.</li> <li>Use cases for GAE: websites, mobile apps, gaming backends, and as a way to present a RESTful API to the internet.<ul> <li>What is a RESTful API? In short, it is an API that resembles the way a web browser interacts with the web server. RESTful APis are easy for developers to work with and extend.</li> </ul> </li> </ul> <h4 id=\\\"gke\\\">GKE</h4> <p>K8s is an orchestration system for applications in containers. It automates deployment, scaling, load balancing, logging and monitoring and other management featuers.</p> <p>GKE extends K8s management on GCP by adding features and integrating with other GCP services automatically.</p> <ul> <li>GKE supports cluster scaling, persistent disks, automated upgrades to the latest version of K8s, auto-repair for unhealthy nodes.</li> <li>GKE has built-in integration with Cloud Build, Container Registry, Stackdriver monitoring and logging.</li> <li>Existing workloads running within on-premise clusters can easily be moved onto GCP.</li> </ul> <h4 id=\\\"why-gke\\\">Why GKE?</h4> <p>GEK is very well suited for containerized applications. Cloud-native distributed systems and hybrid applications.</p> <h4 id=\\\"cloud-run\\\">Cloud Run</h4> <p>Cloud Run is a managed compute platform that enables to run <strong>stateless</strong> containers via web requests or Cloud Pub/Sub events.</p> <ul> <li>Cloud Run is <em>serverless</em>. It distracts away all the infrastructure management so you can focus on developing applications.</li> <li>It is built on Knative, an open source K8s based platform. It builds, deploys and manages modern stateless workloads.</li> </ul> <p>Cloud Run give you the choice of running your containers either fully managed or in your own GKE cluster.</p> <p>Cloud Run enables you to run request or event driven stateless workloads without worrying about servers.</p> <ul> <li>It absctracts away all the infrastructure management such as provisioning, configuring, managing those servers so you can focus on just writing code.</li> <li>It is automatically scaling up and down from zero depending upon traffic quickly. You do not need to worry about scaling configuration.</li> <li>Cloud Run only charges you for only the resources that you use calculated down to the nearest 100ms.</li> </ul> <h4 id=\\\"why-cloud-run\\\">Why Cloud Run?</h4> <p>Cloud Run use cases:</p> <ul> <li>Cloud Run enables you to deploy stateless containers that listen for requests or events delivered via HTTP requests.</li> <li>With Cloud Run, you can build your applications in any language using whatever frameworks and tools you wish and deploy them in seconds without having to manage and maintain the server infrastructure.</li> </ul> <h4 id=\\\"cloud-functions\\\">Cloud Functions</h4> <p>Cloud Functions is an event-driven serverless compute service for simple single purpose functions that are attached to events.</p> <ul> <li>In Cloud Functions, you simply upload your code written in JavaScript or Python, or Go and then GCP will automatically deploy the appropriate computing capacity to run that code.</li> <li>These servers are automatically scaled and are deployed from highly available and a fault-tolerant design.</li> <li>You are only charged for the time that your code runs. For each function invocation, memory and CPU use is measured in the 100ms increments.</li> </ul> <p>With Cloud Functions, your code is triggered within a few milliseconds based on events.</p> <ul> <li>For example, a file is uploaded to Google Cloud Storage or a message is received from Cloud Pub/Sub.</li> <li>Cloud Function can also be triggered based on HTTP endpoints that you define and events in the FireBase mobile application backend.</li> </ul> <h4 id=\\\"why-cloud-functions\\\">Why Cloud Functions?</h4> <p>Cloud Functions use cases:</p> <ul> <li>Cloud Functions are usually used as part of a microservices aplication architecture.</li> <li>You can also build serverless application backends:<ul> <li>Mobile and IoT backends</li> <li>Integrate with 3rd party services and APIs</li> </ul> </li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<hr> <h3 id=\\\"fundamental-components-of-k8s-operating-philosophy\\\">Fundamental components of K8s operating philosophy</h3> <p>There are two related concepts you need to understand:</p> <ul> <li>K8s Object Model: each thing K8s manages is represented by an <em>object</em>. You can view and change these objects, attributes and state.</li> <li>Declarative Management: K8s expects you to tell it what you want, the state of objects under each management to be. It will work to bring that state into being and keep it there.</li> </ul> <h4 id=\\\"k8s-object\\\">K8s Object</h4> <p>K8s object is defined as a persistent entity that represents the state of something running in a cluster: its desired state and its current state.</p> <p>Various kinds of objects:</p> <ul> <li>the containerized applications</li> <li>the resources that are available to the applications</li> <li>the policies that affect their behavior</li> </ul> <p>K8s object has two important elements:</p> <ul> <li><strong>Object spec</strong>: You give K8s an object spec for each object you want to create. With this spec, you define the desired state of the object by providing the characteristics that you want.</li> <li><strong>Object status</strong> is simply the current state of the object provided by K8s control plane.<ul> <li>K8s control plane: refers to the various system processes that collaborate to make a K8s cluster work.</li> </ul> </li> </ul> <h4 id=\\\"k8s-object-model\\\">K8s Object Model</h4> <p><strong>Pods</strong> are the basic building block of the standard K8s model, and they are the <em>smallest</em> deployable K8s object.</p> <ul> <li>Every running container and K8s system is <strong>in a pod</strong>.</li> <li>A pod embodies the environment where the containers live.<ul> <li>This environment can accommodate one or more containers.</li> <li>If there is more than one container in a pod, they are tightly coupled and share resources including networking and storage.<ul> <li>K8s assigns each pod <em>a unique IP address</em>. Every container within a pod sahres the network namespace.</li> <li>Containers within the same pod can communicate through the <code>localhost</code>: 127.0.0.1 IP address.</li> <li>A pod can specify a set of storage volumes to be shared among its containers.</li> </ul> </li> </ul> </li> </ul> <p>Example: You want 3 Nginx web servers, each running in its own container, running all the time. How will this be achieve in K8s?</p> <ol> <li>You declare some objects to represent those Nginx containers. What objects? Maybe Pods, <strong>although Pods are not self-healing</strong>.</li> <li>K8s launches these objects and maintains them.</li> </ol> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<hr> <h3 id=\\\"k8s-control-plane\\\">K8s Control Plane</h3> <p>K8s control plane is a set of cooperating processes that make a K8s cluster work.</p> <p>A K8s <strong>cluster</strong> needs computers.</p> <ul> <li>Usually the computers that compose your clusters are VMs.</li> <li>These computers always are in GKE, but they could be physical computers too.</li> </ul> <p>A computer is called the <strong>master</strong> and the others are called simply, <strong>nodes</strong>.</p> <ul> <li>The job of the nodes is to run <strong>pods</strong>.</li> <li>The job of the master is to coordinate the entire cluster.</li> </ul> <p>Several critical K8s components run on the master.</p> <h4 id=\\\"kube-apiserver\\\"><code>kube-APIserver</code></h4> <p>The single component that you interact with directly is the <code>kube-APIserver</code>.</p> <ul> <li>The job of <code>kube-APIserver</code> is to accept commands that view or change the state of the cluster, including launch pods.</li> <li>Any query or change to the cluster state must be addresed to the <code>kube-APIserver</code>, not only <code>kubectl</code> commands.</li> <li><code>kubectl</code> command: connect to <code>kube-APIserver</code> and communicate with it using K8s API.</li> <li><code>kube-APIserver</code> also authenticates incoming requests, determines whether they are authorized, invalid and manages admission contorl.</li> </ul> <h4 id=\\\"etcd\\\"><code>etcd</code></h4> <p><code>etcd</code> is the cluster database.</p> <ul> <li>Its job is to reliably store the state of the cluster.<ul> <li>all the cluster configuration data</li> <li>dynamic information such as what nodes are part of the cluster, what pods should be running, and where they should be running.</li> </ul> </li> <li>You never directly interact with <code>etcd</code>, instead <code>kube-APIserver</code> interacts with <code>etcd</code> database on behalf of the rest of the system.</li> </ul> <h4 id=\\\"kube-scheduler\\\"><code>kube-scheduler</code></h4> <p><code>kube-scheduler</code> is resposible for scheduling pods onto the nodes.</p> <ul> <li><code>kube-scheduler</code> evaluates the requirements of each individual pod and selects which node is most suitable.</li> <li><code>kube-scheduler</code> does not do the actual work to launch pods into nodes.</li> <li>Whenever <code>kube-scheduler</code> discovers a pod object that does not yet have an assignment to a node, it chooses a node and simply write the <em>name</em> of that node into the pod object.</li> </ul> <p>How does <code>kube-scheduler</code> decide where to run a pod?</p> <p><code>kube-scheduler</code> knows the state of all the nodes, and it will also obey constraints that you define on where a pod may run, based on hardware, software and policy.</p> <ul> <li>You can specify that a certain pod is only allowed to run on nodes with a certain amount of memory</li> <li>You can define affinity specs, which cause a group of pods to refer running on the same node.</li> <li>You can define anti-affinity specs, which ensure that pods do not run on the same node.</li> </ul> <h4 id=\\\"kube-controller-manager\\\"><code>kube-controller-manager</code></h4> <p><code>kube-controller-manager</code> continuously monitors the state of a cluster through <code>kube-APIserver</code>. Whenever the current state of the cluster does not match the desired state, <code>kube-controller-manager</code> will attempt to make changes to achieve the desired state.</p> <ul> <li><code>kube-controller-manager</code> is called the controller manager because many K8s objects are maintained by loops of code called <strong>controllers</strong>. These loops of code handle the process of remediation.<ul> <li>You all use certain kinds of K8s controllers to manage workloads. For example, to keep Nginx pods running, we gather them together into a controller object called a <strong>deployment</strong>.</li> <li>There are other controllers like <strong>node controller</strong>. The job of a node controller is to monitoring and respond when a node is offline.</li> </ul> </li> </ul> <h4 id=\\\"kube-cloud-manager\\\"><code>kube-cloud-manager</code></h4> <p><code>kube-cloud-manager</code> manages the controllers that interact with underlying cloud providers.</p> <p>For example, if you manually launch a K8s cluster on GCE, <code>kube-cloud-manager</code> is responsible for bringing in GCP features like load balancers and storage volumes when you need them.</p> <h3 id=\\\"nodes-in-clusters\\\">Nodes in Clusters</h3> <p>Each node runs a small family of control-plane components too.</p> <h4 id=\\\"kubelet\\\">kubelet</h4> <p>Each node runs a kubelet. A kubelet is a K8s agent on each node.</p> <ul> <li>When <code>kube-APIserver</code> wants to start a pod on a node, it connects to the kubelet of that node.</li> <li>kubelet uses the <strong>container runtime</strong> to start the pod and monitor its lifecycle, including readiness and liveness probes, and reports back to <code>kube-APIserver</code>.<ul> <li>Container runtime is the software that knows how to launch a container from a container image.</li> <li>K8s offers several options of container runtimes, the Linux distribution that GKE uses for its nodes launches containers using the container runtime: <strong>container D</strong>, the runtime component of Docker.</li> </ul> </li> </ul> <h4 id=\\\"kube-proxy\\\">kube-proxy</h4> <p>The job of kube-proxy is to maintain network connectivity among the pods in a cluster. It does so using the firewall capabilities of IP tables, which are built into the Linux kernel.</p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>Google Technical infrastructure:</p> <ul> <li>Global-scale technical infrastructure for:<ul> <li>Secure deployment of services</li> <li>Secure storage data</li> <li>Secure communications between services</li> <li>Safe operation by administrators</li> </ul> </li> <li>Internet services, including GCP, built on this infrastrucure</li> </ul> <h2 id=\\\"google-infrastructure-security-layers\\\">Google infrastructure security layers</h2> <pre>\\n        ------------------------\\n       |  Operational Security  |\\n        ------------------------\\n       | Internet Communication |\\n        ------------------------\\n       |    Storage Services    |\\n        ------------------------\\n       |     User Identity      |\\n        ------------------------\\n       |   Service Deployment   |\\n        ------------------------\\n       | Hardware Infrastructure|\\n        ------------------------  \\n</pre> <p>Security is:</p> <ul> <li>Fudamental to Google infrastructure design</li> <li>Designed and built in progressive layers</li> <li>Delivers true defense in depth</li> </ul> <h3 id=\\\"secure-low-level-infrastructure-hardware-infrastructure\\\">Secure low level infrastructure: Hardware Infrastructure</h3> <p>Google designs and builds its own data centers.</p> <ul> <li>It incorporates multiple layers of physical security protection</li> <li>Access to these data centers is limited to a small fraction of Google employees</li> <li>Both server boards and networking equipment in Google data centers are custom-designed by Google</li> <li>It also designs custom integrated circuits including a hardware security chip called <code>Titan</code>, that is currently being deployed on both servers and peripherals</li> </ul> <h3 id=\\\"secure-service-deployment\\\">Secure service deployment</h3> <p>Google infrastructure provides cryptographic privacy and integrity for RPC data on the network.</p> <h4 id=\\\"rpc-remote-procedure-call\\\">RPC: remote procedure call</h4> <p>RPC is a protocol that Google services communicate with each other and allows the infrastructure to automatically lencrypt RPC traffic in transit between data centers.</p> <h3 id=\\\"secure-user-identity\\\">Secure user identity</h3> <p>Google login page goes beyond asking for a simple username and password, it also intelligently challenges the users for additional information based on risk factors.</p> <ul> <li>logged in from the same device or a similar location in the past</li> <li>users can use second factor when signing in:<ul> <li>device based on universal second factor</li> <li>UTF open standard</li> </ul> </li> </ul> <p>To guard against phishing attacks, all Google employees require the sue of UTF compatible security keys.</p> <h3 id=\\\"secure-data-storage\\\">Secure data storage</h3> <p>In Google, all data is encrypted at rest by default. You do not need to enable or configure anything.</p> <p>The default encryption:</p> <ul> <li>leverages Google managed encryption keys</li> <li>supports customer managed encryption keys: you can manage your own encryption keys with the Google Key Management service (KMS) and customer supplied encryption keys where you can provide and manage your own keys</li> </ul> <h3 id=\\\"secure-internet-communication\\\">Secure internet communication</h3> <p>Google externalized services register themselves with an infrastructure service: Google Front End (GFE).</p> <ul> <li>GFE checks incoming network connections for correct certificates and best practices</li> <li>GFE supports strong encryption and amps protection against denial of service attacks or Dos<ul> <li>Behind GFE, Google has multi-tear multi-layer denial of service protection that further reduce the risk of any DoS impact</li> </ul> </li> </ul> <p>GCP customers can take advantage of this type of extra protection by using the Google Cloud Load Balancer.</p> <p>GPC offers customers additional transport encryption options for connecting on-premise resources to the cloud.</p> <ul> <li>Cloud VPN for establishing ipset connections</li> <li>Direct interconnect</li> </ul> <hr> <h2 id=\\\"vpc-network-security-and-monitoring\\\">VPC Network Security and Monitoring</h2> <h3 id=\\\"vpc-virtual-private-cloud\\\">VPC: Virtual Private Cloud</h3> <p>You can logically isolate networks when you define your resources. You can control all network ingress, inbound and egress outbound traffic to any resource all neural network via simple firewall rules.</p> <h3 id=\\\"logging-and-monitoring\\\">Logging and Monitoring</h3> <p>Logging and monitoring enable application analysis, network forensics, access patterns, performance profiling and more.</p> <ul> <li>helps indentify security or operational risks to your organization</li> <li>GCP Stackdriver service: debugging, monitoring, and diagnosticss</li> </ul> <hr> <h2 id=\\\"google-cloud-shared-security-model\\\">Google Cloud Shared Security Model</h2> <p>When you build an application with On-Premise infrastructure, you are responsible for the physical security of the hardware and the premises in which it is housed.</p> <ul> <li>encryption of the data on disk</li> <li>the integrity of your network</li> <li>security of the content stored in your application</li> </ul> <p>When you move to GCP, Google handles many of the lower layers of the overall security stack.</p> <p>The upper layers of the security stack remain the responsibility of the customers. Google provides tools to help customers implement the policies they choose at these layers:</p> <ul> <li>Cloud Identity</li> <li>Access Management</li> <li>Cloud IAM</li> </ul> <p><strong>One aspect of security which is always the responsibility of the customer is DATA ACCESS.</strong></p> <p>You are the one who controls who has access to your data, it must be properly configured.</p> <h3 id=\\\"example\\\">Example</h3> <p>When calling a Google API to retrieve data, API requests are done via a REST service call. To safeguard your information, AuthN information must be included with these requests.</p> <p>It is very common for legal requirements to require a vulnerability assessment or penetration tests, against your Cloud resources.</p> <hr> <h2 id=\\\"threats-mitigation-by-google-and-gcp\\\">Threats Mitigation by Google and GCP</h2> <p>Many of the threats your systems and applications face are automatically mitigated by using Google&#39;s infrastructure.</p> <p>Protecting from large Internet attacks can be very hard and cause huge resource consumption. As a GCP customer, you are protected by default from many kinds of attacks because the scale of Google infrastructure enables you to simply absorb them.</p> <h3 id=\\\"ddos-attacks\\\">DDoS attacks</h3> <p>Denial of service attack is an attempt to make an online service unavailable by overwhelming the service with traffic from multiple sources.</p> <ul> <li>a huge DDoS attach is clocked at strength of around one TB per second</li> <li>the whole of the internet has a bnadwidth of 200 TB per second</li> <li>a Google data center has a bandwidth of 1300 TB per second</li> </ul> <p>In GCP, we have time to isolate the attack and address it. In GCP, customers also benefit directly from central DDoS mitigation service that provides additional multi-tier, multi-layer protection.</p> <ul> <li>DDoS Mitigation service reduces the risk to services running behind GFE by detecting when an attack is taking place and configuring load balances to drop or throttle traffic associated with the attack.</li> <li>There is no additional configuration required -&gt; Google Cloud Load Balancer</li> </ul> <h3 id=\\\"google-cloud-armor\\\">Google Cloud Armor</h3> <p>Cloud Armor works in conjunction with Global HTTP/HTTPs load balancing and enables you to deploy and customize defenses for your internet-facing applications.</p> <hr> <h2 id=\\\"data-access-transparency\\\">Data Access Transparency</h2> <p>When moving your system to the Cloud, a common concern is access transparency, knowing exactly what is happening to your data.</p> <p>GCP customers own their data, not Google.</p> <p>GCP audit logs provide visibility into the actions of your own administrators. This audit trail typically stops once your cloud provider support or engineering team is engaged. For example, if you open a ticket with Google Support, that would require data access. This access would not have been reflected in an audit log.</p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h2 id=\\\"cloud-identity\\\">Cloud Identity</h2> <p>Google Cloud Identity is an identity as a service solution for managing who has appropriate access to your organization resources and services.</p> <p>Google Cloud Identity provides a single-admin console (Google Admin Console), you can manage your users, groups, and domain-wide security settings for your organization in this one place.</p> <ul> <li>Cloud Identity can work with any domain name that is able to receive email -&gt; You can use your existing web and email addresses.</li> <li>Your organization does not need to use G Suite services in order to use Cloud Identity.</li> <li>When you migrate to Cloud Identity, you must verify that you own the domain name and you create an account for each of your users.</li> </ul> <h3 id=\\\"google-admin-console\\\">Google Admin Console</h3> <p>Google Cloud Identity can be</p> <ul> <li>Leveraged as a standalone service for any domain that you own.</li> <li>Combined with your existing G Suite subscriptions In either case, you can manage all users across your entire domain from the <strong>Google Admin Console</strong>.</li> <li>You need to create G Suite licenses for users who require G Suite services.</li> <li>You can create free non-licensed Cloud Identity accounts for managing users who do not need G Suite services.</li> </ul> <p>I you are not using G Suite via domain, you need to register your domain with Cloud Identity and verify you are the owner.</p> <p>Each G Suite or Cloud Identity account is associated with <em>one</em> organization.</p> <p>Organization Administrators have central console of all resources.</p> <p>When creating the organization, the G Suite or Cloud Identity super admin needs to assign the organization administrator (IAM role) to a user or a group.</p> <p>You can manage all of your users by assigning roles to users and groups through the GCP Console, IAM and Admin section.</p> <h3 id=\\\"google-cloud-directory-sync-gcds\\\">Google Cloud Directory Sync (GCDS)</h3> <p>Google Cloud Directory Sync helps simplify provisioning and deprovisioning user accounts.</p> <p>Google Admin Console allows admins to provision/create user accounts manually.</p> <p>Google Cloud Directory Sync tool synchronizes G Suite accounts to match the data in an existing Active Directory or LDAP.</p> <h4 id=\\\"syncing-with-microsoft-active-directory\\\">Syncing with Microsoft Active Directory</h4> <p>How does GCDS work?</p> <ol> <li>Data is exported from your LDAP server or Active Directory.</li> <li>GCDS connects to the Google domain and generates a list of Google users, groups and shared contacts that you specify.</li> <li>GCDS compares these lists and updates your Google domain to match the data.</li> <li>When complete, a report is e-mailed to the addresses specified when configuring GCDS.</li> </ol> <p>GCDS only performs one-way synchronization, <strong>the data in your directory server is never modified or compromised</strong>.</p> <p>GCDS runs as a utility within your server environment, it does not need to run in the Cloud, which means there is no need to access your Active Directory or LDAP server outside of your organization IT perimeter.</p> <p>GCDS automatically provisions and and deprovisions users being added or removed from your Active Directory.</p> <p>If you are already using Microsoft Active Directory on-premises and want that service and configuration to extend to your Google Cloud deployments, you have the option to use Google Managed service for Microsoft Active Directory.</p> <ul> <li>Managed Service for Microsoft Active Directory uses the actual Microsoft Active Directory controller, so your work will nto be interrupted by the need to resolve application incompatibilities.</li> <li>Since it is a Google managed service, Google will take care of most routine maintenance needs.<ul> <li>provides a highly available secure deployment configuration</li> <li>provides automated system patching</li> <li>provides maintenance of appropriate firewall rules</li> </ul> </li> <li>You can choose how your on-premises, Cloud domains and workloads interact. For example, you can run each as a standalone domain or you can connect your Cloud domain with your on-premises domain.</li> <li>It can be integrated with Cloud DNS to allow domain discovery for VMs.</li> </ul> <p>Managed Service for Microsoft Active Directory allows you to create the right architecture for your domain.</p> <p>Factors to consider are:</p> <ul> <li>Alignment with existing security zones:<ul> <li>In Microsoft AD environment, networks are often segmented into several security zones.</li> <li>These security zones are based on interations required to securely run applications and move data between applications.</li> <li>How these security zones are set up outlines the trust boundaries between machines and traffic on your network.<ul> <li>Trust boundaries are another way to contain the impact of a malicious attach.</li> <li>Attacks continue across machines until they hit a traust boundary they cannot cross.</li> </ul> </li> <li>When you plan a deployment to Google Cloud that requires the use of Active Directory, you must choose between two options:<ul> <li>You can extend an existing on-premise security zone into Google Cloud.</li> <li>You can create a new security zone or zones for your Cloud resources.</li> <li>Zero trust model is the preferred networking model for Google Cloud.<ul> <li>Zero trust means that each machine in the network is treated as a separate entity with its own security zone, and all the network and firewall scrutiny that goes along with that assumption.</li> </ul> </li> </ul> </li> </ul> </li> <li>Interaction required between on-premises and Google Cloud resources<ul> <li>categorized: light, moderate and heavy<ul> <li>Light: if you need only an additional set of servers that can accept logins from your organization internal administrators.<ul> <li>You can create two separate AD forests that do not shared a trust relatioship, but they require duplicating information on the cloud forest, which would result in any duplicated data out of sync.</li> <li>To resolve the issue of the out-of-sync duplicated data, you can create two separate AD forests, maintaining duplicate records on each side, allow them to communicate with <strong>Cross Forest trust</strong>.</li> </ul> </li> <li>Moderate: if your internal administrators need to access file shares or your applications require the ability to authenticate and communicate across trust boundaries.<ul> <li>Similar to Light interaction, creating AD forests with Cross Forest trust is recommended.</li> </ul> </li> <li>Heavy: if you require virtual desktop infrastructure environment.<ul> <li>Virtual desktop infra environment requires a constant flow of information between on-premises resources and resources deployed on Google Cloud.</li> <li>Use a <strong>single</strong> AD forest and sharing it across environments.</li> </ul> </li> </ul> </li> </ul> </li> <li>Resource availability requirements<ul> <li>how your proposed architecture affects resource availability.</li> <li>In an AD forest, the domain controller serves as an identity provider for users in that domain.</li> <li>Interacting with multiple domain controllers can result in corresponding decrease in the resource availability.</li> </ul> </li> </ul> <h3 id=\\\"google-authentication-vs-saml-based-sso\\\">Google Authentication vs. SAML-based SSO</h3> <p>There are two types of AuthN supported by GCP, two primary ways to handle Google user account authN.</p> <ul> <li>Google AuthN</li> <li>SAML-based SSO (single sign-on) These two authN mechanisms are <strong>mutually exclusive</strong>.</li> <li>They cannot be combined except within super admin accounts.</li> <li>Google AuthN is primary mechanism for signing in to GCP.<ul> <li>a Google password is stored within Google infrastructure</li> <li>you can specify the min and max number of characters within guidelines and monitor the length and relative strength of your users passwords.</li> </ul> </li> <li>Google supports SAML (an OpenID complaint SSO system).<ul> <li>Google operates as a service provider and your SSO system operates as an identity provider.</li> <li>You can use your own authN mechanism and manage your own credentials.</li> </ul> </li> </ul> <h3 id=\\\"authentication-best-practice\\\">Authentication best practice</h3> <p>You should avoid managing permissions fro individual users.</p> <ul> <li>operational overhead</li> <li>better to assign Google Cloud roles to groups and let the G Suite Cloud Identity admins handle group membership</li> <li>for high-risk areas, you want to make an exception to this practice, and assign roles to individuals directly</li> </ul> <p>You should have at least two organizational admins.</p> <p>When the organization is created, all users in your domain are automatically granted project creator and billing account creator IAM roles at the organization level.</p> <ul> <li>This enables users in your domain to continue creating projects without disruptions.</li> <li>Organizational admins should remove these organizational level permissions and start locking down access at finer granularity ASAP.</li> </ul> <p>Your organization account can have multiple domains. When you sign up for a Cloud Identity domain, the first domain name becomes the primary domain for your organization.</p> \";\n// Exports\nmodule.exports = code;","// Imports\nvar ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ = require(\"../../../../../node_modules/html-loader/dist/runtime/getUrl.js\");\nvar ___HTML_LOADER_IMPORT_0___ = require(\"./iam-1.jpg\");\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar code = \"<hr> <h2 id=\\\"iam-overview\\\">IAM Overview</h2> <p>IAM (Identity and Access Management) allows administrators <em>authorize</em> who can take action on specific resources.</p> <ul> <li>giving the administrator fully control and visibility to manage their cloud resources centrally</li> <li>centrally manage your projects, folders and organizations</li> <li>centrally manage IAM roles and policies (including custom roles and IAM labels)</li> </ul> <h2 id=\\\"gcp-resource-manager\\\">GCP Resource Manager</h2> <h3 id=\\\"gcp-resource-manager-overview\\\">GCP Resource Manager overview</h3> <p>IAM administrates and authorizes who can do what on which resources in GCP.</p> <ul> <li>GCP provides resource containers: organization, folder, project, which allow you to group and hierarchically organize Cloud resources.</li> <li>Resource manager enables you programmatically manage these resource containers.</li> </ul> <h3 id=\\\"gcp-resource-manager-objects\\\">GCP Resource Manager Objects</h3> <ul> <li>GCP resource manager objects are the various resources members can access and use on GCP.</li> <li>GCP resource manager objects hold data and applications and also help to organize it and secure it.</li> </ul> <p>Resource manager objects include:</p> <ul> <li>organization</li> <li>folder</li> <li>project</li> <li>resource</li> <li>member</li> <li>role<img style=\\\"width:80%\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\"> </li> </ul> <p>The GCP resource hierarchy allows you to map your organization onto your approporiate GCP objects and presents logical attach points for access management policies.</p> <ul> <li>the organization node is the root node for Google Cloud resource hierarchy.<ul> <li>it is a super node for all of your projects and resources</li> <li>it represents your organization</li> </ul> </li> <li>the folders can be used to implement organization structure and group projects by department, team, application, or environment.<ul> <li>a folder can contain projects, other folders, or a combination of both.</li> <li>organization can use folders to group proejcts under the organization node in a hierarchy.</li> <li>for example, your organization contains multiple departments, each with its own set of GCP resources. Folders allow you to group these resources.</li> <li>each folder or resource can only have exactly <strong>ONE</strong> parent.</li> <li>folders are used to group resources that share common IAM policies.</li> <li>the use of folders to organize resources is optional</li> </ul> </li> <li>the projects are <strong>required</strong> in GCP.<ul> <li>any resource deployed must be associated with a project.</li> <li>projects provide many management related features:<ul> <li>the ability to track resources</li> <li>quota usage</li> <li>assign projects to different billing accounts</li> <li>assign manager permissions and credentials</li> <li>selectively enable specific services and APIs at the project level</li> </ul> </li> </ul> </li> </ul> <h3 id=\\\"resource-manager-accounts\\\">Resource Manager Accounts</h3> <h4 id=\\\"member-roles\\\">Member roles</h4> <p>A role is a collection of permissions.</p> <ul> <li>You cannot assign a permission to a user directly.</li> <li>You grant the users a <strong>role</strong>.</li> <li>Members can be expressed as individual users, groups, domains or even the public as a whole.</li> <li>You can assign Cloud IAM roles to a new member using Cloud IAM policies.</li> </ul> <h4 id=\\\"service-accounts\\\">Service Accounts</h4> <p>You can also grant roles to service accounts:</p> <ul> <li>Service accounts control server-to-server interactions and are used to authenticate from one service to another.</li> <li>The roles granted to the service accounts control what actions application running under a service account can perform.</li> </ul> <p>For example, if an application running on a GCE instance needs to read a file from Cloud Storage, a service account with Cloud Storage object fro your role can be assigned to the GCE instance. An application running on that instance would then be permitted to read a file from Cloud Storage.</p> <p>Serivce accounts are identified with a Google-managed email address in the <code>gserviceaccount.com</code> domain.</p> <p>By default, when using service accounts within GCP (e.g., from GCE or GAE), Google automatically manages the keys for the service accounts. The GCP managed keys are rotated approximately once a week. &lt;- Google-managed keys</p> <p>It is also possible to use service accounts outside of GCP by manually creating and managing service account keys by yourself. &lt;- customer-managed keys</p> <h2 id=\\\"iam-labels\\\">IAM Labels</h2> <p>IAM Labels are created in the form of a <em>key-value</em> pair, used to help you organize and manage your cloud resources.</p> <ul> <li>used to distinguish between resources owned by different teams for budgeting or billing purposes</li> <li>used to label and categorize different components of a large distributed application<ul> <li>front-end component</li> <li>dashboard component</li> </ul> </li> <li>used to show which systems in your network are for production use and which are for testing environment</li> <li>used to indicate the state of an instance of a resource (e.g., if the instance is in the active or archived state)</li> <li>used to distinguish between VMs</li> </ul> <h3 id=\\\"label-requirements\\\">Label requirements</h3> <p>Requirements for label names and values:</p> <ul> <li>No more than 64 labels per resource</li> <li>Must be in the form of a key-value pair</li> <li>Keys cannot be empty and must be between 1-63 characters</li> <li>Values may be empty but cannot exceed 63 characters</li> <li>Keys and values can contain only lowercase letters, numeric characters, underscores and dashes</li> <li>The key portion of a label must be unique. However you can use the same key with multiple resources.</li> <li>Keys must start with a lowercase letter or international character</li> </ul> <p>Make sure you do not include sensitive data in your label names or values.</p> <h2 id=\\\"iam-roles\\\">IAM Roles</h2> <p>In GCP, you can grant permissions by granting roles.</p> <h3 id=\\\"types-of-iam-roles\\\">Types of IAM roles</h3> <ul> <li>Primitive roles<ul> <li>Primitive roles exist prior the introduction of IAM.</li> <li>Primitive roles are applied at the project or service resource levels and control access to all resource in that project or resource.</li> <li>Primitive roles control what can be done on ALL resources in a project.</li> <li>Three primitive roles: <em>Owner</em>, <em>Editor</em> and <em>Viewer</em>.</li> </ul> </li> <li>Predefined roles/Curated roles<ul> <li>Predefined roles are the IAM roles that give finer grained access control than the primitive roles.</li> <li>Each GCP service offers a set of predefined roles.</li> <li>Predefined roles are designed to map to job functions, for example, Compute Network Admin, Security Reviewer, Storage Admin, etc.</li> <li>Predefined roles are managed by GCP.</li> </ul> </li> <li>Custom roles<ul> <li>You can define roles consisting of permissions and resources of your choice.</li> </ul> </li> </ul> <h2 id=\\\"iam-policies\\\">IAM Policies</h2> <p>A Cloud IAM policy is used to specify access control policies for your cloud resources.</p> <h3 id=\\\"definitions\\\">Definitions</h3> <p>A policy is a collection of access statements attached to your resource.</p> <ul> <li>A policy consists of a list of bindings.</li> <li>A binding binds a list of members to a role where the members can be:<ul> <li>user accounts</li> <li>Google group</li> <li>Google domain</li> <li>service accounts</li> </ul> </li> <li>A role is a named list of permissions defined by Cloud IAM.</li> </ul> <p>Each policy contains a set of roles and role members with resources inheriting policies from their parent.</p> <ul> <li>resource policy is a union of parent and resources where a less restrictive parent policy will always override a more restrictive resource policy.</li> </ul> <h3 id=\\\"orgnization-policies\\\">Orgnization policies</h3> <p>An organization policy is a configuration of restrictions, defined by configuring a constraint with desired restrictions. It is applied to the organization node and all of its folders and projects.</p> <ul> <li>A constraint is a type of restriction against the GCP service or list of GCP services.</li> <li>A constraint can be thought of as a blueprint that defines which behaviors are controlled.<ul> <li>disable VM serial port access</li> <li>disable service account creation</li> <li>disable VM nested virtualization</li> <li>define trusted image projects</li> </ul> </li> </ul> <h2 id=\\\"iam-recommender\\\">IAM recommender</h2> <p>IAM recommender helps you enforce the principle of least privilege by ensuring that members have only the permissions that they actually need.</p> <ul> <li>IAM recommender evaluates only role grants that were made at the <strong>project</strong> level and existed for at least 90 days.</li> <li>IAM recommender does NOT evaluate:<ul> <li>conditional role grants</li> <li>role grants for Google managed service accounts</li> <li>access controls that are separate from Cloud IAM</li> </ul> </li> </ul> <h3 id=\\\"recommendations\\\">Recommendations</h3> <ul> <li>IAM recommender will suggest you to revoke a role/permission not used within the last 90 days.</li> <li>IAM recommender will suggest you to place a particular role with another role or set of roles. For example: if a service account has an assigned role with permissions are not used, it would be more secure if you revise it to use a combination of less permissive roles that have only the necessary permissions.</li> <li>IAM recommender will suggest you to add permissions to a role even if these permissions are not currently being used. IAM recommender uses ML to predict when permissions might be needed by a particular role in the future.</li> </ul> <h2 id=\\\"iam-audit-logs\\\">IAM Audit Logs</h2> <p>IAM audit logs help you answer the questions to <strong>who did what, where, and when</strong> within your Cloud resources.</p> <ul> <li>Audit logs are encrypted at rest using either AES-256 or AES-128.</li> </ul> <h3 id=\\\"admin-activity-audit-logs\\\">Admin activity audit logs</h3> <ul> <li>Admin activity audit logs contain logs for administrative actions that modify the configuration or metadata on your resources.</li> <li>Admin activity audit logs CANNOT be disabled.</li> <li>You need to have Cloud IAM logging/logs viewer or Project viewer role to view Admin Activity audit logs.</li> </ul> <h3 id=\\\"data-access-audit-logs\\\">Data access audit logs</h3> <ul> <li>Data access audit logs record when an API call reads the configuration or metadata of a resource.</li> <li>Data access audit logs record when a user-driven API makes calls that create, modify or read user-provided resource data.</li> <li>Data access audit logs can be disabled or enabled from GCP console (disabled by default).</li> <li>Data access audit logs do NOT record data access operations on resources that are <em>publicly</em> shared.</li> </ul> <h3 id=\\\"system-event-audit-logs\\\">System event audit logs</h3> <ul> <li>System event audit logs contain logs for Cloud administrative actions that modify the configuration of resources.</li> <li>System event audit logs are not driven by direct user action, they are generated by Goolge systems.</li> <li>System event audit logs CANNOT be disabled.</li> </ul> <h2 id=\\\"iam-best-practices\\\">IAM Best Practices</h2> <ul> <li>Always apply the minimal access level required to get the job done.</li> <li>When creating policies, remember that a less restrictive parent policy will ALWAYS override a more restrictive resource policy. So check when implementing parent policies to make sure you do not inadvertently grant more access to a child resource than you intended.<ul> <li>If someone is a project editor, you cannot restrict his access to a specific resource with that project.</li> </ul> </li> <li>It is best to use groups when configuring GCP access, assign roles to the groups instead of individual users.</li> <li>Try to utilize predefined roles if they meet your requirements as predefined roles offer less administration.</li> </ul> \";\n// Exports\nmodule.exports = code;","module.exports = __webpack_public_path__ + \"static/media/iam-1.ebc1d320.jpg\";","// Imports\nvar ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ = require(\"../../../../../node_modules/html-loader/dist/runtime/getUrl.js\");\nvar ___HTML_LOADER_IMPORT_0___ = require(\"./vpc-1.jpg\");\nvar ___HTML_LOADER_IMPORT_1___ = require(\"./vpc-2.jpg\");\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \"<hr> <h2 id=\\\"vpc-overview\\\">VPC Overview</h2> <p>Managing networking on GCP utilizes a virtual private cloud (VPC).</p> <h3 id=\\\"what-is-vpc\\\">What is VPC?</h3> <p>VPC is a global private isolated Virtual Network. VPC network on GCP allows you to create and control your own private logically isolated network.</p> <ul> <li>On this network, you can deploy your own Google compute resources.<ul> <li>GCE instances, GKE intsances, etc.</li> </ul> </li> <li>Each VPC network in your project provides private communication between your GCP compute resources.</li> </ul> <h2 id=\\\"vpc-firewall\\\">VPC Firewall</h2> <ul> <li>You can control individual incoming and outgoing traffic for compute resources using <em>firewall rules</em>.</li> <li>You can connect your own premise network with your VPC network using either at IPsec VPN tunnel or a dedicated interconnect.<ul> <li>IPsec VPN tunnel: an Internet Protocol security tunnel is a set of standards and protocols to support secure communication as packets of information are transported from an IP address across network boundaries and vice versa.<ul> <li>an IPsec tunnel allows for the implementation of a VPN which an enterprise may use to securely extend its reach beyond its own network to customers, partners and suppliers.</li> <li>IPsec tunnel vs. SSL/TSL:<ul> <li>IPsec tunnel provides the most robust cryptographic security: IPsec tunnel encrypts the entire packet of data so fully that no entity can see the source of the data, the data endpoint or the data origination point.</li> <li>SSL/TSL does not have this type of encryption.</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>GCP firewall rules enable you to allow or deny traffic communication with your VM instances based on a configuration you specify.</p> <ul> <li>The rules can be applied both ingress and egress traffic.</li> </ul> <p>GCP firewall rules provide enough active network protection and traffic control <strong>regardless of the OS your instances use</strong>.</p> <p>GCP firewall rules are defined on the VPC as a whole. Since VPC networks can be global in GCP, the firewall rules are also <strong>global</strong>.</p> <ul> <li>Every VPC network functions as a distributed firewall.</li> <li>Firewall rules are defined at a network level, but connections are allowed or denied <em>on a per instance basis</em>. In other words, your firewall rules exist not only between your instances and other networks, but also between individual instances within the same network.</li> </ul> <h3 id=\\\"ways-to-apply-firewall-rules\\\">Ways to apply firewall rules</h3> <p>You can apply the firewall rules to all instances in the network meaning that the defined rules apply to every instance running in that VPC network without tags or marks to the incidence in any way.</p> <p>You can apply rules to instances that are referenced with a tag/name. This requires the instance bound to the firewall rule to be labeled with the firewall rule <em>target tag</em>.</p> <p>You can apply rules based on the service accounts meaning the rules are applied to both new and existing instances that are associated with a service account.</p> <ul> <li>Note: changing the service account associated with an instance requires you to <em>stop and reboot</em> the instance for that change to take effect.</li> </ul> <p>GCP firewall rules are <strong>STATEFUL</strong>. For each initiated connection that is tracked by allow rules in one direction, the return traffic is automatically allowed regardless of any other rule in place. <strong>Firewall rules allow bidirectional communications.</strong></p> <h3 id=\\\"firewall-rule-settings\\\">Firewall Rule Settings</h3> <table> <th>Parameter</th> <th>Details</th> <tr> <td>direction</td> <td>ingress or egress (incoming or outgoing)</td> </tr> <tr> <td>source</td> <td>only applicable to ingress rules, can be IP address or range, a source tag or a source service account</td> </tr> <tr> <td>destination</td> <td>only applicable to egress rules</td> </tr> <tr> <td>protocol and port</td> <td>rules can be restricted to apply to specific protocols (e.g., TCP or UDP) only or combinations of protocols and ports only</td> </tr> <tr> <td>action</td> <td>allow or deny</td> </tr> <tr> <td>priority</td> <td>0-65535, the order in which rules are evaluated, the first matching rule is applied</td> </tr> </table> <h3 id=\\\"vpc-firewall-defaults\\\">VPC Firewall Defaults</h3> <p>All VPCs have 2 implied firewall rules:</p> <ul> <li>Allow all outgoing traffic to any IP address:<ul> <li>action is <em>allow</em></li> <li>destination is <em>0.0.0.0/0</em></li> <li>lowest priority: 65535</li> </ul> </li> <li>Block all incoming traffic:<ul> <li>action is <em>deny</em></li> <li>source is <em>0.0.0.0/0</em></li> <li>lowest priority: 65535</li> </ul> </li> </ul> <p>In GCP, all projects get a default VPC created automatically. In additional to the implied rules above and auto-generated VPC, the network is pre-populated with follow rules that allow incoming traffic to instances:</p> <ul> <li><strong><code>default-allow-internal</code></strong> enables incoming connections within the VPC network for all protocols and ports <em>between instances</em>. In other words, the rule permits inbound connections between VM instances in the same network.</li> <li><strong><code>default-allow-ssh</code></strong> allows port 22, secure shell, or SSH</li> <li><strong><code>default-allow-rdp</code></strong> allows port 3389, Remote Desktop Protocol (RDP)</li> <li><strong><code>default-allow-icmp</code></strong> allows ICMP traffic from any source IP to any destination instance within the VPC network.</li> </ul> <h3 id=\\\"vpc-firewall-best-practices\\\">VPC Firewall Best Practices</h3> <p>There is some network traffic that is always blocked on VPC networks. This traffic cannot be unblocked with firewall rules. The traffic that is always blocked is all GRE traffic, <em>unless explicitly allowed through protocol forwarding</em>.</p> <table> <th>Blocked Traffic</th> <th>Applies to</th> <tr> <td>GRE traffic</td> <td>all sources, all destinations, including among instances using internal IP addresses, unless explicitly allowed through <i>protocol forwarding</i></td> </tr> <tr> <td>Protocal other than TCP, UDP, ICMP and IPIP</td> <td> Traffic between: <ul> <li>instances and the internet</li> <li>instances if they are addressed with external IP addresses</li> <li>instances if a load balancer with an external IP address is involved</li> </ul> </td> </tr> <tr> <td>Egress traffic on TCP port 25 (SMTP)</td> <td> Traffic from: <ul> <li>instances to the internet</li> <li>instances to other instances addressed by external IP addresses</li> </ul> </td> </tr> <tr> <td>Egress traffic on TCP port 465 or 587 (SMTP over SSL/TLS)</td> <td> Traffic from: <ul> <li>instances to the internet, except for traffic destined for know Google SMTP servers</li> <li>instances to other instances addressed by external IP addresses</li> </ul> </td> </tr> </table> <h4 id=\\\"best-practices-to-secure-instances-running-in-gce\\\">Best practices to secure instances running in GCE</h4> <ol> <li>Keep your firewall rule inline with the model of least privilege, create rules to explicitly allow only the traffic necessary for your applications to communicate.</li> <li>Minimize direct exposure tot the internet. Avoid having firewall rules defined within the source or destination range set to <strong>0.0.0.0/0</strong>.</li> <li>Prevent port and protocols from being exposed accidentally. Create a firewall rule with the lowest priority that blocks all outbound traffic for all protocols and ports.<ul> <li>This rule will override the implied egress rule that allows all outbound traffic, thereby will lock down your GCE instance from making connections.</li> <li>Then you can create higher priority firewall rules to specify GCE instances to open required ports and protocols.</li> </ul> </li> <li>Adopt a standard naming convention for firewall rules. For example, <code>{direction}-{allow/deny}-{service}-{to-from-location}</code>.</li> </ol> <ul> <li><code>ingress-allow-ssh-from-onprem</code></li> <li><code>egress-allow-all-to-gcevms</code></li> </ul> <ol start=\\\"5\\\"> <li>Consider service account firewall rules instead of tag-based rules. The reason for this is that tag-based firewall rules can be applied by any user who has GCE instance admin role, but a service account requires a user to have explicit Cloud IM rights to be used.</li> </ol> <p>To create a network with auto subnets in GCP:</p> <pre>\\ngcloud compute networks create my_network --subnet-mode=auto\\n</pre> <p>Note: when an auto mode VPC network is created, one subnet from each region is automatically created within it. The automatically created subnets use a set of predefined IP ranges that fit within the 10.128.0.0/9 CIDR block.</p> <p>To create the network with custom subnets, you can choose any private RFC 1918 CIDR block for the primary IP address range of the subnets.</p> <pre>\\ngcloud compute networks create private_net --subnet-mode=custom\\n</pre> <p>To create a custom subnet in the private_net network:</p> <pre>\\ngcloud compute networks subnets create private_subnet \\\\\\n    --network=private_net --region=us-central1 \\\\\\n    --range=10.0.0.0/24 --enable-private-ip-google-access\\n</pre> <p>To add a firewall rule that allows port 22 (SSH) traffic from the Cloud Shell IP address, run the following command:</p> <pre>\\nip=$(curl -s https://api.ipify.org)\\ngcloud compute firewall-rules create \\\\\\n    mynetwork-ingress-allow-ssh-from-cs \\\\\\n    --network mynetwork --action ALLOW --direction INGRESS \\\\\\n    --rules tcp:22 --source-ranges $ip --target-tags=lab-ssh\\n</pre> <p>To apply this firewall rule to certain instances in the network, add <code>lab-ssh</code> tag to the instances:</p> <pre>\\ngcloud compute instances add-tags mynet-eu-vm \\\\\\n    --zone europe-west1-b \\\\\\n    --tags lab-ssh\\ngcloud compute instances add-tags mynet-us-vm \\\\\\n    --zone us-central1-a \\\\\\n    --tags lab-ssh\\n</pre> <p>To add a firewall rule that allows ALL instances in the mynetwork VPC to ping each other, run the following command:</p> <pre>\\ngcloud compute firewall-rules create \\\\\\n    mynetwork-ingress-allow-icmp-internal --network \\\\\\n    mynetwork --action ALLOW --direction INGRESS --rules icmp \\\\\\n    --source-ranges 10.128.0.0/9\\n</pre> <h3 id=\\\"load-balancing-and-ssl-policies\\\">Load Balancing and SSL Policies</h3> <p>GCP load balancer supports HTTPs and SSL/TSL proxies for encryption in transit.</p> <img style=\\\"width:80%\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\"> <ul> <li>These load balancers require at least one signed SSL certificate installed on the target HTTPs proxy for the load balancer.<ul> <li>You can use Google-managed or self-managed SSL certificates.</li> <li>Client SSL session will terminate at the load balancer.</li> <li>Google Cloud load balancer terminates user SSL connections at the load balancing layer, then balances the connections across instance using the SSL or TCP protocols.</li> </ul> </li> </ul> <p>Cloud SSL proxy is intended for <em>non HTTPs traffic</em>. For HTTPs traffic, HTTPs load balancing is recommended.</p> <h4 id=\\\"ssl-policies\\\">SSL policies</h4> <p>SSL policy gives you the ability to control the features of SSL that your SSL proxy or HTTPs load balacner negotiates with the clients.</p> <ul> <li>a SSL policy specifies a minimum TLS version and a profile.<ul> <li>a profile selects a set of SSL features to be enabled in the load balancer.</li> <li>there are 3 preconfigured Google managed profiles that allow you to specify the level of compatability appropriate for your application.</li> </ul> </li> </ul> <p>Preconfigured SSL policy profiles:</p> <ul> <li>Compatible: allows the broadest set of clients including the ones that support out-to-date SSL features.</li> <li>Modern: supports a wide set of SSL features allowing modern clients to negotiate SSL.</li> <li>Restricted: supports a reduced set of SSL features, intended to meet stricter compliance requirements.</li> </ul> <p>You can also create custom SSL policy profiles. These profiles allow SSL features to be individually specified.</p> <h3 id=\\\"interconnect-and-vpc-peering-options\\\">Interconnect and VPC peering options</h3> <p>VPC peering allows you to create connectivity across two non-overlapping VPC networks.</p> <ul> <li>VPC peering enables the resources in these networks to communicate across private RFC 1918 space, reducing exposure to attacks.</li> <li>Peer networks do <em>NOT</em> need to be in the same project or even the same organization.</li> <li>The network firewall rules and routes are independently managed by the project in which each VPC belongs to.<ul> <li>These network firewall rules are not imported across the peered networks.</li> <li>To control traffic, you need to configure rules in each of the peered VPCs to marshal communication between them.</li> </ul> </li> <li>Currently a network can have up to 25 directly peered VPC networks. These networks can be connected in a series or hub-spoke style topology, as long as subnets do <em>NOT</em> overlap.</li> </ul> <p>VPC network peering does not provide granular root controls to filter out which subnet sliders are reachable across paired networks. In order to achieve this, you must use firewall rules to filter traffic.</p> <p>Once networks have peered, every internal private IP is accessible across the peered networks.</p> <p>VPC network peering gives you several advantages over using external IP addressed or VPNs to connect to the networks:</p> <ul> <li>decrease network latency: networking public IPs suffers from higher latency than private networking.</li> <li>increase network security: service owners do not need to have their services exposed to the public internet and deal with its associated risks.</li> <li>lower network costs: GCP charges egress bandwidth pricing for networks using external IPs to communicate even if the traffic is within the same zone. However if the networks appears that they can use the internal IPs to communicate and save on those egress costs.</li> </ul> <h4 id=\\\"shared-vpcs\\\">Shared VPCs</h4> <ul> <li>Allows an organization to connect resources for multiple projects to a common VPC network so that they can communicate with each other securely and effectively using <strong>internal IPs</strong>.</li> <li>When you use a shared VPC, you designate a project as <strong>a host project</strong>, and attach one or more service projects to it. The VPC networks in the host project are called shared VPC networks.</li> </ul> <img style=\\\"width:80%\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\"> <p>Shared VPCs are used to connect projects within the SAME organization. Participating host projects and service projects cannot belong to different organizations.</p> <h4 id=\\\"how-to-connect-to-cloud-vpc-network-from-your-on-prem-network\\\">How to connect to cloud VPC network from your on-prem network</h4> <p>Some organizations may want to securely extend their data center network (on-prem network) into GCP projects. You can accomplish this through either a Google Cloud VPN or Google Cloud Interconnect.</p> <h5 id=\\\"cloud-interconnect\\\">Cloud Interconnect</h5> <p>Two options for connecting on-premise networks to GCP:</p> <ul> <li>Dedicated interconnect<ul> <li>A dedicated intterconnect provides a direct physical connection between your on-premise network and your GCP VPC networks.</li> <li>Dedicated interconnect has a min. badwidth of 10GB per second. (FAST)</li> <li>Dedicated interconnect requires routing equipment in a colocation facility that supports the GCP regions that you will want to connect to. All traffic flows directly between your on-premise network and GCP VPC network. Nothing is traveling on the public internet.</li> </ul> </li> <li>Partner interconnect<ul> <li>Partner interconnect provides connectivity between your on-premise network and GCP VPC networks through a supported service provider.</li> <li>Partner interconnect has bandwidth with 50MB per second. (SLOW)</li> <li>Partner interconnect connects to a variety of service providers to reach your VPC network. All traffic flows through a service provider&#39;s network and nothing is traveling on the public internet.</li> </ul> </li> </ul> <p>Both of the above have low latency, highly available and dedicated connections to enable you to reliably transfer data between your on-premise and VPC networks.</p> <h3 id=\\\"vpc-network-best-practices\\\">VPC Network Best Practices</h3> <ol> <li>Always create a new network with the regions, IP address ranges and follow rules that your orgnization needs. <em>Delete the default network so it is not accidentally used.</em></li> <li>Place GCE resources that require network communication on the same VPC network.</li> <li>Think about creating separate subnets within a network for each tier of an application.<ul> <li>For example, the web frontend, service layer, or database backend.</li> </ul> </li> <li>Use a Cloud load balancer with SSL policies in front of web servers. Place a load balancer in front of an old web service provides many benefits including:<ul> <li>providing Global Anycast IP address and built-in DDoS protection and mitigation.</li> <li>using SSL policies allows you to control the SSL encryption used for the encryption in transit.</li> </ul> </li> <li>Private Google API access enables GCE instances on a VPC subnet to reach Google APIs and services using an internal IP address rather than an external IP address.</li> </ol> <h3 id=\\\"vpc-service-controls\\\">VPC Service Controls</h3> <p>VPC Service Controls improve your ability to reduce the risk of data exfiltration from your Google-managed services like Cloud Storage and BigQuery.</p> <ul> <li>Data exfiltration: a form of security breach that occurs when data is copied, transferred or retrieved from a computer or server without authorization.</li> <li>VPC Service Controls create security perimeters around your Google-managed resources and allow you to control the movement of data across that perimeter.<ul> <li>VPC Service Controls protect resources within a perimeter so that they can only be privately accessed from clients within authorized VPC networks using private Google access with either Google Cloud or on-premises.</li> </ul> </li> </ul> \";\n// Exports\nmodule.exports = code;","module.exports = __webpack_public_path__ + \"static/media/vpc-1.02c7d439.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vpc-2.d644e78b.jpg\";","// Module\nvar code = \"<h1 id=\\\"typescript-is-\\\">TypeScript Is ...</h1> <ul> <li>A programming language, a compiler and a language server<ul> <li>Language server: serves autocompletes in VS code</li> </ul> </li> <li>A syntactic superset of JavaScript<ul> <li>It builds on top of the existing JavaScript syntax</li> </ul> </li> <li>The core of the best JS environment available today</li> <li>&quot;A fancy linter&quot; and a fantastic static analysis tool<ul> <li>Type checking</li> <li>Make sure you are following through the garuantees you intend to make</li> </ul> </li> </ul> <h1 id=\\\"what-problems-does-ts-help-solve\\\">What problems does TS help solve?</h1> <ul> <li>Duck typed languages start to hurt more as codebases get large<ul> <li>hard to keep contracts between modules under control</li> </ul> </li> <li>Informal contracts grow organically, formal ones grow deliberately</li> <li>JS authoring environments are worlds behind the UX of &quot;modern IDEs&quot;</li> <li>Too many JS errors are discovered at <em>runtime</em>.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h2 id=\\\"latest-javascript-features\\\">Latest JavaScript Features</h2> <h3 id=\\\"optional-chaining\\\">Optional Chaining</h3> <pre>\\n// Example:\\nlet x: {\\n    user: {    \\n        name: string;\\n        address?: {\\n            street: string;\\n            city: string;\\n        };\\n    }\\n} = undefined as any;\\n\\n// Optional Chaining\\n// \\\"?\\\" adds a condition to the following code:\\n// If x.user.address exists, log the city\\n// otherwise, log undefined\\nconsole.log(x.user.address?.city);\\n</pre> <h3 id=\\\"nullish-coalescing\\\">Nullish Coalescing</h3> <pre>\\nclass Foo {\\n    #name: string;\\n    // `constructor(public name?: string)` is a shorthand\\n    // for having a class member field `name`.\\n    constructor(rawName?: string) {\\n        // Nullish coalescing: `??`\\n        // If the `rawName` is *null* or *undefined*, fall back to the value 'no name'.\\n        // IMPORTANT: `??` is different from `||`\\n        // If we use `||` here, we will run into surprises of falsy values\\n        // (e.g., empty strings or 0's, they are not Nullish).\\n        this.#name = rawName ?? 'no name';\\n    }\\n\\n    log() {\\n        console.log(this.#name);\\n    }\\n}\\n<pre>\\n\\n### Private Fields\\n`\\\\#some_variable` vs `private some_variable`\\n* `private some_variable`: when someone sets a debugging breakpoint within the class, they can still see `some_variable` as a memeber field of this class.\\n* `\\\\#some_variable`: when some sets a debugging breakpoint within the class, they *cannot* see `\\\\#some_variable`.\\n* Prefixing a member variable with `\\\\#` turns the member variable *truly* private.\\n* Child classes will not have access or know this member variable, it is not inherited.\\n\\n## Latest TypeScript Features\\n\\n### Inference Class Field Types\\nTypes for class fields that are assigned in constructor are inferred, and no longer need an explicit type declaration.\\n\\n### Tuple Types\\n<pre>\\ntype Foo<T extends any[]> = [boolean, ...T, boolean];\\n</T></pre>\\n\\n<h4 id=\\\"labeled-tuple-types\\\">Labeled Tuple Types</h4>\\n<pre>\\ntype Address = [\\n    streetNumber: number,\\n    city: string,\\n    state: string,\\n    postalCode: number,\\n];\\n\\nfunction printAddress(...address: Address) {\\n    // ...\\n}\\n</pre>\\n<ul>\\n<li>The IDE displays the labeled types, it makes the function signature much easier to understand.</li>\\n<li>If you are serializing data (e.g., getting API responses), this saves a lot of space.<ul>\\n<li>Imagine you are getting 50KB of JSON data from an API call. The tuple representation is a more compact way to represent the same data than an object.</li>\\n</ul>\\n</li>\\n</ul>\\n<h3 id=\\\"type-aliases-and-interfaces\\\">Type Aliases and Interfaces</h3>\\n<pre>\\n// Old way of defining a JSON array\\ntype JSONValue = string|number|boolean|null|JSONArray|JSONObject;\\ninterface JSONObject = {\\n    [k: string]: JSONValue;\\n}\\ninterface JSONArray extends Array<JSONValue> {}\\n</JSONValue></pre>\\n<h4 id=\\\"recursive-type-aliases\\\">Recursive Type Aliases</h4>\\n<pre>\\ntype JSONValue =\\n    | string\\n    | number\\n    | boolean\\n    | null\\n    | JSONValue[]\\n    | {\\\\[k: string\\\\]: JSONValue;};\\n</pre>\\n\\n<h3 id=\\\"template-typed-literals\\\">Template Typed Literals</h3>\\n<pre>\\ntype Corner = \\\\`${\\\\\\\\\\\"top\\\\\\\\\\\" | \\\\\\\\\\\"bottom\\\\\\\\\\\"}-${\\\\\\\\\\\"left\\\\\\\\\\\" | \\\\\\\\\\\"right\\\\\\\\\\\"}\\\\`;\\n</pre>\\n<p>The type <code>Corner</code> can only have values: &quot;top-left&quot;, &quot;top-right&quot;, &quot;bottom-left&quot; and &quot;bottom-right&quot;.</p>\\n<h3 id=\\\"error-and-assertion-handling\\\">Error and Assertion Handling</h3>\\n<h4 id=\\\"ts-expect-error\\\">@ts-expect-error</h4>\\n<ul>\\n<li><code>// @ts-expect-error</code> suppresses the type errors.<pre>\\n// @ts-expect-error\\nconst num: number = \\\\\\\\\\\"hello\\\\\\\\\\\";\\n</pre></li>\\n<li><code>// @ts-ignore</code> suppresses the type errors.<pre>\\n// @ts-ignore\\nconst num: number = \\\\\\\\\\\"hello\\\\\\\\\\\";\\n</pre></li>\\n<li>ts-ignore vs. ts-expect-error<ul>\\n<li>Always use ts-expect-error over ts-ignore</li>\\n<li>If later on the type is corrected from string to number, ts-expect-error will show error: Unused @ts-expect-error directive.</li>\\n<li>@ts-expect-error: the following line of code has error but I choose to suppress the error. This brings attention to the developer that the bypass is no longer necessary.</li>\\n<li>@ts-ignore: if the following line of code has any type of errors, supporess it. The code can perfectly be fine and have no errors.</li>\\n</ul>\\n</li>\\n</ul>\\n<h4 id=\\\"type-unknown-on-catch-clause\\\">Type <code>unknown</code> on <code>catch</code> Clause</h4>\\n<ul>\\n<li>Big improvement over <code>any</code></li>\\n<li>Forces you to deal with <code>instanceof Error</code> properly<pre>\\nfunction somethingRisky() {}\\ntry {\\n  somethingRisky();\\n} catch(error: unknown) {\\n  if (error instanceof Error) {\\n      console.log(error.stack);\\n  } else {\\n      console.log(error);\\n  }\\n}\\n</pre>\\n\\n</li>\\n</ul>\\n<h4 id=\\\"assertion-functions\\\">Assertion Functions</h4>\\n<pre>\\nfunction isError(error: any): error is Error {\\n    return error instanceof Error;\\n}\\n</pre>\\n<ul>\\n<li>The return type of the function above is not only a boolean but an indication of whether the value is of type <code>Error</code>.</li>\\n</ul>\\n<p>With the new assertion function feature:</p>\\n<pre>\\nfunction assertIsError(error: any): asserts error is Error {\\n    if (!(error instanceof Error)) {\\n        throw new Error(`Not an error: ${error}`);\\n    }\\n}\\n\\ntry {\\n    somethingRisky();\\n} catch (error: unknown) {\\n    assertIsError(error);\\n    console.log(error.stack);\\n}\\n</pre>\\n\\n<h4 id=\\\"import-types\\\">Import Types</h4>\\n<pre>\\nimport type {someFunction} from \\\\\\\\\\\"./util\\\\\\\\\\\";\\n</pre>\\n<p>The code above only imports the type information of <code>someFunction</code>.</p>\\n<p>If you are using module bundlers like WebPack, you know that WebPack analyzes the code you import as a mechanism to split your code (so that you don&#39;t need to send code you don&#39;t need on page load).</p>\\n<p>Type imports is a way that we can refer to a type in a module without actually importing the entire function, this will not trigger additional code to be included in your bundle.</p> </pre></pre>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"app-vs-library-concerns\\\">App vs. Library Concerns</h1> <h2 id=\\\"if-you-are-using-typescript\\\">If you are using TypeScript</h2> <ul> <li>Improve developer experience, including in-editor docs for your dependencies</li> <li>Reduce needs to drill into files to understand how adjacent code works</li> <li>TypeScript allows you to encode more information into your source files</li> <li>Easier to catch incomplete refactoring</li> </ul> <h2 id=\\\"app-specific-concerns\\\">App-specific concerns</h2> <ul> <li>More richness when working with data.</li> <li>Better encapsulation tools (e.g., <code>private</code>, <code>protected</code>, <code>public</code>), to facilitate maintaining lazy loading boundaries (e.g., import types only).</li> <li>Improve major version upgrades story for typed libraries.</li> </ul> <h2 id=\\\"library-specific-concerns\\\">Library-specific concerns</h2> <ul> <li>Create and maintain a deliberate public API surface while still being able to create a private API surface to use between modules or components.</li> <li>API documentations</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"create-a-project-from-scratch\\\">Create a Project from Scratch</h1> <h2 id=\\\"step-1---create-a-folder\\\">Step 1 - Create a folder</h2> <pre>\\n\\\\\\\\# Create a new folder\\nmkdir my-lib\\ncd my-lib\\n\\n\\\\\\\\# Download gitignore package and use this package as a CLI tool\\n\\\\\\\\# and pass an argument \\\\\\\\\\\"node\\\\\\\\\\\" to it.\\n\\\\\\\\# This generates a .gitignore file with all the files that you\\n\\\\\\\\# do not care to commit to Git while developing a node app.\\nnpx gitignore node\\n\\n\\\\\\\\# Create a starting-point package.json\\n\\\\\\\\# Answer \\\\\\\\\\\"yes\\\\\\\\\\\" to all the question promoted\\nyarn init --yes\\n</pre> <p>The following is the output <code>package.json</code> file:</p> <pre>\\n{\\n  \\\"name\\\": \\\"my-lib\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"main\\\": \\\"index.js\\\",\\n  \\\"license\\\": \\\"MIT\\\"\\n}\\n</pre> <h2 id=\\\"step-2---modify-packagejson\\\">Step 2 - Modify package.json</h2> <ol> <li><code>main</code> is the entry point of your library. We want to modify it to point to <code>dist/index.js</code>.</li> <li>Add scripts/commands</li> </ol> <pre>\\n{\\n  \\\"name\\\": \\\"my-lib\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  // Entry point path\\n  \\\"main\\\": \\\"dist/index.js\\\",\\n  // The location where consumers can find the type definitions\\n  \\\"types\\\": \\\"dist/index.d.ts\\\",\\n  \\\"license\\\": \\\"MIT\\\"\\n  \\\"scripts\\\": {\\n      // Run TypeScript compiler\\n      \\\"build\\\": \\\"tsc\\\",\\n      // Since this is going to be a small library, we want to\\n      // only rebuild on change, and tsc by default clears out\\n      // all the output before rebuild. preserveWatchOutput is\\n      // to keep the error & warning logs.\\n      \\\"dev\\\": \\\"yarn build --watch --preserveWatchOutput\\\"\\n      \\\"lint\\\": \\\"eslint src --ext js,ts\\\",\\n      \\\"test\\\": \\\"jest\\\"\\n  }\\n}\\n</pre> <h2 id=\\\"step-3---install-dependencies\\\">Step 3 - Install dependencies</h2> <pre>\\nyarn add -D typescript eslint jest\\n</pre>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"declaration-files--type-only-imports\\\">Declaration Files &amp; Type-only Imports</h1> <pre>\\n\\\\\\\\# Create a standard tsconfig.json file\\nyarn tsc --init\\n</pre> <p>We need to modify the tsconfig.json file since the initialized one is too permissive for production use.</p> <pre>\\n...\\n...\\n// The property \\\\\\\\\\\"target\\\\\\\\\\\" is the language level that we wish to support.\\n// This is not the language level allowed in your code. This is the language\\n// level we will be compiling out to.\\n// Change from \\\\\\\\\\\"es2015\\\\\\\\\\\" to \\\\\\\\\\\"ES2018\\\\\\\\\\\"\\n\\\\\\\\\\\"target\\\\\\\\\\\": \\\"ES2018\\\",\\n...\\n...\\n// Enable types: type declaration files to be included in compilation.\\n\\\\\\\\\\\"types\\\\\\\\\\\": [],\\n...\\n...\\n// Change the output directory from \\\\\\\\\\\"./\\\\\\\\\\\" to \\\\\\\\\\\"dist\\\\\\\\\\\".\\n// TypeScript compiler by default will put the output JavaScript file and type\\n// declaration file as siblings of the TypeScript compiler input file. This\\n// might complicate things when we want to clear the output files since they\\n// they are in the same folder as the source file.\\n\\\\\\\\\\\"outDir\\\\\\\\\\\": \\\\\\\\\\\"dist\\\\\\\\\\\",\\n...\\n...\\n// This controls the folder structure within the dist folder.\\n// If we have an index.ts file in src folder, we will have an index.js in dest\\n// folder.\\n\\\\\\\\\\\"rootDir\\\\\\\\\\\": \\\\\\\\\\\"src\\\\\\\\\\\",\\n...\\n...\\n// Disable skipLibCheck\\n...\\n...\\n// Enable declaration since we are building a library and we want to generate\\n// .d.ts files.\\n...\\n...\\n// Enable strict.\\n...\\n...\\n// Add stripInternal: take out \\\\\\\\@Internal annotated fields from the type\\n// declaration file.\\n\\\\\\\\\\\"stripInternal\\\\\\\\\\\": true,\\n...\\n...\\n// At the end of the file, add the following:\\n\\\\\\\\\\\"include\\\\\\\\\\\": [\\\\\\\\\\\"src\\\\\\\\\\\"]\\n</pre> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>You can silence TypeScript checker with <code>any</code>.</p> <pre>\\nlet age: number;\\nage = '12'; // ~~~ Type '\\\"12\\\"' is not assignable to type 'number'\\nage = '12' as any; // OK\\n</pre> <p><code>any</code> eliminates many of the advantages of using TypeScript.</p> <h3 id=\\\"there-is-no-type-safety-with-any-types\\\">There is no type safety with <code>any</code> types</h3> <p>In the above example, the type declaration says that <code>age</code> is a <code>number</code>, but <code>any</code> lets you assign a <code>string</code> to it. The type checker will believe that it is a <code>number</code>. Then you will have bugs as following:</p> <pre>\\nage += 1; // OK, at runtime, age is now \\\"121\\\"\\n</pre> <h3 id=\\\"any-lets-you-break-contracts\\\"><code>any</code> lets you break contracts</h3> <p>When you write a function, you specify a contract: if the caller gives you a certain type of input, you will produce a certain type of output. <code>any</code> allows the caller to break the contracts.</p> <pre>\\nfunction calculateAge(date: Date): number { ... }\\n\\nlet birthDate: any = '1990-01-19';\\ncalculateAge(birthDate); // OK\\n</pre> <p>JavaScript is often willing to implicitly convert between types, a <code>string</code> sometimes works where a <code>Date</code> is expected, only to breawk in other circumstances.</p> <h3 id=\\\"there-are-no-language-services-for-any-types\\\">There are no language services for <code>any</code> types</h3> <p>When a symbol has a type, the TypeScript language services are able to provide intelligent autocomplete and contextual documentation. But for symbols with an <code>any</code> type, you are on your own.</p> <p>TypeScript motto is <em>JavaScript that scales</em>. A key part of <code>scales</code> is the language services which are a core part of the TypeScript experience.</p> <h3 id=\\\"any-types-mask-bugs-when-you-refactor-code\\\"><code>any</code> types mask bugs when you refactor code</h3> <h3 id=\\\"any-hides-your-type-design\\\"><code>any</code> hides your type design</h3> <h3 id=\\\"any-undermines-confidence-in-the-type-system\\\"><code>any</code> undermines confidence in the type system</h3> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>In additio to object, JavaScript has 7 types of primitive values:</p> <ul> <li>string</li> <li>number</li> <li>boolean</li> <li>null</li> <li>undefined</li> <li>symbol</li> <li>bigint</li> </ul> <p>Primitives are distinguished from objects by being <em>immutable</em> and not <em>having methods</em>.</p> <p>You may argue that <code>string</code> does have methods, which is wrong. <code>string</code> primitive type does not have methods, JavaScript defines a <code>String</code> object type that does have methods. <strong>JavaScript freely converts between these types.</strong> When you access a method like <code>charAt</code> on a <code>string</code> primitive, JavaScript wraps it in a <code>String</code> object, calls the method and then throws the object away.</p> <pre>\\nconst originalCharAt = String.prototype.charAt;\\nString.prototype.charAt = function(pos) {\\n    // *this* value here is a String object wrapper.\\n    console.log(this, typeof this, pos);\\n    return originalCharAt.call(this, pos);\\n}\\n\\nconsole.log('primitive'.charAt(3));\\n\\n// Output:\\n[String: 'primitive'] 'object' 3\\nm\\n</pre> <p>The implicit conversion to object wrapper types explains an add phenomenon in JavaScript:</p> <pre>\\n> x = 'hello';\\n> x.language = 'English';\\n'English'\\n> x.language\\nundefined\\n</pre> <p><code>x</code> is converted to a <code>String</code> instance, the <code>language</code> property is set on that instance, and then the instance is thrown away.</p> <p>These object wrapper types exist as a convenience to provide methods on the primitive values and to provide static methods, but there is usually no reason to instantiate them directly.</p> <p>TypeScript models this distinction by having distinct types for the primitives and their object wrappers.</p> <ul> <li><code>string</code> and <code>String</code></li> <li><code>number</code> and <code>Number</code></li> <li><code>boolean</code> and <code>Boolean</code></li> <li><code>symbol</code> and <code>Symbol</code></li> <li><code>bigint</code> and <code>BigInt</code></li> </ul> <p>When you try to pass a <code>String</code> object to a method that expects a <code>string</code>:</p> <pre>\\nfunction isGreeting(phrase: String) {\\n    return ['hello', 'good day']\\n        .includes(phrase);\\n        // ~~~ Argument of type 'String' is not\\n        //     assignable to parameter of type\\n        //     'string'.\\n        // 'string' is a primitive, but 'String'\\n        // is a wrapper object; prefer using \\n        // 'string' when possible.\\n}\\n</pre> <p><strong><code>string</code> is assignable to <code>String</code>, but <code>String</code> is not assignable to <code>string</code>.</strong></p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>TypeScript compiler does two things:</p> <ul> <li>transpiling: converts next-generation TypeScript/JavaScript to an older version of JavaScript that works in browsers.</li> <li>type checking: checks for type errors.</li> </ul> <p>These two things are <strong>independent</strong> from each other. <strong>The types in your code cannot affect the JavaScript that TypeScript emits.</strong></p> <h2 id=\\\"what-typescript-can-and-cannot-do-for-you\\\">What TypeScript can and cannot do for you</h2> <h3 id=\\\"code-with-type-errors-can-produce-output\\\">Code with type errors can produce output</h3> <p>Since code output is independent of type checking, it follows that code with type errors can produce output. You can think of TypeScript errors as being similar to warnings in Java or C (strict-type languages).</p> <p>If you want to disable output on errors, you can use <code>noEmitOnError</code> option in TypeScript configuration settings.</p> <h3 id=\\\"you-cannot-check-typescript-types-at-runtime\\\">You cannot check TypeScript types at runtime</h3> <pre>\\ninterface Square {\\n    width: number;\\n}\\ninterface Rectangle extends Square {\\n    width: number;\\n    height: number;\\n}\\ntype Shape =  Square | Rectangle;\\n\\nfunction calculateArea(shape: Shape) {\\n    if (shape instanceof Rectangle) {\\n        // ~~~~~ 'Rectangle' only refers to a type,\\n        //       but is being used as a value here.\\n        return shape.width * shape.height;\\n    }\\n    // ...\\n}\\n</pre> <p><code>instanceof</code> check happens at <strong>runtime</strong>, but <code>Rectangle</code> is a type and so it cannot affect the runtime behavior of the code.</p> <ul> <li>TypeScript types are <em>erasable</em>: part of compilation to JavaScript is simply removing all the <code>interfaces</code>, <code>types</code>, and type annotations from your code. (This is similar to Java Generics.)</li> </ul> <p>Some constructs introduce both a type (not available at runtime) and a value (available at runtime). The <code>class</code> keyword is one of these constructs.</p> <ul> <li>Making <code>Square</code> and <code>Rectangle</code> classes would solve the error above.</li> </ul> <h3 id=\\\"type-operations-cannot-affect-runtime-values\\\">Type operations cannot affect runtime values</h3> <pre>\\nfunction asNumber(val: number | string): number {\\n    return val as number;\\n}\\n</pre> <p>The above code generates the following JavaScript:</p> <pre>\\nfunction asNumber(val) {\\n    return val;\\n}\\n</pre> <p><strong>There is no conversion whatsoever.</strong> <code>as number</code> is a type operation (more precisely a type assertion), so it cannot affect the runtime behavior of your code.</p> <h3 id=\\\"runtime-types-may-not-be-the-same-as-declared-types\\\">Runtime types may not be the same as declared types</h3> <p><code>boolean</code> is a <strong>declared</strong> type, it will go away during runtime.</p> <pre>\\nfunction setLightSwitch(value: boolean) {\\n    switch(value) {\\n        case true:\\n            turnLightOn();\\n            break;\\n        case false:\\n            turnLightOff();\\n            break;\\n        default:\\n            console.log(\\\"I'm afraid I can't do that.\\\");\\n    }\\n}\\n</pre> <p>In JavaScript, a user might call setLightSwitch with a value <code>ON</code>. For example, if the value comes from a network response, the API might change after you deploy.</p> <h3 id=\\\"you-cannot-overload-a-function-based-on-typescript-types\\\">You cannot overload a function based on TypeScript types</h3> <p>Function overloading (like in C++ or Java) is not possible in TypeScript since the runtime behavior of your code is independent of its TypeScript types.</p> <pre>\\nfunction add(a: number, b: number) { return a + b; }\\n// ~~~~~~ Duplicate function implementation\\nfunction add(a: string, b: string) { return a + b; }\\n// ~~~~~~ Duplicate function implementation\\n</pre> <p>TypeScript provides a facility for overlaoding functions but it operates entirely <em>at the type level</em>. You can provide multiple declarations for a function, but only a single implementation:</p> <pre>\\nfunction add(a: number, b: number): number;\\nfunction add(a: string, b: string): string;\\n\\nfunction add(a, b) { return a + b; }\\n\\nconst three = add(1, 2);\\nconst twelve = add('1', '2');\\n</pre> <h3 id=\\\"typescript-types-have-no-effect-on-runtime-performance\\\">TypeScript types have no effect on runtime performance</h3> <p>Because types and type operations are erased when you generate JavaScript, they cannot have an effect on runtime performance. TypeScript static types are <strong>zero cost</strong>.</p> <ul> <li>TypeScript will introducer <em>build-time</em> overhead.</li> <li>The code TypeScript emits to support older runtimes <em>may</em> incur a performance overhead vs. native implementations.<ul> <li>if you use <code>generator</code> and target ES5, which predates <code>generators</code>, then TypeScript compiler will emit some helper code to make things work.</li> </ul> </li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h2 id=\\\"typescript-configurations\\\">TypeScript Configurations</h2> <pre>\\n{\\n    \\\"compileOptions\\\": {\\n        \\\"noImplicitAny\\\": true\\n    }\\n}\\n</pre> <p>Always prefer configuration file, it ensures that your coworkers and tools all know exactly how you plan to use TypeScript.</p> <p>TypeScript configuration settings control:</p> <ul> <li>where TypeScript compiler looks for the sources files</li> <li>what sort of output it generates</li> <li>there are a few control core aspects of the language itself:<ul> <li><code>noImplicitAny</code></li> <li><code>stricNullChecks</code></li> </ul> </li> </ul> <h3 id=\\\"noimplicitany\\\"><code>noImplicitAny</code></h3> <p><code>noImplicitAny</code> controls whether variables must have known types. When <code>noImplicitAny</code> is off, the following code is valid:</p> <pre>\\nfunction add(a, b) {\\n    return a + b;\\n}\\n</pre> <p>which is equivalent to the following code:</p> <pre>\\nfunction add(a: any, b: any): any {\\n    return a + b;\\n}\\n</pre> <p>TypeScript is the most helpful when it has type information. Turn on <code>noImplicitAny</code>:</p> <ul> <li>helps TypeScript spot problems</li> <li>improves readability of your code</li> <li>enhances your development experience</li> </ul> <h3 id=\\\"stricnullchecks\\\"><code>stricNullChecks</code></h3> <p><code>stricNullChecks</code> controls whether <code>null</code> and <code>undefined</code> are permissible values in every type.</p> <p>With <code>stricNullChecks</code> off:</p> <pre>\\n// Fine, null is a valid number\\nconst x: number = null;\\n</pre> <p>With <code>stricNullChecks</code> on:</p> <pre>\\n// Error, type null is not assignable to type number\\nconst x: number = null;\\n</pre> <p><code>strictNullChecks</code> is extremely helpful for catching errors involving <code>null</code> and <code>undefined</code>.</p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>When you assign an object literal to a variable with a declared type, <em>TypeScript makes sure it has the properties of that type and no others</em>.</p> <pre>\\ninterface Room {\\n    numDoors: number;\\n    ceilingHeight: number;\\n}\\n\\nconst r: Room = {\\n    numDoors: 1,\\n    ceilingHeight: 10,\\n    elephant: 'present',\\n    // ~~~ Object literal may only specify known properties\\n    //     and 'elephant' does not exist in type 'Room'.\\n};\\n</pre> <p>This seems odd that there is an <code>elephant</code> property, this does not make much sense from a structural typing point of view (refer to item 4). The constant <code>r</code> is assignable to the <code>Room</code> type by introducing an intermediate variable:</p> <pre>\\nconst obj = {\\n    numDoors: 1,\\n    ceilingHeight: 10,\\n    elephant: 'present',\\n};\\nconst r: Room = obj; // OK.\\n</pre> <p>The type of <code>obj</code> is inferred as <code>{numDoors: number, ceilingHeight: number, elephant: string}</code>. Since this type includes a subset of the values of the <code>Room</code> type, it is assignable to <code>Room</code> and the code passes the type checker.</p> <p>In the first example, you have triggered a process known as <code>excess property checking</code>, which helps catch an important class of errors that the structural type system would otherwise miss.</p> <h3 id=\\\"limit-of-excess-property-checking\\\">Limit of excess property checking</h3> <p>TypeScript tries to find code that does not do what you intend.</p> <pre>\\ninterface Options {\\n    title: string;\\n    darkMode?: boolean;\\n}\\n\\nfunction createWindow(options: Options) {\\n    if (options.darkMode) {\\n        setDarkMode();\\n    }\\n    // ...\\n}\\n\\ncreateWindow({\\n    title: 'Spider Solitaire',\\n    darkmode: true,\\n    // ~~~ Object literal may only specify known properties,\\n    //     but 'darkmode' does not exist in type 'Options'.\\n    //     Did you mean to write 'darkMode'?\\n});\\n</pre> <p>A purely structural type checker would not be able to spot this sort of error because the domain of the <code>Options</code> type is broad: it includes all objects with a <code>title</code> property that is string and any other properties, since <code>darkMode</code> is optional.</p> <p>It is easy to forget how <strong>expansive</strong> TypeScript types can be.</p> <pre>\\nconst o1: Options = document; // OK.\\nconst o2: Options = new HTMLAnchorElement; // OK.\\n</pre> <p>Both <code>document</code> and <code>HTMLAnchorElement</code> has <code>title</code> property with <code>string</code> type. Therefore it is fine to assign them to a variable with type <code>Options</code>.</p> <p>Excess property checking tries to rein this in without compromising the fundamentally structural nature of the type system. It does this by disallowing unknown properties specifically on <em>object literals</em> (called <code>strict object literal checking</code>).</p> <ul> <li>Neither <code>document</code> nor <code>new HTMLAnchorElement</code> is an object literal, so they did not trigger the checks.</li> <li>This also explains why using an intermediate variable without a type annotation makes the error go away: <pre>\\nconst intermediate = {darkmode: true, title: 'Ski Free'};\\nconst o: Options = intermediate;\\n</pre> <ul> <li>RHS of the first line is an object literal.</li> <li>RHS of the second line is not an object literal.</li> </ul> </li> </ul> <p>Excess property checking does not happen when you use a type assertion:</p> <pre>\\nconst o = {darkmode: true, title: 'Ski Free'} as Options; // OK.\\n</pre> <p>This is a good reason to prefer using type declaration to type assertion.</p> <h3 id=\\\"a-related-check-for-weak-types\\\">A related check for weak types</h3> <p>A weak type has only optional properties:</p> <pre>\\ninterface LineChartOptions {\\n    logscale?: boolean;\\n    invertedYAxis?: boolean;\\n    areaChart?: boolean;\\n}\\nconst opts = {logScale: true};\\nconst o: LineChartOptions = opts;\\n// ~~~ Type '{logScale: boolean;}' has no properties in common\\n//     with type 'LineChartOptions'.\\n</pre> <p>For weak types like <code>LineChartOptions</code>, TypeScript adds another check to make sure that the value type and declared type have at least one property in common.</p> <p>Unlike excess property checking, it happens during <strong>ALL</strong> assignability checks involving weak types.</p> <ul> <li>Factoring out an intermediate variable (e.g., above example) does not bypass this check.</li> </ul> <p><strong>Excess property checking is very limited in scope: it only applies to object literals.</strong></p> \";\n// Exports\nmodule.exports = code;","// Imports\nvar ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ = require(\"../../../../node_modules/html-loader/dist/runtime/getUrl.js\");\nvar ___HTML_LOADER_IMPORT_0___ = require(\"./effective-type-item-1-1.jpg\");\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar code = \"<h2 id=\\\"typescript-is-a-superset-of-javascript\\\">TypeScript is a superset of JavaScript</h2> <p>What does &quot;TypeScript is a superset of JavaScript&quot; mean?</p> <p>Syntactically, if your JavaScript program does not have any syntax errors, then it is also a TypeScript program. :)</p> <ul> <li>TypeScript type checker might flag some issues of your JavaScript code during compilation, but it is a separate topic of problems.</li> <li>TypeScript compiler will parse your code successfully and <strong>emit</strong> JavaScript.</li> <li>All JavaScript programs are TypeScript programs.</li> </ul> <p>TypeScript is NOT a completely different language from JavaScript, since the code in your .js files is already TypeScript.</p> <ul> <li>You do not need to rewrite any of your code while migrating to TypeScript.</li> </ul> <p>There are TypeScript programs that are not JavaScript programs, because TypeScript might add additional syntax for specifying types.</p> <pre>\\n// This is a TypeScript program, but not JavaScript\\nfunction greet(who: string) {\\n    console.log('Hello ', who);\\n}\\n</pre> <h3 id=\\\"catch-exceptions-at-compilation-time\\\">Catch exceptions at compilation time</h3> <pre>\\nlet city = 'new york city';\\nconsole.log(city.toUppercase());\\n// TypeError: city.toUppercase is not a function\\n</pre> <p>There is no type annotation in the above example code, but TypeScript type checker will spot the problem: Property <code>toUppercase</code> does not exist on type <code>string</code>. Did you mean <code>toUpperCase</code>?</p> <p>The code did not explicitly tell TypeScript that the type of <code>city</code> is a string, it inferred it from the initial value.</p> <p><strong>One of the goals of TypeScript type system is to detect code taht will throw an exception at runtime, without having to run your code.</strong></p> <ul> <li>TypeScript cannot <em>always</em> spot code that will throw exceptions, but it will try.</li> </ul> <h3 id=\\\"prevent-runtime-unexpected-behavior\\\">Prevent runtime unexpected behavior</h3> <pre>\\nconst states = [\\n    {name: 'California', capital: 'Sacramento'},\\n    {name: 'Washington', capital: 'Olympia'},\\n    // ...\\n];\\nfor (const state of states) {\\n    console.log(state.capitol); // typo\\n}\\n// Output:\\n// undefined\\n// undefined\\n</pre> <p>This program is a valid JavaScript program (and thus a valid TypeScript). But it clear did not do what you intended.</p> <p>TypeScript type checker will spot this error: Property <code>capitol</code> does not exist on type <code>{name: string, capital: string}</code>. Did you mean <code>capital</code>?</p> <p>Type annotations tell TypeScript what your <strong>intent</strong> is.</p> <img style=\\\"width:80%\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\"> <p>TypeScript type system tries to model the <strong>runtime behavior of JavaScript</strong>. You might be suprised by some cases if you are coming from a language with stricter runtime checks:</p> <pre>\\nconst x = 2 + '3'; // OK, type is string: x = '23'\\nconst y = '2' + 3; // OK, type is string: y = '23'\\n</pre> <p>However it does go beyond JavaScript runtime behavior:</p> <pre>\\n// Evaluates to 2 in JS, \\\"Operator '+' cannot be applied to types...\\\"\\nconst a = null + 2;\\n// Evaluates to '12' in JS, \\\"Operator '+' cannot be applied to types...\\\"\\nconst a = [] + 12;\\n// Alert with 'Hello' in JS, \\\"Expected 0-1 arguments, but got 2\\\"\\nalert('Hello', 'TypeScript');\\n</pre> \";\n// Exports\nmodule.exports = code;","module.exports = __webpack_public_path__ + \"static/media/effective-type-item-1-1.0d199723.jpg\";","// Module\nvar code = \"<p>A symbol in TypeScript exists in one the two spaces:</p> <ul> <li>Type space</li> <li>Value space</li> </ul> <p>The same name can refer to different things depending on which space it is in:</p> <pre><code>interface Cylinder {\\n    radius: number;\\n    height: number;\\n}\\nconst Cylinder = (radius: number, height: number) =&gt; ({radius, height});</code></pre> <ul> <li>Interface <code>Cylinder</code> is a symbol in <em>type</em> space.</li> <li>const <code>Cylinder</code> is a symbol with the same name in <em>value</em> space.</li> </ul> <pre>\\nfunction calculateVolume(shape: unknown) {\\n    if (shape instanceof Cylinder) {\\n        shap.radius\\n        // ~~~ Property 'radius' does not exist on type '{}'\\n    }\\n}\\n</pre> <p>Why does the above line generate a type checking error? <code>instanceof Cylinder</code> refers to the function, not the type.</p> <ul> <li>The code intends the <code>instanceof</code> to check whether the shape was of the <code>Cylinder</code> <strong>type</strong>.</li> <li><code>instanceof</code> is a JavaScript runtime operator, and it operates on <strong>values</strong>.</li> </ul> <p><strong>Generally the symbols after a <code>type</code> or <code>interface</code> are in type space while those introduced in a <code>const</code> or <code>let</code> declaration are values.</strong></p> <p>The <code>class</code> and <code>enum</code> constructs introduce both a type and a value. TypeScript type introduced by a <code>class</code> is based on its shape (its properties and methods) while the vlaue is the constructor.</p> <pre>\\nclass Cylinder {\\n    radius = 1;\\n    height = 1;\\n}\\n\\nfunction calculateVolume(shape: unknown) {\\n    if (shape instanceof Cylinder) {\\n        shape // OK type is Cylinder\\n        shape.radius // OK, type is number\\n    }\\n}\\n</pre> <p>There are many operators and keywords that mean different things in a type or vlaue context.</p> <h3 id=\\\"typeof\\\"><code>typeof</code></h3> <pre>\\ninterface Person {\\n    first: string;\\n    last: string;\\n}\\nconst p: Person = {first: 'John', last: 'Doe'};\\nfunction email(p: Person, subject: string, body: string): Response { ... }\\n\\ntype T1 = typeof p; // Type is Person\\ntype T2 = typeof email; // Type is (p: Person, subject: string, body: string) => Response\\n\\nconst v1 = typeof p; // Value is 'object'\\nconst v2 = typeof email; // Value is 'function'\\n</pre> <p>In contrast to the infinite variety of TypeScript types, there are only six runtime types in JavaScript:</p> <ul> <li><code>string</code></li> <li><code>number</code></li> <li><code>boolean</code></li> <li><code>undefined</code></li> <li><code>object</code></li> <li><code>function</code></li> </ul> <p>The <code>class</code> keyword introduces both a value and a type:</p> <pre>\\nconst v = typeof Cylinder; // Type is function\\ntype T = typeof Cylinder // Type is Cylinder\\n</pre> <h3 id=\\\"-property-accessor\\\"><code>[]</code> property accessor</h3> <p>While <code>obj[&#39;field&#39;]</code> and <code>obj.field</code> are equivalent in value space, they are not in type space.</p> <pre>\\nconst first: Person['first'] = p['first'];\\n</pre> <p><code>Person[&#39;first&#39;]</code> is a <code>type</code> here, <code>string</code>.</p> <pre>\\ntype PersonEl = Person['first' | 'last']; // Type is string\\ntype Tuple = [string, number, Date];\\ntype TupleEl = Tuple[number] // Type is string | number | Date\\n</pre> <h3 id=\\\"other-constructs-that-have-different-meanings-in-type-and-value-spaces\\\">Other constructs that have different meanings in type and value spaces</h3> <ul> <li><code>this</code> in value space is JavaScript <code>this</code> keyword. As a type, <code>this</code> is the TypeScript type of <code>this</code>.</li> <li>In value space <code>&amp;</code> and <code>|</code> are bitwise AND and OR. In type space, they are intersection and union operators.</li> <li><code>const</code> introduces a new variable but <code>as const</code> changes the inferred type of a literal or literal expression.</li> <li><code>extends</code> can define a subclass (<code>class A extends B</code>) or a subtype (<code>interface A extends B</code>) or a constraint on a generic type (<code>Generic&lt;T extends number&gt;</code>).</li> <li><code>in</code> can either be part of a loop (<code>for (key in object)</code>) or a mapped type.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>JavaScript is inherently duck typed: if you pass a function a value with all the right properties, it will not care how you made the value, it will just use it. TypeScript models this behavior.</p> <pre>\\ninterface Vector2D {\\n    x: number;\\n    y: number;\\n}\\n\\nfunction calculateLength(v: Vector2D) {\\n    return Math.sqrt(v.x * v.x + v.y * v.y);\\n}\\n</pre> <p>Now you introduce a new type, named vector:</p> <pre>\\ninterface NamedVector2D {\\n    name: string;\\n    x: number;\\n    y: number;\\n}\\n</pre> <p><code>calculateLength</code> will work with <code>NamedVector2D</code> because the type has <code>x</code> and <code>y</code> properties with the correct types. TypeScript is smart enough to figure this out:</p> <pre>\\nconst v: NamedVector2D = {\\n    name: 'some_vector',\\n    x: 3,\\n    y: 4,\\n};\\ncalculateLength(v); // result is 5\\n</pre> <ul> <li>You never declared the relationship between <code>Vector2D</code> and <code>NamedVector2D</code>.</li> <li>You did not write an alternative implementation of <code>calculateLength</code> for <code>NamedVector2D</code>.</li> </ul> <p><strong>Structural typing</strong>: TypeScript type system is modeling JavaScript runtime behavior, it allows <code>calculateLength</code> to be called with <code>NamedVector2D</code> because its <em>structure</em> is compatible with <code>Vector2D</code>.</p> <h3 id=\\\"structural-typing-can-introduce-unexpected-bugs\\\">Structural typing can introduce unexpected bugs</h3> <pre>\\ninterface Vector3D {\\n    x: number;\\n    y: number;\\n    z: number;\\n}\\n\\nfunction normalize(v: Vector3D) {\\n    const length = calculateLength(v);\\n    return {\\n        x: v.x / length,\\n        y: v.y / length,\\n        z: v.z / length, // a potential bug\\n    }\\n}\\n</pre> <p>The type checker does not catch this issue, why are you alowed to call <code>calculateLength</code> with a 3D vector despite its type declaration saying that it takes 2D vectors?</p> <ul> <li>As you write functions, it is easy to imagine that they will be called with arguments having the properties you have declared <em>and no others</em>. This is known as a <strong>sealed</strong> or <strong>precise</strong> type.</li> <li>It cannot be expressed in TypeScript type system. Your types are <strong>open</strong>.</li> </ul> <h3 id=\\\"structural-typing-can-introduce-surprises-with-classes\\\">Structural typing can introduce surprises with <code>classes</code></h3> <pre>\\nclass C {\\n    foo: string;\\n    constructor(foo: string) {\\n        this.foo = foo;\\n    }\\n}\\nconst c = new C('instance of C');\\nconst d: C = { foo: 'object literal' }; // OK!\\n</pre> <p>Why is <code>d</code> assignable to <code>C</code>? Structure matches:</p> <ul> <li>It has a <code>foo</code> property that is a <code>string</code>.</li> <li>It has a <code>constructor</code> (from <code>Object.prototype</code>) that can be called with one argument.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>There are two ways of assigning a value to a variable and giving it a type:</p> <pre>\\ninterface Person {\\n    name: string;\\n}\\n\\n// Type declaration\\nconst alice: Person = {name: 'Alice'}; // Type is Person\\n// Type assertion\\nconst bob = {name: 'Bob'} as Person; // Type is Person\\n</pre> <h3 id=\\\"type-declaration-vs-type-assertion\\\">Type declaration vs. Type assertion</h3> <ul> <li>Type declaration: add this type declaration to the variable and ensures the value conform to the type.</li> <li>Type assertion: despite the type it inferred, you know better and would like the type to be <code>Person</code>.</li> </ul> <p><strong>In general, you should prefer type declaration to type assertion.</strong></p> <pre>\\nconst alice: Person = {}; // ~~~ Property 'name' is missing in type '{}'\\nconst bob = {} as Person; // No error\\n\\nconst alice1: Person = {\\n    name: 'Alice',\\n    occupation: 'TypeScript developer',\\n    // ~~~ Object literal may only specify known properties and 'occupation'\\n    //     does not exist in type 'Person'.\\n};\\nconst bob1 = {\\n    name: 'Bob',\\n    occupation: 'JavaScript developer',\\n} as Person; // No error\\n</pre> <ul> <li>Type declaration verifies that the value conforms to the interface.</li> <li>Type assertion silences the type error by telling the type checker: for whatever reason, you know better than it does.</li> </ul> <h3 id=\\\"how-to-use-a-type-declaration-in-arrow-function\\\">How to use a type declaration in arrow function</h3> <pre><code>const people = [&#39;alice&#39;, &#39;bob&#39;, &#39;jan&#39;].map(\\n    (name): Person =&gt; ({name})\\n);</code></pre> <h3 id=\\\"when-should-you-use-type-assertion\\\">When should you use type assertion?</h3> <p>Type assertions make the most sense when you truly do know more about a type than TypeScript does, <em>typically from context that is not available to the type checker.</em></p> <p>For instance you know the type of a DOM element more precisely than TypeScript does:</p> <pre><code>document.querySelector(&#39;#my-button&#39;).addEventListener(&#39;click&#39;, e =&gt; {\\n    e.currentTarget // Type is EventTarget\\n    const button = e.currentTarget as HTMLButtonElement;\\n    button // Type is HTMLButtonElement\\n});</code></pre> <p>You may also run into the non-null assertion, which is so common that it gets a special syntax:</p> <pre><code>const elNull = document.getElementById(&#39;foo&#39;); // Type is HTMLElement | null\\nconst el = document.getElementById(&#39;foo&#39;)!; // Type is HTMLElement</code></pre> <p>Used as a prefix, <code>!</code> is boolean negation, but as a suffix, <code>!</code> is interpreted as an assertion that the value is non-null. You should treat <code>!</code> just like any other assertion: it is erased during compilation, so you should only use it if you have information that the type checker lacks and can ensure that the value is non-null.</p> <h3 id=\\\"limitations-of-type-assertion\\\">Limitations of type assertion</h3> <p>Type assertions do not let you convert between arbitrary types. The general idea is that <em>you can use a type assertion to convert between A and B if either is a subset of the other</em>.</p> <ul> <li><code>HTMLElement</code> is a subtype of <code>HTMLElement | null</code>.</li> <li><code>HTMLButtonElement</code> is a subtype of <code>EventTarget</code>.</li> <li><code>Person</code> is a subtype of <code>{}</code>.</li> </ul> <p>You cannot convert between <code>Person</code> and <code>HTMLElement</code>.</p> <pre>\\ninterface Person {\\n    name: string;\\n}\\nconst body = document.body;\\nconst el = body as Person;\\n// ~~~ Conversion of type 'HTMLElement' to type 'Person' may be a mistake because\\n//     neither type sufficiently overlaps with the other. If this was intentional\\n//     convert the expression to 'unknown' first.\\nconst el1 = body as unknown as Person; // OK.\\n</pre> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>An advantage of function expressions in TypeScript is that you can apply a type declaration to the entire function at once.</p> <pre>\\ntype DiceRollFn = (sides: number) => number;\\nconst rollDice: DiceRollFn = sides => { /* ... */ };\\n</pre> <h3 id=\\\"reduce-repetition\\\">Reduce repetition</h3> <p>If you wanted to write several functions for doing arithmetic on numbers:</p> <pre>\\nfunction add(a: number, b: number): number {\\n    return a + b;\\n}\\nfunction sub(a: number, b: number): number {\\n    return a - b;\\n}\\nfunction mul(a: number, b: number): number {\\n    return a * b;\\n}\\nfunction div(a: number, b: number): number {\\n    return a / b;\\n}\\n// Or\\ntype BinaryFn = (a: number, b: number) => number;\\nconst add: BinaryFn = (a, b) => a + b;\\nconst sub: BinaryFn = (a, b) => a - b;\\nconst mul: BinaryFn = (a, b) => a * b;\\nconst div: BinaryFn = (a, b) => a / b;\\n</pre> <p>If you are a library author, consider providing type declarations for common callbacks.</p> <h3 id=\\\"network-request-handler\\\">Network request handler</h3> <pre><code>const responseP = fetch(&#39;/quote?by=Mark + Twain&#39;); // Type is Promise&lt;Response&gt;\\nasync function getQuote() {\\n    const response = await fetch(&#39;/quote?by=Mark + Twain&#39;);\\n    const quote = await response.json();\\n    return quote;\\n}</code></pre> <p>There is a bug in the above code: if the request fails, the response body is likely to contain an explanation like <code>404 Not Found</code> which is not a JSON object but a string.</p> <ul> <li>it is easy to forget that an error response with <code>fetch</code> does not result in a rejected <code>Promise</code>.</li> <li><code>.json()</code> will return a rejected <code>Promise</code> with a message about invalid JSON error. This obscures the real error, which was a 404.</li> </ul> <p>A better way to write the request handler:</p> <pre>\\nconst checkedFetch: typeof fetch = (input: RequestInfo, init?: RequestInit) {\\n    const response = await fetch(input, init);\\n    if (!response.ok) {\\n        throw new Error('Request failed: ', response.status);\\n    }\\n    return response;\\n}\\n</pre>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>There are two ways to define a named type in TypeScript:</p> <pre>\\ntype TState = {\\n    name: string;\\n    capital: string;\\n}\\n</pre> <pre>\\ninterface IState = {\\n    name: string;\\n    capital: string;\\n}\\n</pre> <h3 id=\\\"similarities-between-type-and-interface\\\">Similarities between <code>type</code> and <code>interface</code></h3> <ul> <li>You can use an index signature with both <code>interface</code> and <code>type</code><pre>\\ntype TDict = {[key: string]: string};\\ninterface IDict { [key: string]: string; }\\n</pre></li> <li>You can define function type with either <code>interface</code> or <code>type</code><pre>\\ntype TFn = (x: number) => string;\\ninterface IFn {\\n    (x: number): string;\\n}\\n</pre> <ul> <li>the type alias looks more natureal for this straightforward function type.</li> </ul> </li> <li>Both <code>type</code> and <code>interface</code> can be generic<pre><code>type TPair&lt;T&gt; = {\\n    first: T;\\n    second: T;\\n};\\ninterface IPair&lt;T&gt; {\\n    first: T;\\n    second: T;\\n}</code></pre> </li> <li>An <code>interface</code> can extend a <code>type</code> and a <code>type</code> can extend an <code>inteface</code>.<pre>\\ninterface IStateWithPop extends TState {\\n    population: number;\\n}\\ntype TStateWithPop = IState & {population: number;};\\n</pre> <ul> <li>an <code>interface</code> cannot extend a complex type like a union type. If you want to do that, you need to use <code>type</code> and <code>&amp;</code>.</li> </ul> </li> <li>A class can implement either an <code>interface</code> or a simple type.</li> </ul> <h3 id=\\\"differences-between-type-and-interface\\\">Differences between <code>type</code> and <code>interface</code></h3> <ul> <li>There is union <code>type</code> but no union <code>interface</code>. An interface cannot extend <code>AorB</code>.<pre>\\ntype AorB = A | B;\\n</pre></li> <li><strong>A <code>type</code> is in general more capable than an <code>interface</code>.</strong><ul> <li>it can be a union.</li> <li>it takes advantages of more advanced features like mapped or conditional types.</li> <li>it can more easily express tuple and array types:<pre>\\ntype Pair = [number, number];\\ntype NamedNums = [string, ...number[]];\\n</pre></li> </ul> </li> <li>An <code>interface</code> can be argumented, a <code>type</code> cannot: declaration merging</li> </ul> <pre><code>interface IState {\\n    name: string;\\n    capital: string;\\n}\\ninterface IState {\\n    population: number;\\n}\\n\\nconst wyoming: IState = {\\n    name: &#39;Wyoming&#39;,\\n    capital: &#39;Cheyenne&#39;,\\n    population: 500_000,\\n};</code></pre> <ul> <li>TypeScript uses merging to get different types for the different versions of JavaScript standard library.</li> </ul> <h3 id=\\\"when-to-use-type-or-interface\\\">When to use <code>type</code> or <code>interface</code></h3> <ul> <li>Are you publishing type declarations for an API? If so, it might be helpful for your users to beable to merge in new fields via an <code>interface</code> when the API changes.</li> <li>You should also take into account of consistency: are you working in a codebase that consistently uses <code>type</code>? If so, you probably would prefer using <code>type</code>.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>At runtime, every variable has a single value chosen from JavaScript universe. When TypeScript checks your code for errors, a variable just has a type.</p> <p><strong>Think of the types as a set of possible values.</strong> Also known as the domain of the type.</p> <ul> <li>Example: the <code>number</code> type can be thought of a set of all number values: 42, -32.1, etc.</li> <li>Depending on <code>strict NullChecks</code>, <code>null</code> and <code>undefined</code> may or may not be part of the set.</li> <li>The smallest set is the empty set, which contains no values: <code>never</code></li> <li>The next smallest sets are those which contain only single values: <code>type One = 1; type Two = 2;</code></li> <li>You can union types: <code>type OneTwo = One | Two;</code></li> </ul> <p>Almost all the type checker is doing is testing whether one set of values is a subset of another.</p> <h3 id=\\\"-operator\\\"><code>|</code> operator</h3> <pre>\\ntype A = 'A';\\ntype B = 'B';\\ntype AB = A | B;\\n\\nconst a: AB = 'A';\\nconst c: AB = 'C';\\n// ~~~~ Type '\\\"C\\\"' is not assignable to type 'AB'.\\n</pre> <h3 id=\\\"operator\\\"><code>&amp;</code> operator</h3> <p>The <code>&amp;</code> operator computes the intersection of two types:</p> <pre>\\ninterface Person {\\n    name: string;\\n}\\n\\ninterface LifeSpan {\\n    birth: Date;\\n    death?: Date;\\n}\\n\\ninterface PersonSpan = Person & LifeSpan;\\n\\nconst ps: PersonSpan = {\\n    name: 'John Doe',\\n    birth: new Date('1912/06/23'),\\n    death: new Date('1954/06/07'),\\n}; // OK\\n</pre> <ul> <li>A value that has the properties of <em>both</em> <code>Person</code> and <code>LifeSpan</code> will belong to the intersection type.</li> <li>A value cloud have more than those three properties and still belong to the type.</li> <li>The values in an intersection type contain the union of properties in each of its constituents.</li> </ul> <pre>\\n// There are no keys that TypeScript can guarantee belong to a value in the union type.\\ntype K = keyof (Person | LifeSpan); // Type is `never`\\n\\nkeyof (A&B) = (keyof A) | (keyof B);\\nkeyof (A|B) = (keyof A) & (keyof B);\\n\\n// In the above example: type K\\ntype K = (keyof Person) & (keyof LifeSpan);\\n       = ['name'] & ['birth', ?'death'];\\n       = never;\\n</pre> <h3 id=\\\"extends\\\"><code>extends</code></h3> <pre>\\n// In the above example, type PersonSpan can also be defined as:\\ninterface Person {\\n    name: string;\\n}\\n\\ninterface PersonSpan extends Person {\\n    birth: Date;\\n    death?: Date;\\n}\\n</pre> <p>What does <code>extends</code> mean? You can read it as <code>subset of</code>. The values of type <code>PersonSpan</code> is a subset of the values of type <code>Person</code>, meaning <code>PersonSpan</code> must have the property <code>name</code>.</p> <pre><code>function getKey&lt;K extends string&gt;(val: any, key: K) {...}</code></pre> <p>What does it mean to extend <code>string</code>?</p> <p><strong>Think of it in terms of value sets</strong>: any type whose domain is a subset of <code>string</code>.</p> <pre><code>getKey({}, &#39;x&#39;); // OK, &#39;x&#39; extends string\\ngetKey({}, Math.random() &lt; 0.5 ? &#39;a&#39; : &#39;b&#39; ); // OK, (&#39;a&#39; | &#39;b&#39;) extends string\\ngetKey({}, 12); // ~~~ Type &#39;12&#39; is not assignable to parameter of type &#39;string&#39;</code></pre> <pre><code>interface Point {\\n    x: number;\\n    y: number;\\n}\\ntype PointKeys = keyof Point // Type is &#39;x&#39; | &#39;y&#39;\\nfunction sortBy&lt;K extends keyof T, T&gt;(vals: T[], key: K): T[] {...}</code></pre> <h3 id=\\\"arrays-and-tuples\\\">Arrays and Tuples</h3> <pre>\\nconst list = [1, 2]; // Type is number[]\\nconst tuple: [number, number] = list;\\n// ~~~ Type 'number[]' is missing the following properties\\n//     from type '[number, number]': 0, 1\\n</pre> <p>The reason TypeScript complains on the above example: <code>number[]</code> is not assignable to <code>[number, number]</code> since <code>number[]</code> is not a subset of <code>[number, number]</code>.</p> <p>Is a triple assignable to a pair?</p> <p>Rather than modeling a pair of numbers as <code>{0: number, 1: number}</code>, TypeScript models it as <code>{0: number, 1: number, length: 2}</code>. Therefor the answer is no, a triple is not assignable to a pair.</p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>When you install TypeScript, you get two executables:</p> <ul> <li><code>tsc</code>: TypeScript compiler</li> <li><code>tsserver</code>: TypeScript standalone server</li> </ul> <p>TypeScript Server provides <strong>language services</strong>:</p> <ul> <li>autocomplete</li> <li>inspection</li> <li>navigation</li> <li>refactoring</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h2 id=\\\"cross-site-scripting\\\">Cross-site scripting</h2> <p>Injection attack: put content where that is designed for text and trick a system to read it as code and execute it.</p> <p>It allows attackers to read data, or perform operations on users’ behalf.</p> <p>Depending on what users are compromised</p> <p>e.g., administrator → full system control → create administrator accounts → access database</p> <h3 id=\\\"types-of-xss\\\">TYPES OF XSS</h3> <ul> <li>Stored XSS: Code that executes attacker’s script is persisted</li> <li>Reflected XSS: Transient response from server causes script to execute (i.e., a validation error, notifications)</li> <li>DOM Based XSS: No server involvement is required (i.e., pass code in via queryParams)</li> <li>Blind XSS: Exploits vulnerability in another app (i.e., internal app, more vulnerable, less protection, can absorb public data that is melicious, log-reader), that attacher can’t see or access under normal means</li> </ul> <h3 id=\\\"locations-for-xss-attacks\\\">LOCATIONS FOR XSS ATTACKS</h3> <ul> <li>User-generated rich text</li> <li>Embedded content (you can drop an iframe, or an object, flash, etc.)</li> <li>Anywhere user has control over a URL</li> <li>Anywhere user input is reflected back (i.e., “couldn’t find ___”)</li> <li>Query parameters rendered into DOM</li> <li>element.innerHTML = ___</li> </ul> <h3 id=\\\"xss-defense\\\">XSS DEFENSE</h3> <ul> <li>Never trust user data:<ul> <li>directly in a script</li> <li>in an HTML comment</li> <li>in an attribute name</li> <li>in a tag name</li> <li>directly in a <code>&lt;style&gt;</code> block</li> </ul> </li> <li>Sanitize the data before it is persisted (encoding)<ul> <li>React: <code>dangerouslySetInnerHTML</code> props field</li> </ul> </li> <li>Use values as values not as code: careful with JS templating</li> <li>Content security policy (CSP)<ul> <li>Browsers can’t tell the difference between scripts downloaded from your origin vs. another. It is a single execution context/environment. (e.g., ReactJS can be from CDN, your own script can be from somewhere else)</li> <li>CSP allows us to tell modern browsers which sources they should trust and for what types of resources</li> <li>This information comes via a HTTP response header or meta tag<ul> <li>name: where you are allowed to get scripts</li> <li>‘self’: the origin that the frame has been served on</li> <li>source: protocol + host + port</li> </ul> </li> <li>Useful CSP directives<ul> <li>child-src: child execution contexts (only allowed to spin up frames, workers from the following domains)</li> <li>connect-src: what you can connect to (fetch, WebSocket, EventSource(HTTP long-polling connection))</li> <li>form-action: a list of origins that you can <code>&lt;form&gt;</code> submit/post to</li> <li>img-src, media-src, object-src: a list of origins you can get image, media, flash from</li> <li>style-src: a list of origins external stylesheets can come from (bootstrap, etc.)</li> <li>upgrad-insecure-requests: upgrades from HTTP to HTTPS</li> <li>default-src: fallback, for when specific directive isn’t provided<pre>\\nContent-Security-Policy: script-src 'self' https://some.site.i.trust\\n               [   name  ]       [         sources       ]\\n</pre></li> </ul> </li> </ul> </li> <li>CSP and ‘unsafe-inline’<ul> <li>Script tags embedded in HTML is the most common form of XSS.</li> <li>Cryptographic nonces must be generated per page load and must change unpredictably.</li> </ul> </li> <li><a href=\\\"https://helmetjs.github.io/\\\">helmetJS</a>: a collection of 12 smaller middleware functions that set HTTP response headers.</li> </ul> <h3 id=\\\"malicious-attachments\\\">MALICIOUS ATTACHMENTS</h3> <ul> <li>PDF attachments: can modify memories</li> <li>Embedded malware in image: malware config file</li> </ul> <h2 id=\\\"cross-site-request-forgery\\\">Cross-site request forgery</h2> <p>It takes advantage of cookies (basic authentication credentials) are passed along with requests.</p> <pre><code class=\\\"language-html\\\">&lt;img src=&quot;http://example.com/transfers/perform?accountFrom=12&amp;accountTo=21&quot; /&gt;</code></pre> <h3 id=\\\"cookie-flow\\\">COOKIE FLOW</h3> <pre>\\nWeb application -------------------AUTHENTICATION (login)------------------> Web server\\n                        |----------AUTHENTICATION (cookie)-------|\\n</pre> <p>Consider you have some web application, upon logging in, you get some cookies which will be stored in your web browser. Whenever you are making a request to the web server, <strong>the cookies are sent along with the requests automatically</strong> so that the server can verify your credentials.</p> <h3 id=\\\"cross-domain-access-controls\\\">CROSS DOMAIN ACCESS CONTROLS</h3> <p>For example, in HTML, we have iFrames which allows you embed one website inside another. However the cross-iframe communications are not possible due to the <strong>Same Origin Policy</strong>. ← It is a security feature to make sure that an attacker website can’t arbitrarily make requests to other websites and access data across domains.</p> <h3 id=\\\"cross-site-request-forgery-attacks\\\">CROSS-SITE REQUEST FORGERY ATTACKS</h3> <p>One domain is forging request to another in order to modify data.</p> <p>For example, some user logs into his account on some vulnerable website (cookles like session id are saved on your browser), then visits another website and click some malicious link, his account gets altered.</p> <pre><code class=\\\"language-html\\\">&lt;form action=&quot;http://vulnerable.com/delete_account&quot; method=&quot;POST&quot; id=&quot;csrf-form&quot;&gt;\\n  &lt;input type=&quot;hidden&quot; name=&quot;delete&quot; value=&quot;1&quot; /&gt;\\n&lt;/form&gt;\\n&lt;script&gt;document.getEelementById(&#39;csrf-form&#39;).submit();&lt;/script&gt;  </code></pre> <h3 id=\\\"cross-site-request-forgery-protection-→-csrf-tokens\\\">CROSS-SITE REQUEST FORGERY PROTECTION → CSRF TOKENS</h3> <p>Anti CSRF tokens are generated randomly by web application backend and sent to the web application frontend.</p> <ul> <li>Proves you are authenticated</li> <li>Proves you are sending a request from an appropriate place</li> </ul> <h3 id=\\\"cross-site-request-forgery-protection-→-request-origin\\\">CROSS-SITE REQUEST FORGERY PROTECTION → REQUEST ORIGIN</h3> <ul> <li>Modern browsers send an Origin header which cannot be altered by client-side code with each request</li> <li>In cases where there is no Origin header, there’s almost always a Referer header</li> <li>When behind a proxy, you can usually get some information from Host and X-Forwarded-Host headers</li> </ul> <h3 id=\\\"cross-site-request-forgery-protection-→-cross-origin-resource-sharing\\\">CROSS-SITE REQUEST FORGERY PROTECTION → CROSS-ORIGIN RESOURCE SHARING</h3> <ul> <li>It is a bypass of Same Origin Policy</li> <li>It permits browser to send request from one domain to another</li> </ul> <h2 id=\\\"clickjacking\\\">Clickjacking</h2> <ul> <li>A “UI redress attack”: some invisible button sitting on top of the actual button, and trick the user to perform a click</li> <li>Can be used to capture keystrokes as well</li> </ul> <h3 id=\\\"clickjacking-protection\\\">CLICKJACKING PROTECTION</h3> <ul> <li>X-Frame-Options: HTTP response header that informs the browser when it downloads the document that you are not allowed to put this inside another page:<ul> <li><code>X-Frame-Options: DENY</code></li> <li><code>X-Frame-Options: SAMEORIGIN</code></li> <li><code>X-Frame-Options: ALLOW-FROM https://some-domain-i-trust.com</code></li> </ul> </li> <li>Chrome/Safari don’t respect <code>ALLOW-FROM</code>. Use <code>frame-ancestors</code> CSP directive instead</li> </ul> <h2 id=\\\"man-in-the-middle\\\">Man-in-the-middle</h2> <p>For example, a user opens a browser in a public WiFi network (e..g., Starbucks free WiFi connection). The HTTP request goes from his device over the WiFi radio into the router and goes into the server.</p> <p>Public WiFi: trusted forever by default</p> <p>WiFi devices broadcast what they are looking for</p> <p>Router as DNS: when you log onto that network, you trust that router as the first DNS server inline (translates host names into IP addresses) → All of your host names are now routed to the Starbucks router.</p> <p>Consider an attacker comes into the Starbucks, connects to the public WiFi and scans through all the networks that everyone in the Starbucks is asking for and has been before. He can pop up a network name (Free XXX WiFi) and send garbage packets to the connection between target and the router, tries to de-authenticate the user from the router. The user starts to look for other networks they have seen before and eventually join the Free XXX WiFi, the attacker then becomes the man in the middle of all the requests the user sends out.</p> <ul> <li>Attacker can eavesdrop on and tamper with communication between you and one or more servers</li> <li>XSS at will</li> <li>Capture your credentials: try your credentials on other sites</li> </ul> <h3 id=\\\"man-in-the-middle-protection\\\">MAN-IN-THE-MIDDLE PROTECTION</h3> <p>→ HTTPS, encrypt data in flight</p> <ul> <li>A secret key in order to read or alter a request/response</li> <li>Certificates identify domains and require “Domain Validation”</li> <li>“Enhanced Validation” often requires government ID</li> </ul> <h2 id=\\\"https\\\">HTTPS</h2> <h3 id=\\\"cryptography\\\">CRYPTOGRAPHY</h3> <p>Two types of encryption involved: Symmetric encryption and Public Key encryption</p> <ul> <li>Symmetric encryption is very fast, has no practical limit on size of content.</li> <li>Generate encryption key on a per-connection basis</li> <li>How do we share this secret if we randomize the key? → Public key encryption</li> <li>Public key encryption: Private key &amp; Public key<ul> <li>the public key is used to create encrypted messages</li> <li>the private key is used to read encrypted messages</li> <li>the server makes its public key available to anyone who wants to use it<ul> <li>it sends its public key and certificate to the client</li> <li>the client and server compare “cipher suites”</li> <li>the client generates a <strong>session key</strong> (symmetric encryption, private key) and uses the public key from the server to encrypt it and send it out with the requests<ul> <li>Session key is what’s used for encrypted data exchange</li> </ul> </li> </ul> </li> </ul> </li> </ul> <h3 id=\\\"tls-handshake\\\">TLS HANDSHAKE</h3> <blockquote> <p>Client: Hi, I’d like communicate securely</p> </blockquote> <blockquote> <p>Server: Here is my certificate to prove my identity and my public key for you to use to encrypt the data sent to me</p> </blockquote> <blockquote> <p>Client: Your certificate checks out, it must really be you! Here is a big random number X...X encrypted with your public key, is my session key!</p> </blockquote> <blockquote> <p>Server: Great! I will be encrypting everything I say with X...X from now on!</p> </blockquote> <p>→ OpenSSL is an industry standard library for crypto (algorithms, handshake, protocol, etc)</p> <ul> <li>Generate a private key</li> <li>Generate a public key from private key</li> <li>Make a new certificate singing request</li> <li>Sign the certificate with your private key</li> </ul> \";\n// Exports\nmodule.exports = code;","// Imports\nvar ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ = require(\"../../../../node_modules/html-loader/dist/runtime/getUrl.js\");\nvar ___HTML_LOADER_IMPORT_0___ = require(\"./web-performance-1.png\");\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar code = \"<p>User Experience: first impression matters, a lot.</p> <h2 id=\\\"the-big-14\\\">The Big 14</h2> <ol> <li><strong>Fewer HTTP requests during page load</strong></li> <li><strong>Use CDN</strong>: If you have static resources that do not require the server to figure out what its content is, you can store a versioned file in CDN.<ol> <li>CDN has more points of presence than you do (you might have your web server in a couple of data centers, most CDN’s have multiple locations throughout world)</li> <li>Shared caching: if I require a JS library from a google location, and a thousand of other sites the user visits also reference the same JS library. In general, I will have this library more likely in my browser cache.</li> </ol> </li> <li><strong>Expires/Cache-Control header</strong>: You want to make sure that you are sending out requests with proper headers that correspond to your intent for a piece of content.</li> <li><strong>Gzip</strong></li> <li><strong>Stylesheets at Top</strong>: Browser will block rendering of content until it knows about all the stylesheets so that it doesn’t paint things incorrectly and has to redo that work.</li> <li><strong>Scripts at Bottom</strong>: Rearranging the order of the markdowns in HTML is a priority indication to the browser of which resources are most important to you.</li> <li><strong><del>CSS EXpressions</del></strong></li> <li><strong>Externalize JS/CSS: caching</strong></li> <li><strong>Fewer DNS Lookups</strong></li> <li><strong>Minify JS/CSS</strong></li> <li><strong><del>Redirects</del></strong></li> <li><strong><del>Duplicate Scripts</del></strong></li> <li><strong>ETags</strong>: fingerprint for a particular resource → conditional loading: if I have a fingerprint for a file, I can ask server that here is the fingerprint that I have for the server, is the current fingerprint of the file different? If it is, send me the file, otherwise it tells me the file hasn’t changed.</li> <li><strong>Cacheable Ajax</strong>: if you are requesting resources, you can add on an additional layer of expiration duration.</li> </ol> <h3 id=\\\"images\\\">Images</h3> <p>Image optimization: e.g., png: lossless compression <a href=\\\"https://www.w3schools.com/css/css_image_sprites.asp\\\">Image sprites</a>:</p> <ul> <li>a collection of images put into a single image.</li> <li>A web page with many images can take a long time to load and generates multiple server requests.</li> <li>Using image sprites will reduce the number of server requests and save bandwidth. Inline images:<pre><code class=\\\"language-css\\\">#foo {\\n  background: url(data:image/png;base64, XXXXXXXX);\\n}</code></pre> </li> <li>When you inline an image, you do reduce the amount of external requests happening.</li> <li>However you also tie the cache-ability of that image to your CSS file. In some cases, your CSS file changes way more frequently than your image file, then you will cause more extra downloads.</li> </ul> <h2 id=\\\"middle-end-architecture--communication\\\">Middle-End: Architecture &amp; Communication</h2> <img style=\\\"width:80%\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\"> <ul> <li>Backend can be anything, Java, .Net, NodeJS, GoLang.</li> <li>Middle-end includes<ul> <li>Templating</li> <li>URL routing</li> <li>Data validation</li> <li>Data formatting</li> <li>Headers</li> <li>Caching</li> </ul> </li> <li>Think about backend as a blackbox<ul> <li>it has APIs</li> <li>there is a state machine inside of it, manages states through sessions, manages states saving values to the database, etc.</li> <li>the architecture of the backend doesn’t matter</li> <li>what is exposed on top of the backend is a headless stateful API with response of JSON data</li> <li>you have a contract between the backend and the middle-end, what type of data is exchanged, etc.<ul> <li>Middle-end: Hi backend, I know we are in state ABC, the user now requests state DEF, please handle the request.</li> <li>Backend: handle and decide whether it is a valid state change, extracting the state management logic away.</li> </ul> </li> </ul> </li> </ul> <h3 id=\\\"architecture\\\">Architecture</h3> <p>Single-page application:</p> <ul> <li>Load markup or the shell of your application once<ul> <li>Serve up an initial view</li> <li>Once we have a fully initialized application inside the browser, we don’t need to re-roundtrip to the browser to ask it to re-create the whole new page for us (for example, Facebook comment feature)<ul> <li>The markup to create a comment is simple and straightforward, but when you have a list of these comments, you have a list of the repetitions of the same markup.</li> <li>You have a choice of how to architect things, either make a roundtrip to the server and ask for the whole comment list or worse the whole page to be re-rendered, or you can choose to have the data to go into the markup and the markup → simple templating task to regenerate the items to update to the DOM.<ul> <li><strong>You can use JavaScript templating engines (<a href=\\\"https://mustache.github.io/\\\">Mustache</a>, <a href=\\\"http://handlebarsjs.com/\\\">Handlebars</a>, etc.)</strong></li> <li><strong>You can use data-binding</strong></li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Data validation: There are often two copies of the <strong>stateless</strong> data validation logics exist in your application</p> <ul> <li>one in the backend</li> <li>one in the frontend</li> <li>there will be times when they are not sync’ed, one is outdated.</li> </ul> <p>Middle-end is the place where you can use server-side javascript and put the data validation logic.</p> <p>If the validation is stateful, e.g., is this a unique email address, it can’t be done in the middle-end, it has to be done in the backend, because your database doesn’t live on your client side, it requires a roundtrip to your server.</p> <h3 id=\\\"json-ajax--web-sockets\\\">JSON, Ajax &amp; Web Sockets</h3> <p>Ajax is a full request-response cycle at the HTTP layer, it opens up a new connection on the server and therefore it is taking extra resources, extra HTTP packets over the wire, extra connection resources in your browser and in your server.</p> <p>Web socket creates one request-response cycle, as soon as it has a good established connection/handshake between client and server:</p> <ol> <li>the client that decides to have a socket connection sends the request over the HTTP socket <strong>open</strong></li> <li>it tells the server it wants to switch to web socket protocol</li> <li>the server agrees on the versions and does security checks/handshakes</li> <li>now you have a persistent socket between the client and server, which doesn’t require any HTTP overhead bytes (e.g., headers) to communicate.</li> </ol> <p>Web socket gives us two-way communication which Ajax couldn’t offer (you have to do long polling): emails, push notifications, chats, gaming, etc.</p> <ul> <li>When something happens on the server, we need to notify everybody that is listening, we need to push out that piece of information to the client, we don’t want to wait for the client to ask for it.</li> <li>Socket communication is often referred to as a “real-time” communication, it has much lower latency as oppose to an Ajax request.</li> </ul> <h2 id=\\\"front-end-resource-loading\\\">Front-end: Resource Loading</h2> <p>Resources:</p> <ul> <li>JavaScripts files</li> <li>CSS files</li> <li>Static images</li> </ul> <h3 id=\\\"preloading\\\">Preloading</h3> <p>Preloading is a technique that takes advantage of browser cache/memory, we know we are going to need these resources later, we can just ask the web server to give you these resources now, we will cache these resources.</p> <ul> <li>When end-users get later to these resources, they are already there, can be loaded super fast.</li> <li>However your initial page load time will be slower. → Lazy preloading<pre><code class=\\\"language-html\\\"># Hint for preloading to the browser when it is\\n# parsing this markup.\\n&lt;link rel=&quot;prefetch&quot; href=&quot;something.png&quot;&gt;</code></pre> Extra notes:</li> <li>there is no event/way for you to know when the resource is prefetched in your JavaScript.</li> <li>DNS prefetching in Chrome: Chrome will automatically perform DNS pre-caching for looking ahead in the markup, see if there are any unrecognized domain name or host name, and automatically goes and fetch them.<ul> <li>If you have hrefs in your markup, it will look at the domain name and do a DNS pre-caching if necessary so that later on when your users click that link, they can get to that link quicker.<h3 id=\\\"lazy-loading\\\">Lazy Loading</h3> Lazy loading can also be referred as on-demand loading, postloading, it waits until we are sure that someone needs these resources before downloading.</li> </ul> </li> <li>For example, calendar widget, until the user clicks the calendar widget component, you don’t load any of the code that handles calendar widget rendering.<h3 id=\\\"parallel-loading\\\">Parallel Loading</h3> When you get many scripts that need to be loaded, all the scripts that you load on initial page load need to be loaded dynamically. Parallel loading is essentially about preserving execution order.</li> <li>By browser’s default behavior, if you ask for two scripts to load, the browser will download both of them in parallel, execute the first one that is finished downloading.</li> <li>Browser doesn’t preserve execution order<pre><code class=\\\"language-javascript\\\">function allScriptsLoaded() {...}\\nfunction loadScript(source, done) {\\n  const src = document.createElement(&#39;script&#39;);\\n  src.src = source;\\n  src.async = false; // by default it is true\\n  document.head.appendChild(src);\\n  if (done) {\\n      src.onload = done;\\n      src.onreadystatechange = function () {\\n          if (src.readyState === &#39;loaded&#39; || src.readyState === &#39;complete&#39;) {\\n              done();\\n          }\\n      }\\n  }\\n}\\nloadScript(&#39;react.js&#39;);\\nloadScript(&#39;some-widget1.js&#39;);\\nloadScript(&#39;some-widget2.js&#39;, allScriptLoaded);</code></pre> Note in the above code snippet, if <code>some-widget1.js</code>fails to load, then <code>some-widget2.js</code>might be loaded successfully but it will never be executed.</li> </ul> <p><strong>Why Dynamic Loading?</strong></p> <p><strong>document.ready is way faster than put your scripts in the HTML markup.</strong></p> <ul> <li>Browser has to assume that the script element in the markup might contain a <strong><code>document.write</code></strong></li> <li>If there is a <code>document.write</code> in your script, browser doesn’t know but you might inject a whole new markup into the document, which changes entirely how browser interprets your page → Therefore it can’t fire the document.ready event until it finishes loading the scripts when it sees something in the markup.</li> </ul> <h2 id=\\\"abstractions\\\">Abstractions</h2> <h3 id=\\\"object-orientation-is-slower\\\">Object-orientation is slow(er)</h3> <p>Object-oriented code in the context of running JavaScript in browser is not working the same way as the object-oriented code written in a compiled language.</p> <ul> <li>It is a live interpreted link of inheritance rather than a compiled link of inheritance.</li> <li>In OOP world, you tend to create more abstraction than necessary (hoping that someday it will be necessary). You end up making more function calls, more abstraction layers which tend to slow things down.</li> </ul> <h2 id=\\\"animation\\\">Animation</h2> <h3 id=\\\"js-to-css\\\">JS to CSS</h3> <p>Most of the time if you can perform animation in CSS, you move to CSS. CSS engine is more reliable than your JavaScript. <code>setTimeout</code> &amp; <code>setInterval</code> cannot enforce the exact time the callback is executed, the browser <strong>tries</strong> to put the callback in the event loop at the required time, but it is not guaranteed.</p> <h3 id=\\\"requestanimationframe\\\">requestAnimationFrame</h3> <p>What <code>requestAnimationFrame</code> does is that I ask the browser that I get some code that I want to run in very next time the browser is about ready to paint the update to the screen (browser paints the updates ~60 times per second).</p> <ul> <li>browser controls the frame rate</li> <li>much more reliable than setTimeout / setInterval</li> <li>browser will be able to pause the loop when the tabs in the background are closed or not visible</li> </ul> <h2 id=\\\"ui-thread\\\">UI Thread</h2> <p>Threaded programming is to have the CPU manage the different chains of operations and executions, they can go parallel and CPU can very quickly switch back and forth, or even it can have multi cores, process multiple operations at the same time.</p> <p>JavaScript forever will be <strong>SINGLE-THREADED</strong>.</p> <h3 id=\\\"async-vs-parallel\\\">Async vs. Parallel</h3> <p>JavaScript has asynchronous code that happens in an event loop, but <strong>it doesn’t have parallelism</strong>. It is not multi-threaded. You can spin up two NodeJS instances that run on different processes, but within a single execution context of JavaScript, it is single-threaded. The way JavaScript handles the asynchronous code is in an event loop:</p> <ul> <li>it does single-threaded execution</li> <li>it has different operations in different queues that it might choose to do</li> <li>it will only do it one at a time</li> <li>For example, NodeJs, you can think of it as a big pool of connections asking for things, and NodeJs has an ordered way to handle these requests/tasks. It can switch quickly between different queued tasks. UI Thread is single-threaded, there are several different systems inside the browser that are all sharing the same thread, meaning they can have only one of the tasks from these systems at a time.</li> <li>CSS rendering engine</li> <li>JS engine</li> <li>DOM</li> <li>Garbage collector For example, if the JS engine is executing some task at a given moment, but CSS rendering engine comes in and wants to repaint a frame at the same moment, CSS rendering engine has to wait for the JS engine to finish its ongoing task.</li> </ul> <h3 id=\\\"threaded-javascript---web-worker\\\">“Threaded” JavaScript - Web worker</h3> <p>Web worker allows you to point to a particular JavaScript file and run it in a different thread. Whatever goes on in that thread won’t affect your current thread.</p> <ul> <li>it allows you to take long running JavaScript code (e.g., heavy calculation, data processing) and run it in a different thread at the same time as you run a CSS animation<ul> <li>You have all the cool CSS animations going on and at the same time you have huge amount of communications going on with the server, JavaScript needs to handle different event handlers, etc.</li> <li>You want a nice smooth CSS animation with all the server communication going on at the same time.</li> <li><strong>You can put all your socket communications into a web worker which runs its own thread, it runs very fast.</strong></li> </ul> </li> <li>the downside of using web workers is the communication layer between your current thread and the web worker may become your bottleneck if you have tons of different messages to communicate.<pre><code class=\\\"language-javascript\\\">// Pass a reference of your heavy-data-processing javascript file\\n// to the constructor of a web worker to instantiate it.\\n// JavaScript engine takes care of the followings:\\n// 1. spwan a new thread.\\n// 2. set up a new asynchronous communication channel in between\\n//    the main thread and the web worker thread.\\nvar longThread = new Worker(&#39;heavy-data-processing.js&#39;);\\nlongThread.onmessage = function (e) {\\n  var answer = e.data;\\n  // ... do stuff with the answer\\n};\\nlongThread.postMessage({\\n  question: &#39;...&#39;,\\n});\\n// heavy-data-processing.js\\nfuncion calculate(question) {\\n  // ...\\n  return answer;\\n}\\n// self is the reference to the web worker\\nself.onmessage(function(e) {\\n  var question = e.data.question;\\n  var answer = calculate(question);\\n  self.postMessage(answer);\\n});</code></pre> <blockquote> <p>Question: What is the difference between making an asynchronous request from the web worker and the main thread?</p> </blockquote> </li> <li><em>Answer*</em>: Inside the main thread, when you make the request to the browser, once it leaves the JS engine, it enters into the world with threaded handling where requests can be handled in parallel. However, as soon as that communication needs to come back to the JS engine, <strong>it has to wait for the JS engine to have a free cycle</strong>. The JS engine won’t have a free cycle until the UI thread is free. While if the request comes back to JS engine but there is a CSS animation going on in the UI thread, your request won’t be handled until the CSS engine finishes its ongoing task.</li> </ul> <blockquote> <p>Followup: In this case, it sounds like we should just use web workers always. <strong>Answer</strong>: the communication channel between the main thread and the web worker is <strong>STRING</strong> based, and it is <strong>COPY-ONLY</strong>. Therefore if you have a lot of data to send, you end up with two copies of data in memory until the garbage collector comes along clear them out.</p> </blockquote> <h3 id=\\\"dynamic-memory-allocation---garbage-collector\\\">Dynamic Memory Allocation - Garbage collector</h3> <p>JavaScript allows you to create variables, elements in the DOM, and it allows you to not delete those variables but simply to stop referencing them.</p> <pre><code class=\\\"language-javascript\\\">var obj = {\\n    // ... lots of data, e.g., 1MB of data\\n};\\n// ... later\\nobj = null; // &lt;- here we are setting the reference to null, not the object itself.\\n// What happens to that 1MB chunk of data?\\n// Someone has to come along and free up the memory.</code></pre> <p>Garbage collection is one of the tasks run in the UI thread. The more often the browser thinks the garbage collector needs to run, the more your code will be affected negatively performance-wise.</p> <h2 id=\\\"references\\\">References</h2> <ul> <li>HTTP Archive: <a href=\\\"https://httparchive.org/reports/state-of-the-web\\\">https://httparchive.org/reports/state-of-the-web</a></li> <li>Image sprite tool: <a href=\\\"https://spritegen.website-performance.org/\\\">https://spritegen.website-performance.org/</a></li> <li><a href=\\\"https://robertnyman.com/2008/05/09/improve-your-web-site-performance-tips-tricks-to-get-a-good-yslow-rating/\\\">https://robertnyman.com/2008/05/09/improve-your-web-site-performance-tips-tricks-to-get-a-good-yslow-rating/</a></li> <li><a href=\\\"https://robertnyman.com/2010/01/15/how-to-reduce-the-number-of-http-requests/\\\">https://robertnyman.com/2010/01/15/how-to-reduce-the-number-of-http-requests/</a></li> <li><a href=\\\"https://jsperf.com/\\\">https://jsperf.com</a></li> </ul> \";\n// Exports\nmodule.exports = code;","module.exports = __webpack_public_path__ + \"static/media/web-performance-1.d9a6475b.png\";","// Module\nvar code = \"<h1 id=\\\"http2\\\">HTTP2</h1> <h2 id=\\\"http1x\\\">HTTP/1.x</h2> <ul> <li>clients need to use multiple TCP connections to achieve concurrency and reduce latency.</li> <li>request and response headers are not compressed.</li> <li>there is no effective resource prioritization.</li> </ul> <h2 id=\\\"http20\\\">HTTP/2.0</h2> <ul> <li>Reduce latency by enabling full request and response multiplexing</li> <li>minimize protocol overhead via efficient compression of HTTP header fields</li> <li>add support for request prioritization and server push</li> </ul> <h2 id=\\\"terminology\\\">Terminology</h2> <ul> <li>Stream: a bidirectional flow of bytes within an established connection.</li> <li>Message: a complete sequence of frames that map to a logical request or response message.</li> <li>Frame: smallest unit of communication in HTTP/2.0<ul> <li>contains a frame header that indicates to which stream it belongs.</li> </ul> </li> <li>All communication is performed over a single TCP connection that can carry any number of streams.</li> <li>Each stream has a unique id and optional priority information that is used to carry bidirectional messages.</li> <li>Each message is a logical HTTP message, a request or response, which consists of one or more frames.</li> <li>Frames from different streams may be interleaved and then reassembled via the embedded stream id in the header of each frame.</li> </ul> <h2 id=\\\"request-and-response-multiplexing\\\">Request and response multiplexing</h2> <h3 id=\\\"with-http1x\\\">With HTTP/1.x</h3> <ul> <li>if the client wants to make multiple parallel requests to improve performance, multiple TCP connections must be used.</li> <li>only one response cane be delivered at a time (response queuing) per connection.</li> </ul> <h3 id=\\\"with-http20\\\">With HTTP/2.0</h3> <ul> <li>request and response multiplexing allows client and server to break down an HTTP message into independent frames, interleave them, and then reassemble them on the other end.</li> </ul> <h2 id=\\\"stream-prioritization\\\">Stream prioritization</h2> <ul> <li>Each stream may be assigned an integer weight between 1 and 256</li> <li>Each stream may be given an explicit dependency on another stream</li> </ul> <h2 id=\\\"one-connection-per-origin\\\">One connection per origin</h2> <ul> <li>Most HTTP transfers are short and bursty, whereas TCP connection is optimized for long-lived, bulk data transfers.</li> <li>Reusing the same connection reduces the overall protocol overhead and memory and processing footprint along the full connection path (i.e., client --- ... --- server)</li> </ul> <h2 id=\\\"flow-control\\\">Flow control</h2> <p>Flow control prevents the sender from overwhelming the receiver with data that may not want / be able to process:</p> <ul> <li>client may have requested a large video stream with high priority but the user pauses the video and the client now wants to pause or throttle its delivery from server.</li> <li>a proxy server may have a fast downstream and slow upstream connections, wants to regulate how quickly the downstream delivers data to match the speed of upstream to control its resource usage.</li> </ul> <h2 id=\\\"server-push\\\">Server push</h2> <ul> <li>Server can send multiple responses for a single request.<ul> <li>inlined CSS, Javascript or any other assets via a data URI:<pre><code class=\\\"language-html\\\">&lt;img src=&quot;data:image/gif;blahblahblah&quot; /&gt;</code></pre> </li> </ul> </li> <li>Pushed resources must obey the same-origin policy</li> </ul> <h2 id=\\\"header-compression\\\">Header compression</h2> <ul> <li>HTTP/2.0 compresses request and response header metadata using HPACK compression format:<ul> <li>header fields are encoded via a static Huffman code.</li> <li>both client and server maintain and update an indexed list of previously seen header fields, establishes a shared compression context.</li> </ul> </li> <li>static table provides a list of common HTTP header fields.</li> <li>dynamic table is initially empty and is updated based on exchanged values within a particular connection.</li> </ul> <h2 id=\\\"references\\\">References</h2> <ul> <li>HTTP1. vs HTTP2 Demo: <a href=\\\"https://http2.akamai.com/demo\\\">https://http2.akamai.com/demo</a></li> <li>HTTP2 explained: <a href=\\\"https://http2.akamai.com/\\\">https://http2.akamai.com/</a></li> </ul> \";\n// Exports\nmodule.exports = code;","import React, {memo, MouseEvent} from 'react';\nimport {MenuConfig} from '../interfaces';\nimport {Menu} from '../containers/menu';\n\ninterface IMenuItem {\n    menuConfig: MenuConfig,\n    onClick(e: MouseEvent): void,\n    parent?: MenuConfig,\n    showSubMenu?: boolean,\n}\n\nexport const MenuItem = memo<IMenuItem>(({menuConfig, onClick, parent, showSubMenu}: IMenuItem) => (\n    <div\n        key={menuConfig.route}\n        className={`${parent ? 'sub-menu-item' : 'menu-item-container'} ${showSubMenu ? 'expanded' : ''}`}>\n        <div\n            key=\"display-name\"\n            className=\"menu-item-display-name\"\n            data-menuname={menuConfig.displayName}\n            data-route={menuConfig.route}\n            onClick={onClick}\n        >\n            <div key=\"text\">{menuConfig.displayName}</div>\n            {showSubMenu && (\n                <div key=\"arrow\" className=\"selected-arrow\">\n                    ↠\n                </div>\n            )}\n        </div>\n        {\n            showSubMenu &&\n                menuConfig.subMenu && \n                    <Menu menus={menuConfig.subMenu} parent={menuConfig} />\n        }\n    </div>\n));\n","import React, {memo, MouseEvent} from 'react';\n\nimport {MenuItem} from './menu-item';\nimport {MenuConfig} from '../interfaces';\n\ninterface IMenu {\n    expandedMenu?: string,\n    menus: Array<MenuConfig>,\n    parent?: MenuConfig,\n    onMenuItemClick(e: MouseEvent): void,\n}\n\nexport const Menu = memo<IMenu>(({expandedMenu, menus, parent, onMenuItemClick}: IMenu) => (\n    <div key=\"menu-container\" className={parent ? \"sub-menu-container\" : \"menu-container\"}>\n        {menus.map(menuConfig => (\n            <MenuItem\n                key={menuConfig.route}\n                menuConfig={menuConfig}\n                parent={parent}\n                showSubMenu={menuConfig.displayName === expandedMenu}\n                onClick={onMenuItemClick}\n            />\n        ))}\n    </div>\n));\n","import React, {useCallback, useState, MouseEvent} from 'react';\nimport {useHistory} from 'react-router-dom'\n\nimport {Menu as MenuView} from '../components/menu';\nimport {MenuConfig} from '../interfaces';\nimport '../menu.css';\n\ninterface IMenu {\n    menus: Array<MenuConfig>;\n    parent?: MenuConfig;\n}\n\nexport const Menu = ({menus, parent}: IMenu) => {\n    const history = useHistory();\n    const [expandedMenu, setExpandedMenu] = useState('');\n    const onMenuItemClick = useCallback((e: MouseEvent) => {\n        const menuDisplayName = e?.currentTarget?.getAttribute('data-menuname');\n        if (expandedMenu !== menuDisplayName) {\n            setExpandedMenu(menuDisplayName || '');\n            if (e?.currentTarget?.getAttribute('data-route')) {\n                const parentRoute = parent ? `/${parent.route}/` : '/';\n                const currentRoute = e.currentTarget.getAttribute('data-route') || '';\n                const route = `${parentRoute}${currentRoute}`\n                history.push(route);\n            }\n        } else {\n            setExpandedMenu('');\n        }\n    }, [expandedMenu, setExpandedMenu]);\n\n    return (\n        <MenuView\n            menus={menus}\n            onMenuItemClick={onMenuItemClick}\n            expandedMenu={expandedMenu}\n            parent={parent}\n        />\n    );\n}\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nexport const AlgorithmOverview = () => (\n    <section>\n        <h1>Algorithm Overview</h1>\n    </section>\n);\n","// Menu constants\nimport {MenuConfig} from './interfaces';\n\nconst algorithmsMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Graph',\n        route: 'graph',\n    },\n    {\n        displayName: 'Sorting',\n        route: 'sorting',\n    },\n    {\n        displayName: 'Binary Search',\n        route: 'binary-search',\n    },\n];\n\nconst dataStructuresMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Priority Queue',\n        route: 'priority-queue',\n    },\n    {\n        displayName: 'Linked List',\n        route: 'linked-list',\n    },\n    {\n        displayName: 'Hash Table',\n        route: 'hash-table',\n    },\n    {\n        displayName: 'Map',\n        route: 'map',\n    },\n];\n\nconst asyncJsMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Basics',\n        route: 'basics',\n    },\n    {\n        displayName: 'Rx JS',\n        route: 'rx-js',\n    },\n];\n\nconst webFundamentalsMenu: Array<MenuConfig> = [\n    {\n        displayName: 'HTTP2',\n        route: 'http2',\n    },\n    {\n        displayName: 'Web Security',\n        route: 'security',\n    },\n    {\n        displayName: 'Web Performance',\n        route: 'performance',\n    },\n];\n\nconst effectiveJavaMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Exceptions',\n        route: 'exceptions',\n    },\n    {\n        displayName: 'Object Creation & Destruction',\n        route: 'objects',\n    },\n    {\n        displayName: 'Classes and Interfaces',\n        route: 'classes-and-interfaces'\n    },\n    {\n        displayName: 'Generics',\n        route: 'generics'\n    }\n];\n\nconst typescriptMenu: Array<MenuConfig> = [\n    {\n        displayName: 'TypeScript Best Practices',\n        route: 'best-practices',\n    },\n    {\n        displayName: 'Production Ready TypeScript',\n        route: 'production-ready',\n    },\n];\n\nconst jsFundamentalsMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Event loop',\n        route: 'event-loop',\n    },\n];\n\nconst infrastructureMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Google Cloud Platform',\n        route: 'gcp',\n    },\n];\n\nexport const MENUS: Array<MenuConfig> = [\n    {\n        displayName: 'Algorithms',\n        route: 'interview-prep/algorithms',\n        subMenu: algorithmsMenu,\n    },\n    {\n        displayName: 'Data structures',\n        route: 'interview-prep/data-structures',\n        subMenu: dataStructuresMenu,\n    },\n    {\n        displayName: 'Async JS',\n        route: 'interview-prep/async-js',\n        subMenu: asyncJsMenu,\n    },\n    {\n        displayName: 'JS Fundamentals',\n        route: 'interview-prep/js-fundamentals',\n        subMenu: jsFundamentalsMenu,\n    },\n    {\n        displayName: 'Web Fundamentals',\n        route: 'interview-prep/web-fundamentals',\n        subMenu: webFundamentalsMenu,\n    },\n    {\n        displayName: 'Java Best Practices',\n        route: 'interview-prep/java-best-practices',\n        subMenu: effectiveJavaMenu,\n    },\n    {\n        displayName: 'TypeScript',\n        route: 'interview-prep/typescript',\n        subMenu: typescriptMenu,\n    },\n    {\n        displayName: 'Infrastructure',\n        route: 'interview-prep/infrastructure',\n        subMenu: infrastructureMenu,\n    },\n];\n","import React, {useState, useCallback, ReactNode} from 'react';\n\ninterface IExpandableSection {\n    children: ReactNode;\n    title: string;\n    description?: string;\n}\n\nexport const ExpandableSection = ({children, description, title}: IExpandableSection) => {\n    const [expanded, setExpanded] = useState(false);\n    const toggleExpand = useCallback(() => {\n        setExpanded(!expanded);\n    }, [expanded]);\n\n    return (\n        <div>\n            <div\n                onClick={toggleExpand}\n                style={{\n                    backgroundColor: '#EEEEEE',\n                    padding: expanded ? '1.5rem 2rem 0 2rem' : '1.5rem 2rem',\n                    cursor: 'pointer',\n                }}\n            >    \n                <div \n                    style={{\n                        display: 'inline-block',\n                        paddingRight: '1rem',\n                        verticalAlign: 'middle',\n                        fontSize: '20px'\n                    }}\n                >\n                    {expanded ? '-' : '+'}\n                </div>\n                <div style={{display: 'inline-block', verticalAlign: 'middle'}}>\n                    <div style={{fontSize: '25px'}}>{title}</div>\n                    {description && (\n                        <div style={{fontSize: '16px', marginTop: '1rem'}}>{description}</div>\n                    )}\n                </div>\n            </div>\n            {expanded &&\n                <div style={{backgroundColor: '#EEEEEE'}}>{children}</div>}\n        </div>\n    );\n}\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst buildingBlocksMd = require(\"./markdowns/basics/1-building-blocks.md\");\nconst observablesMd = require(\"./markdowns/basics/2-observables.md\");\nconst mouseDragsExampleMd = require(\"./markdowns/basics/3-mouse-drags-example.md\");\nconst moreOperatorsMd = require(\"./markdowns/basics/4-more-operators.md\");\nconst netflixSearchExampleMd = require(\"./markdowns/basics/5-netflix-example.md\");\nconst threeDimensionalObservablesMd = require(\"./markdowns/basics/6-three-dimensional-collection.md\");\nconst additionalArrayOperatorsMd = require(\"./markdowns/basics/7-additional-array-operators.md\");\n\nexport const Basics = () => (\n    <article>\n        <ExpandableSection title=\"RxJs Basics\">\n            <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{buildingBlocksMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{observablesMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{mouseDragsExampleMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{moreOperatorsMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{netflixSearchExampleMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{threeDimensionalObservablesMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{additionalArrayOperatorsMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst thinkingReactivelyMd = require(\"./markdowns/thinking-reactive/sync-vs-async.md\");\n\nexport const ThinkingReactive = () => (\n    <article>\n        <ExpandableSection\n            description=\"Callback-based vs. promise-based vs. observable-based asynchronous JS\"\n            title=\"Thinking Reactively\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{thinkingReactivelyMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import React from 'react';\nimport { Basics } from './basics';\nimport {ThinkingReactive} from './thinking-reactive';\n\nexport const RxJs = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <Basics />\n        <ThinkingReactive />\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst checkedExceptionsMd = require(\"./markdowns/70-checked-exceptions.md\");\n\nexport const CheckedExceptions = () => (\n    <article>\n        <ExpandableSection\n            description=\"Use checked exceptions for recoverable conditions and runtime exceptionsfor programming errors\"\n            title=\"Checked Exceptions vs. Unchecked Exceptions\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{checkedExceptionsMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst documentExceptionsMd = require(\"./markdowns/74-document-exceptions.md\");\n\nexport const DocumentExceptions = () => (\n    <article>\n        <ExpandableSection title=\"Document all exceptions thrown by each method\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{documentExceptionsMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst exceptionDetailMessagesMd = require(\"./markdowns/75-exception-detail-messages.md\");\n\nexport const ExceptionDetailMessages = () => (\n    <article>\n        <ExpandableSection title=\"Include failure-capture information in detail messages\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{exceptionDetailMessagesMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst failureAtomicityMd = require(\"./markdowns/76-failure-atomicity.md\");\n\nexport const FailureAtomicity = () => (\n    <article>\n        <ExpandableSection title=\"Strive for failure atomicity\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{failureAtomicityMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst standardExceptionsMd = require(\"./markdowns/72-standard-exceptions.md\");\n\nexport const ReuseStandardExceptions = () => (\n    <article>\n        <ExpandableSection title=\"Favor to use standard exceptions\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{standardExceptionsMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst throwExceptionsMd = require(\"./markdowns/73-throw-exceptions.md\");\n\nexport const ThrowExceptions = () => (\n    <article>\n        <ExpandableSection title=\"Throw exceptions appropriate to the absctraction\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{throwExceptionsMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst unnecessaryCheckedExceptionsMd = require(\"./markdowns/71-unnecessary-checked-exceptions.md\");\n\nexport const UnnecessaryCheckedExceptions = () => (\n    <article>\n        <ExpandableSection title=\"Avoid unnecessary checked exceptions\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{unnecessaryCheckedExceptionsMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst whenToUseExceptionsMd = require(\"./markdowns/69-when-to-use-exceptions.md\");\n\nexport const WhenToUseExceptions = () => (\n    <article>\n        <ExpandableSection\n            description=\"Use exceptions only for exceptional conditions\"\n            title=\"When to use exceptions\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{whenToUseExceptionsMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import React from 'react';\nimport { CheckedExceptions } from './checked-exceptions';\nimport { DocumentExceptions } from './document-exceptions';\nimport { ExceptionDetailMessages } from './exception-detail-messages';\nimport { FailureAtomicity } from './failure-atomicity';\nimport { ReuseStandardExceptions } from './reuse-standard-exceptions';\nimport { ThrowExceptions } from './throw-exceptions';\nimport { UnnecessaryCheckedExceptions } from './unnecessary-checked-exceptions';\nimport {WhenToUseExceptions} from './when-to-use-exceptions';\n\nexport const Exceptions = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <WhenToUseExceptions />\n        <CheckedExceptions />\n        <UnnecessaryCheckedExceptions />\n        <ReuseStandardExceptions />\n        <ThrowExceptions />\n        <DocumentExceptions />\n        <ExceptionDetailMessages />\n        <FailureAtomicity />\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst eventLoopMd = require(\"./markdowns/event-loop.md\");\n\nexport const EventLoop = () => (\n    <article>\n        <div style={{padding: '1rem 2rem'}}>\n            <Markdown>{eventLoopMd}</Markdown>\n        </div>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst staticFactoryMd = require(\"./markdowns/1-static-factory.md\");\n\nexport const StaticFactory = () => (\n    <article>\n        <ExpandableSection\n            description=\"Consider static factory methods instead of constructors\"\n            title=\"Static Factory Method\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{staticFactoryMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst builderMd = require(\"./markdowns/2-builder.md\");\n\nexport const Builder = () => (\n    <article>\n        <ExpandableSection\n            description=\"Consider a builder when faced with many constructor parameters.\"\n            title=\"Builder with many constructor parameters\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{builderMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst dependencyInjectionMd = require(\"./markdowns/5-dependency-injection.md\");\n\nexport const DependencyInjection = () => (\n    <article>\n        <ExpandableSection title=\"Prefer dependency injection over hardwiring resources\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{dependencyInjectionMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import React from 'react';\nimport { StaticFactory } from './static-factory';\nimport { Builder } from './builder';\nimport { DependencyInjection } from './dependency-injection';\n\nexport const ObjectCreationAndDestruction = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <StaticFactory />\n        <Builder />\n        <DependencyInjection />\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst favorCompositionMd = require(\"./markdowns/18-favor-composition.md\");\n\nexport const FavorComposition = () => (\n    <article>\n        <ExpandableSection title=\"Favor composition over inheritance\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{favorCompositionMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst minimizeMutabilitysMd = require(\"./markdowns/17-minimize-mutability.md\");\n\nexport const MinimizeMutability = () => (\n    <article>\n        <ExpandableSection title=\"Minimiaze mutability\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{minimizeMutabilitysMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import React from 'react';\nimport { FavorComposition } from './favor-composition';\nimport { MinimizeMutability } from './minimize-mutability';\n\nexport const ClassesAndInterfaces = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <MinimizeMutability />\n        <FavorComposition />\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst basicsMd = require(\"./markdowns/basics.md\");\n\nexport const Basics = () => (\n    <article>\n        <div style={{padding: '1rem 2rem'}}>\n            <Markdown>{basicsMd}</Markdown>\n        </div>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst genericTypesMd = require(\"./markdowns/29-generic-types.md\");\n\nexport const GenericTypes = () => (\n    <article>\n        <ExpandableSection title=\"Favor generic types\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{genericTypesMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst rawTypesMd = require(\"./markdowns/26-raw-types.md\");\n\nexport const RawTypes = () => (\n    <article>\n        <ExpandableSection title=\"Do not use raw types\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{rawTypesMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst uncheckedWarningsMd = require(\"./markdowns/27-unchecked-warnings.md\");\n\nexport const UncheckedWarnings = () => (\n    <article>\n        <ExpandableSection title=\"Eliminate unchecked warnings\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{uncheckedWarningsMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/28-prefer-lists.md\");\n\nexport const PreferLists = () => (\n    <article>\n        <ExpandableSection title=\"Prefer lists to arrays\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/30-generic-methods.md\");\n\nexport const GenericMethods = () => (\n    <article>\n        <ExpandableSection title=\"Favor generic methods\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/31-bounded-wildcards.md\");\n\nexport const BoundedWildcards = () => (\n    <article>\n        <ExpandableSection title=\"Use bounded wildcards to increase API flexibility\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/32-combine-generics-and-varargs.md\");\n\nexport const CombineGenericsAndVarargs = () => (\n    <article>\n        <ExpandableSection title=\"Combine generics and varargs judiciously\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/33-typesafe-heterogeneous-containers.md\");\n\nexport const TypesafeHeterogeneousContainers = () => (\n    <article>\n        <ExpandableSection title=\"Consider typesafe hetergeneous containers\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import React from 'react';\nimport { GenericTypes } from './generic-types';\nimport {RawTypes} from './raw-types';\nimport { UncheckedWarnings } from './unchecked-warnings';\nimport { PreferLists } from './prefer-lists';\nimport { GenericMethods } from './generic-methods';\nimport { BoundedWildcards } from './bounded-wildcards';\nimport { CombineGenericsAndVarargs } from './combine-generics-and-varargs';\nimport { TypesafeHeterogeneousContainers } from './typesafe-heterogeneous-containers';\n\nexport const Generics = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <RawTypes />\n        <UncheckedWarnings />\n        <PreferLists />\n        <GenericTypes />\n        <GenericMethods />\n        <BoundedWildcards />\n        <CombineGenericsAndVarargs />\n        <TypesafeHeterogeneousContainers />\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst overviewMd = require(\"./markdowns/gke-foundations/1-overview.md\");\nconst resourceManagementMd = require(\"./markdowns/gke-foundations/2-resource-management.md\");\nconst billingMd = require(\"./markdowns/gke-foundations/3-billing.md\");\nconst containersMd = require(\"./markdowns/gke-foundations/4-intro-to-containers.md\");\nconst containerImagesMd = require(\"./markdowns/gke-foundations/5-container-images.md\");\nconst k8sMd = require(\"./markdowns/gke-foundations/6-intro-to-k8s.md\");\nconst gkeMd = require(\"./markdowns/gke-foundations/7-intro-to-gke.md\");\nconst computeOptionsMd = require(\"./markdowns/gke-foundations/8-compute-options.md\");\nconst k8sComponentsMd = require(\"./markdowns/gke-foundations/9-k8s-concepts.md\");\nconst k8sControlPlaneMd = require(\"./markdowns/gke-foundations/10-k8s-control-plane.md\");\n\nexport const GkeFoundations = () => (\n    <article>\n        <ExpandableSection title=\"Architecting with GKE: Foundations\">\n            <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{overviewMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{resourceManagementMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{billingMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{containersMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{containerImagesMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{k8sMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{gkeMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{computeOptionsMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{k8sComponentsMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{k8sControlPlaneMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst overviewMd = require(\"./markdowns/security-in-gcp/1-approach.md\");\nconst cloudIdentityMd = require(\"./markdowns/security-in-gcp/2-cloud-identity.md\");\nconst iamMd = require(\"./markdowns/security-in-gcp/3-iam.md\");\nconst vpcMd = require(\"./markdowns/security-in-gcp/4-vpc.md\");\n\nexport const SecurityInGCP = () => (\n    <article>\n        <ExpandableSection title=\"Security in GCP\">\n            <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{overviewMd}</Markdown>\n            </div>\n            {/* <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{cloudIdentityMd}</Markdown>\n            </div> */}\n            {/* <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{iamMd}</Markdown>\n            </div> */}\n            <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{vpcMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import React from 'react';\nimport { GkeFoundations } from './gke-foundation';\nimport {SecurityInGCP} from './security-in-gcp';\n\nexport const GCP = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <SecurityInGCP />\n        <GkeFoundations />\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst overviewMd = require(\"./markdowns/1-overview.md\");\n\nexport const Overview = () => (\n    <article>\n        <ExpandableSection title=\"Overview of TypeScript\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{overviewMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst latestTypeScriptFeaturesMd = require(\"./markdowns/2-latest-typescript-features.md\");\n\nexport const LatestTypeScriptFeatures = () => (\n    <article>\n        <ExpandableSection title=\"Latest JavaScript and TypeScript Features\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{latestTypeScriptFeaturesMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst appVsLibraryConcernsMd = require(\"./markdowns/3-app-vs-library-concerns.md\");\n\nexport const AppVsLibraryConcerns = () => (\n    <article>\n        <ExpandableSection title=\"Application vs Library Concerns\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{appVsLibraryConcernsMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst createProjectFromScratchMd = require(\"./markdowns/4-create-project-from-scratch.md\");\n\nexport const CreateProjectFromScratch = () => (\n    <article>\n        <ExpandableSection title=\"Create Project From Scratch\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{createProjectFromScratchMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst declarationFilesMd = require(\"./markdowns/5-declaration-files.md\");\n\nexport const DeclarationFiles = () => (\n    <article>\n        <ExpandableSection title=\"Declaration Files\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{declarationFilesMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import React from 'react';\nimport { Overview } from './overview';\nimport { LatestTypeScriptFeatures } from './latest-typescript-features';\nimport { AppVsLibraryConcerns } from './app-vs-library-concerns';\nimport { CreateProjectFromScratch } from './create-project-from-scratch';\nimport { DeclarationFiles } from './declaration-files';\n\nexport const ProductionReadyTypeScript = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <Overview />\n        <LatestTypeScriptFeatures />\n        <AppVsLibraryConcerns />\n        <CreateProjectFromScratch />\n        <DeclarationFiles />\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/5-any.md\");\n\nexport const Any = () => (\n    <article>\n        <ExpandableSection title=\"Limit use of the any type\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/10-avoid-wrapper-types.md\");\n\nexport const AvoidWrapperTypes = () => (\n    <article>\n        <ExpandableSection title=\"Avoid object wrapper types\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/3-code-gen.md\");\n\nexport const CodeGen = () => (\n    <article>\n        <ExpandableSection\n            title=\"Understand Code Generation is Independent of Types\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/2-typescript-operations.md\");\n\nexport const ConfigurationOptions = () => (\n    <article>\n        <ExpandableSection\n            title=\"Know which TypeScript options you are using\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/11-excess-property-checking.md\");\n\nexport const ExcessPropertyChecking = () => (\n    <article>\n        <ExpandableSection\n            title=\"Recognize the limits of excess property checking\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst jsAndTsRelationshipMd = require(\"./markdowns/1-js-and-ts-relationship.md\");\n\nexport const JsAndTsRelationship = () => (\n    <article>\n        <ExpandableSection\n            title=\"What is the relationship between JavaScript and TypeScript?\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{jsAndTsRelationshipMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/8-spaces.md\");\n\nexport const Spaces = () => (\n    <article>\n        <ExpandableSection\n            title=\"How to tell whether a symbol is in the type space or value space?\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/4-structural-typing.md\");\n\nexport const StructuralTyping = () => (\n    <article>\n        <ExpandableSection\n            title=\"Get Comfortable with Structural Typing\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/9-avoid-type-assertions.md\");\n\nexport const AvoidTypeAssertions = () => (\n    <article>\n        <ExpandableSection\n            title=\"Prefer type declaration to type assertion\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/12-type-to-function-expression.md\");\n\nexport const TypeToFunctionExpression = () => (\n    <article>\n        <ExpandableSection\n            title=\"Apply types to entire function expression when possible\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/13-type-vs-interface.md\");\n\nexport const TypeVsInterface = () => (\n    <article>\n        <ExpandableSection\n            title=\"Know the difference between type and interface\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/7-types-as-sets-of-values.md\");\n\nexport const TypesAsSetsOfValues = () => (\n    <article>\n        <ExpandableSection\n            title=\"Think of types as sets of values\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst md = require(\"./markdowns/6-use-your-editor.md\");\n\nexport const UseYourEditor = () => (\n    <article>\n        <ExpandableSection\n            title=\"Use your editor to interrogate and explore the type system\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{md}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import React from 'react';\nimport { Any } from './any';\nimport { AvoidWrapperTypes } from './avoid-wrapper-types';\nimport { CodeGen } from './code-gen';\nimport { ConfigurationOptions } from './configuration-options';\nimport { ExcessPropertyChecking } from './excess-property-checking';\nimport { JsAndTsRelationship } from './js-and-ts-relationship';\nimport { Spaces } from './spaces';\nimport { StructuralTyping } from './structural-typing';\nimport { AvoidTypeAssertions } from './type-assertions';\nimport { TypeToFunctionExpression } from './type-to-function-expression';\nimport { TypeVsInterface } from './type-vs-interface';\nimport { TypesAsSetsOfValues } from './types-as-sets-of-values';\nimport { UseYourEditor } from './use-your-editor';\nexport const EffectiveTypeScript = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <JsAndTsRelationship />\n        <ConfigurationOptions />\n        <CodeGen />\n        <StructuralTyping />\n        <Any />\n        <UseYourEditor />\n        <TypesAsSetsOfValues />\n        <Spaces />\n        <AvoidTypeAssertions />\n        <AvoidWrapperTypes />\n        <ExcessPropertyChecking />\n        <TypeToFunctionExpression />\n        <TypeVsInterface />\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst md = require(\"./markdowns/web-security.md\");\n\nexport const WebSecurity = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <Markdown>{md}</Markdown>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst md = require(\"./markdowns/web-performance.md\");\n\nexport const WebPerformance = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <Markdown>{md}</Markdown>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst md = require(\"./markdowns/http2.md\");\n\nexport const HTTP2 = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <Markdown>{md}</Markdown>\n    </article>\n);\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport {Menu} from './layout/menu';\nimport {AlgorithmOverview} from './algorithms/overview';\nimport './App.css';\nimport {MENUS} from './layout/menu/constants';\nimport {RxJs} from './async-js/rx-js';\nimport { Exceptions } from './effective-java/exceptions';\nimport { EventLoop } from './js-fundamentals/event-loop';\nimport { ObjectCreationAndDestruction } from './effective-java/objects';\nimport { ClassesAndInterfaces } from './effective-java/classes';\nimport { Basics } from './async-js/basics';\nimport { Generics } from './effective-java/generics';\nimport { GCP } from './infrastructure/gcp';\nimport { ProductionReadyTypeScript } from './typescript/production-ready';\nimport { EffectiveTypeScript } from './typescript/effective-typescript';\nimport { WebSecurity } from './web-fundamentals/web-security';\nimport { WebPerformance } from './web-fundamentals/web-performance';\nimport { HTTP2 } from './web-fundamentals/http2';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <Menu menus={MENUS} />\n        <div className=\"markdown-container\">\n          <Switch>\n            <Route\n              exact\n              path=\"/interview-prep/algorithms\"\n              component={AlgorithmOverview}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/async-js/basics\"\n              component={Basics}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/async-js/rx-js\"\n              component={RxJs}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/java-best-practices/exceptions\"\n              component={Exceptions}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/java-best-practices/generics\"\n              component={Generics}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/java-best-practices/objects\"\n              component={ObjectCreationAndDestruction}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/java-best-practices/classes-and-interfaces\"\n              component={ClassesAndInterfaces}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/typescript\"\n              component={EffectiveTypeScript}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/typescript/best-practices\"\n              component={EffectiveTypeScript}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/typescript/production-ready\"\n              component={ProductionReadyTypeScript}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/js-fundamentals/event-loop\"\n              component={EventLoop}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/infrastructure/gcp\"\n              component={GCP}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/web-fundamentals/security\"\n              component={WebSecurity}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/web-fundamentals/performance\"\n              component={WebPerformance}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/web-fundamentals/http2\"\n              component={HTTP2}\n            />\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}