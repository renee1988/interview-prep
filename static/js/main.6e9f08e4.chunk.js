(this["webpackJsonpinterview-prep"]=this["webpackJsonpinterview-prep"]||[]).push([[0],[,,,,,,,,,,,,,,,,,function(e,t,n){e.exports=n(35)},,,,,function(e,t,n){},function(e,t,n){},,,,,,function(e,t,n){},function(e,t){e.exports='<h3 id="synchronous-vs-asynchronous-computing">Synchronous vs. Asynchronous computing</h3> <p>The main difference between synchronous and asynchronous computing/code is <strong>latency/waitime</strong>.</p> <h4 id="blocking-code">Blocking code</h4> <p>Synchronous execution occurs when each block of code must wait for the previous block to complete before running.</p> <ul> <li>Easy to implement</li> <li>Easy to understand</li> <li>Easy to debug</li> </ul> <p>JavaScript is a single-threaded language. Writing blocking code creates awful user experience.</p> <ul> <li>waiting for AJAX call to return</li> <li>waiting for database operations to complete The entire application would pause/sit idle waiting for the data to be loaded and wasting precious computing cycles that could be executing other code.</li> </ul> <p>Other than horrible user experience, browsers may deem your scripts unresponsive after a certain period of inactivity and terminate them.</p> <h4 id="non-blocking-code-with-callback-functions">Non-blocking code with callback functions</h4> <img src="https://renee1988.github.io/panda-learning-cs//images/rx-js-cb.png"> <p>As a single-threaded language, JavaScript provides callback functions to tackle the problem of blocking for long-running operations to complete by allowing you to provide a handler function that the JavaScript runtime will invoke once the data is ready to use.</p> <ul> <li>JavaScript callback functions create <strong>inversion of control</strong> where functions call the application back insetad of the other way around.</li> <li>Inversion of control refers to the way in which certain parts of your code receive the flow of control back from teh runtime system.</li> </ul> <p>Callback functions allow you to invoke code asynchronously, so that the application can return control to you later. This allows the program to continue with any other task in the meantime.</p> <h4 id="time-and-space">Time and space</h4> <ul> <li>Synchronous functions allows us to reason directly about the state of the application</li> <li>Asynchronous code forces us to reason about its <strong>future</strong> state</li> </ul> <p>For example, if you have three functions performing three independent tasks, then executing them in any order wouldn&#39;t matter. However, if they are sharing some global state, their behavior would be determined by the order in which they were called -&gt; <strong><em>Side Effect</em></strong></p> <h4 id="callback-or-rxjs">Callback or RxJS?</h4> <ul> <li>If your script issues a single remote HTTP request, RxJS is an overkill, callbacks remain the perfert solution.</li> <li>RxJS begins to shine when implementing state machines of advanced complexity such as:<ul> <li>dynamic UIs: rich UI made up of several widgets on the page that interact with each other</li> <li>service orchestration: orchestrate the execution of several business process that consumes several microservice, data mashups</li> </ul> </li> </ul> <pre><code class="language-javascript">// Example: callback hell\najax(\n    &#39;&lt;host1&gt;/items&#39;,\n    items =&gt; {\n        items.forEach(item =&gt; {\n            ajax(`&lt;host2&gt;/items/${items.getId()}/info`, dataInfo =&gt; {\n                ajax(`&lt;host3&gt;/files/${dataInfo.files}`, processFiles)\n            });\n        });\n    },\n);</code></pre> <h4 id="event-emitters">Event Emitters</h4> <p>Event emitter is a popular mechanism for asynchronous event-based architecture.</p> <ul> <li><strong>DOM</strong> is an event emitter.</li> <li><code>EventEmitter</code> class in NodeJs is used to implement APIs:<ul> <li>WebSocket I/O</li> <li>File reading &amp; writing</li> </ul> </li> </ul> '},function(e,t){e.exports='<h1 id="use-exceptions-only-for-exceptional-conditions">Use exceptions only for exceptional conditions</h1> <pre><code class="language-java">try {\n    int i = 0;\n    while(true) {\n        range[i++].climb();\n    }\n} catch(ArrayIndexOutOfBoundsException e) {}</code></pre> <p>The inifinite loop terminates by throwing, catching and ignoring an <code>ArrayIndexOutOfBoundsException</code> when it attempts to access the first array element outside the bounds of the array.</p> <p>Why would someone write the code above?</p> <p>Reasoning: VM checks the bounds of all array accesses, the normal loop termination test -- hidden by the compiler but still present in the for-each loop -- is redundant and should be avoided.</p> <p>What is wrong with the reasoning above?</p> <ul> <li>Exceptions are designed for exceptional circumstances, there is little incetive for JVM implementors to make them as fast as explicit tests.</li> <li>Placing code inside a try-catch block inhibits certain optimizations that JVM implementations might otherwise perform.</li> <li>The standard idiom for looping through an array doesn&#39;t necessarily result in redundant checks. Many JVM implementations optimize them away.</li> <li>In fact, exception-based idiom is far slower than the standard one.</li> </ul> <p>What else is wrong with the code above?</p> <ul> <li>It is not guaranteed to work. If there is a bug in the loop, the use of exceptions for <em>flow control</em> can mask the bug.<ul> <li>If a reasonable loop idiom is used, the bug would generate an uncaught exception, resulting in immediate thread termination with a full stack trace.</li> <li>If the exception-based loop idiom is used, the bug-related exception would be caught and misinterpreted as a normal loop termination.</li> </ul> </li> </ul> <p><strong>Exceptions are to be used only for exceptional conditions, they should never be used for ordinary control flow.</strong></p> <p>A class with a &quot;state-dependent&quot; method that can be invoked only under certain unpredictable conditions should generally have a separate &quot;state-testing&quot; method indicating whether it is appropriate to invoke the state-dependent method.</p> <ul> <li>Example: iterator.next() &amp; iterator.hasNext()</li> </ul> <p>An alternative to providing a separate state-testing method is to have the state-dependent method return an empty optional or a distinguished return value (<code>null</code>).</p> <p>If an object is to be accessed concurrently without external synchronization or is subject to externally induced state transitions, <em>you must use an optional or distinguished return value</em>, as the object state could change in the interval between the invocation of a state-testing method and its state-dependent method.</p> <p>Performance concerns may dictate that an optional or distinguished return value be used if a separate state-testing method would duplicate the work of the state-dependent method.</p> <p>State-testing method is mildly preferrable to a distinguished return value.</p> <ul> <li>Readability.</li> <li>Incorrect use may be easier to detect.<ul> <li>if you forget to call a state-testing method, the state-dependent method will throw an exception, making the bug obvious</li> <li>if you forget to check for a distinguished return value, the bug may be subtle</li> </ul> </li> </ul> '},function(e,t){e.exports='<h1 id="typescript-is-">TypeScript Is ...</h1> <ul> <li>A programming language, a compiler and a language server<ul> <li>Language server: serves autocompletes in VS code</li> </ul> </li> <li>A syntactic superset of JavaScript<ul> <li>It builds on top of the existing JavaScript syntax</li> </ul> </li> <li>The core of the best JS environment available today</li> <li>&quot;A fancy linter&quot; and a fantastic static analysis tool<ul> <li>Type checking</li> <li>Make sure you are following through the garuantees you intend to make</li> </ul> </li> </ul> <h1 id="what-problems-does-ts-help-solve">What problems does TS help solve?</h1> <ul> <li>Duck typed languages start to hurt more as codebases get large<ul> <li>hard to keep contracts between modules under control</li> </ul> </li> <li>Informal contracts grow organically, formal ones grow deliberately</li> <li>JS authoring environments are worlds behind the UX of &quot;modern IDEs&quot;</li> <li>Too many JS errors are discovered at <em>runtime</em>.</li> </ul> '},function(e,t){e.exports='<h2 id="latest-javascript-features">Latest JavaScript Features</h2> <h3 id="optional-chaining">Optional Chaining</h3> <pre><code class="language-ts">// Example:\nlet x: {\n    user: {    \n        name: string;\n        address?: {\n            street: string;\n            city: string;\n        };\n    }\n} = undefined as any;\n\n// Optional Chaining\n// &quot;?&quot; adds a condition to the following code:\n// If x.user.address exists, log the city\n// otherwise, log undefined\nconsole.log(x.user.address?.city);</code></pre> <h3 id="nullish-coalescing">Nullish Coalescing</h3> <pre><code class="language-ts">class Foo {\n    #name: string;\n    // `constructor(public name?: string)` is a shorthand\n    // for having a class member field `name`.\n    constructor(rawName?: string) {\n        // Nullish coalescing: `??`\n        // If the `rawName` is *null* or *undefined*, fall back to the value &#39;no name&#39;.\n        // IMPORTANT: `??` is different from `||`\n        // If we use `||` here, we will run into surprises of falsy values\n        // (e.g., empty strings or 0&#39;s, they are not Nullish).\n        this.#name = rawName ?? &#39;no name&#39;;\n    }\n\n    log() {\n        console.log(this.#name);\n    }\n}</code></pre> <h3 id="private-fields">Private Fields</h3> <p><code>\\#some_variable</code> vs <code>private some_variable</code></p> <ul> <li><code>private some_variable</code>: when someone sets a debugging breakpoint within the class, they can still see <code>some_variable</code> as a memeber field of this class.</li> <li><code>\\#some_variable</code>: when some sets a debugging breakpoint within the class, they <em>cannot</em> see <code>\\#some_variable</code>.</li> <li>Prefixing a member variable with <code>\\#</code> turns the member variable <em>truly</em> private.</li> <li>Child classes will not have access or know this member variable, it is not inherited.</li> </ul> <h2 id="latest-typescript-features">Latest TypeScript Features</h2> <h3 id="inference-class-field-types">Inference Class Field Types</h3> <p>Types for class fields that are assigned in constructor are inferred, and no longer need an explicit type declaration.</p> <h3 id="tuple-types">Tuple Types</h3> <pre><code class="language-ts">type Foo&lt;T extends any[]&gt; = [boolean, ...T, boolean];</code></pre> <h4 id="labeled-tuple-types">Labeled Tuple Types</h4> <pre><code class="language-ts">type Address = [\n    streetNumber: number,\n    city: string,\n    state: string,\n    postalCode: number,\n];\n\nfunction printAddress(...address: Address) {\n    // ...\n}</code></pre> <ul> <li>The IDE displays the labeled types, it makes the function signature much easier to understand.</li> <li>If you are serializing data (e.g., getting API responses), this saves a lot of space.<ul> <li>Imagine you are getting 50KB of JSON data from an API call. The tuple representation is a more compact way to represent the same data than an object.</li> </ul> </li> </ul> <h3 id="type-aliases-and-interfaces">Type Aliases and Interfaces</h3> <pre><code class="language-ts">// Old way of defining a JSON array\ntype JSONValue = string|number|boolean|null|JSONArray|JSONObject;\ninterface JSONObject = {\n    [k: string]: JSONValue;\n}\ninterface JSONArray extends Array&lt;JSONValue&gt; {}</code></pre> <h4 id="recursive-type-aliases">Recursive Type Aliases</h4> <pre><code class="language-ts">type JSONValue =\n    | string\n    | number\n    | boolean\n    | null\n    | JSONValue[]\n    | {\\[k: string\\]: JSONValue;};</code></pre> <h3 id="template-typed-literals">Template Typed Literals</h3> <pre><code class="language-ts">type Corner = \\`${\\\\&quot;top\\\\&quot; | \\\\&quot;bottom\\\\&quot;}-${\\\\&quot;left\\\\&quot; | \\\\&quot;right\\\\&quot;}\\`;</code></pre> <p>The type <code>Corner</code> can only have values: &quot;top-left&quot;, &quot;top-right&quot;, &quot;bottom-left&quot; and &quot;bottom-right&quot;.</p> <h3 id="error-and-assertion-handling">Error and Assertion Handling</h3> <h4 id="ts-expect-error">@ts-expect-error</h4> <ul> <li><code>// @ts-expect-error</code> suppresses the type errors.<pre><code class="language-ts">// @ts-expect-error\nconst num: number = \\\\&quot;hello\\\\&quot;;</code></pre> </li> <li><code>// @ts-ignore</code> suppresses the type errors.<pre><code class="language-ts">// @ts-ignore\nconst num: number = \\\\&quot;hello\\\\&quot;;</code></pre> </li> <li>ts-ignore vs. ts-expect-error<ul> <li>Always use ts-expect-error over ts-ignore</li> <li>If later on the type is corrected from string to number, ts-expect-error will show error: Unused @ts-expect-error directive.</li> <li>@ts-expect-error: the following line of code has error but I choose to suppress the error. This brings attention to the developer that the bypass is no longer necessary.</li> <li>@ts-ignore: if the following line of code has any type of errors, supporess it. The code can perfectly be fine and have no errors.</li> </ul> </li> </ul> <h4 id="type-unknown-on-catch-clause">Type <code>unknown</code> on <code>catch</code> Clause</h4> <ul> <li>Big improvement over <code>any</code></li> <li>Forces you to deal with <code>instanceof Error</code> properly<pre><code class="language-ts">function somethingRisky() {}\ntry {\n  somethingRisky();\n} catch(error: unknown) {\n  if (error instanceof Error) {\n      console.log(error.stack);\n  } else {\n      console.log(error);\n  }\n}</code></pre> </li> </ul> <h4 id="assertion-functions">Assertion Functions</h4> <pre><code class="language-ts">function isError(error: any): error is Error {\n    return error instanceof Error;\n}</code></pre> <ul> <li>The return type of the function above is not only a boolean but an indication of whether the value is of type <code>Error</code>.</li> </ul> <p>With the new assertion function feature:</p> <pre><code class="language-ts">function assertIsError(error: any): asserts error is Error {\n    if (!(error instanceof Error)) {\n        throw new Error(`Not an error: ${error}`);\n    }\n}\n\ntry {\n    somethingRisky();\n} catch (error: unknown) {\n    assertIsError(error);\n    console.log(error.stack);\n}</code></pre> <h4 id="import-types">Import Types</h4> <pre><code class="language-ts">import type {someFunction} from \\\\&quot;./util\\\\&quot;;</code></pre> <p>The code above only imports the type information of <code>someFunction</code>.</p> <p>If you are using module bundlers like WebPack, you know that WebPack analyzes the code you import as a mechanism to split your code (so that you don&#39;t need to send code you don&#39;t need on page load).</p> <p>Type imports is a way that we can refer to a type in a module without actually importing the entire function, this will not trigger additional code to be included in your bundle.</p> '},function(e,t){e.exports='<h1 id="app-vs-library-concerns">App vs. Library Concerns</h1> <h2 id="if-you-are-using-typescript">If you are using TypeScript</h2> <ul> <li>Improve developer experience, including in-editor docs for your dependencies</li> <li>Reduce needs to drill into files to understand how adjacent code works</li> <li>TypeScript allows you to encode more information into your source files</li> <li>Easier to catch incomplete refactoring</li> </ul> <h2 id="app-specific-concerns">App-specific concerns</h2> <ul> <li>More richness when working with data.</li> <li>Better encapsulation tools (e.g., <code>private</code>, <code>protected</code>, <code>public</code>), to facilitate maintaining lazy loading boundaries (e.g., import types only).</li> <li>Improve major version upgrades story for typed libraries.</li> </ul> <h2 id="library-specific-concerns">Library-specific concerns</h2> <ul> <li>Create and maintain a deliberate public API surface while still being able to create a private API surface to use between modules or components.</li> <li>API documentations</li> </ul> '},function(e,t,n){"use strict";n.r(t);var a=n(0),o=n.n(a),i=n(15),r=n.n(i),s=(n(22),n(10)),l=n(1),c=n(8),u=Object(a.memo)((function(e){var t=e.menuConfig,n=e.onClick,a=e.parent,i=e.showSubMenu;return o.a.createElement("div",{key:t.route,className:"".concat(a?"sub-menu-item":"menu-item-container"," ").concat(i?"expanded":"")},o.a.createElement("div",{key:"display-name",className:"menu-item-display-name","data-menuname":t.displayName,"data-route":t.route,onClick:n},o.a.createElement("div",{key:"text"},t.displayName),i&&o.a.createElement("div",{key:"arrow",className:"selected-arrow"},"\u21a0")),i&&t.subMenu&&o.a.createElement(p,{menus:t.subMenu,parent:t}))})),d=Object(a.memo)((function(e){var t=e.expandedMenu,n=e.menus,a=e.parent,i=e.onMenuItemClick;return o.a.createElement("div",{key:"menu-container",className:a?"sub-menu-container":"menu-container"},n.map((function(e){return o.a.createElement(u,{key:e.route,menuConfig:e,parent:a,showSubMenu:e.displayName===t,onClick:i})})))})),p=(n(23),function(e){var t=e.menus,n=e.parent,i=Object(l.f)(),r=Object(a.useState)(""),s=Object(c.a)(r,2),u=s[0],p=s[1],h=Object(a.useCallback)((function(e){var t,a,o=null===e||void 0===e||null===(t=e.currentTarget)||void 0===t?void 0:t.getAttribute("data-menuname");if(u!==o){if(p(o||""),null===e||void 0===e||null===(a=e.currentTarget)||void 0===a?void 0:a.getAttribute("data-route")){var r=n?"/".concat(n.route,"/"):"/",s=e.currentTarget.getAttribute("data-route")||"",l="".concat(r).concat(s);i.push(l)}}else p("")}),[u,p]);return o.a.createElement(d,{menus:t,onMenuItemClick:h,expandedMenu:u,parent:n})}),h=function(){return o.a.createElement("section",null,o.a.createElement("h1",null,"Algorithm Overview"))},m=(n(29),[{displayName:"Basics",route:"basics"},{displayName:"Rx JS",route:"rx-js"}]),g=[{displayName:"Algorithms",route:"interview-prep/algorithms",subMenu:[{displayName:"Graph",route:"graph"},{displayName:"Sorting",route:"sorting"},{displayName:"Binary Search",route:"binary-search"}]},{displayName:"Data structures",route:"interview-prep/data-structures",subMenu:[{displayName:"Priority Queue",route:"priority-queue"},{displayName:"Linked List",route:"linked-list"},{displayName:"Hash Table",route:"hash-table"},{displayName:"Map",route:"map"}]},{displayName:"Async JS",route:"interview-prep/async-js",subMenu:m},{displayName:"JS Fundamentals",route:"interview-prep/async-js",subMenu:m},{displayName:"Web Basics",route:"interview-prep/web-fundamentals",subMenu:[{displayName:"Event loop",route:"event-loop"}]},{displayName:"Effective Java",route:"interview-prep/effective-java",subMenu:[{displayName:"Exceptions",route:"exceptions"}]},{displayName:"TypeScript",route:"interview-prep/typescript",subMenu:[{displayName:"Overview",route:"overview"},{displayName:"Latest TypeScript Features",route:"latest-typescript-features"},{displayName:"App vs. Library Concerns",route:"app-vs-library-concerns"}]}],y=n(4),f=function(e){var t=e.children,n=e.description,i=e.title,r=Object(a.useState)(!0),s=Object(c.a)(r,2),l=s[0],u=s[1],d=Object(a.useCallback)((function(){u(!l)}),[l]);return o.a.createElement("div",null,o.a.createElement("div",{onClick:d,style:{backgroundColor:"#EEEEEE",padding:l?"1.5rem 2rem 0 2rem":"1.5rem 2rem",cursor:"pointer"}},o.a.createElement("div",{style:{display:"inline-block",paddingRight:"1rem",verticalAlign:"middle",fontSize:"20px"}},l?"-":"+"),o.a.createElement("div",{style:{display:"inline-block",verticalAlign:"middle"}},o.a.createElement("div",{style:{fontSize:"25px"}},i),n&&o.a.createElement("div",{style:{fontSize:"12px"}},n))),l&&o.a.createElement("div",{style:{backgroundColor:"#EEEEEE"}},t))},b=n(30),v=function(){return o.a.createElement("article",null,o.a.createElement(f,{description:"Callback-based vs. promise-based vs. observable-based asynchronous JS",title:"Thinking Reactively"},o.a.createElement("div",{style:{padding:"1rem 2rem"}},o.a.createElement(y.a,null,b))))},w=function(){return o.a.createElement("article",null,o.a.createElement(v,null))},E=n(31),k=function(){return o.a.createElement("article",null,o.a.createElement(f,{description:"Use exceptions only for exceptional conditions",title:"When to use exceptions"},o.a.createElement("div",{style:{padding:"1rem 2rem"}},o.a.createElement(y.a,null,E))))},x=function(){return o.a.createElement("article",null,o.a.createElement(k,null))},N=n(32),S=function(){return o.a.createElement("article",null,o.a.createElement("div",{style:{padding:"1rem 2rem"}},o.a.createElement(y.a,null,N)))},I=n(33),T=function(){return o.a.createElement("article",null,o.a.createElement("div",{style:{padding:"1rem 2rem"}},o.a.createElement(y.a,null,I)))},A=n(34),J=function(){return o.a.createElement("article",null,o.a.createElement("div",{style:{padding:"1rem 2rem"}},o.a.createElement(y.a,null,A)))};var O=function(){return o.a.createElement(s.a,null,o.a.createElement("div",{className:"app"},o.a.createElement(p,{menus:g}),o.a.createElement("div",{className:"markdown-container"},o.a.createElement(l.c,null,o.a.createElement(l.a,{exact:!0,path:"/interview-prep/algorithms",component:h}),o.a.createElement(l.a,{exact:!0,path:"/interview-prep/async-js/rx-js",component:w}),o.a.createElement(l.a,{exact:!0,path:"/interview-prep/effective-java/exceptions",component:x}),o.a.createElement(l.a,{exact:!0,path:"/interview-prep/typescript",component:S}),o.a.createElement(l.a,{exact:!0,path:"/interview-prep/typescript/overview",component:S}),o.a.createElement(l.a,{exact:!0,path:"/interview-prep/typescript/latest-typescript-features",component:T}),o.a.createElement(l.a,{exact:!0,path:"/interview-prep/typescript/app-vs-library-concerns",component:J})))))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(o.a.createElement(o.a.StrictMode,null,o.a.createElement(O,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))}],[[17,1,2]]]);
//# sourceMappingURL=main.6e9f08e4.chunk.js.map