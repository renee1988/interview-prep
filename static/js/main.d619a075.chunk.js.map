{"version":3,"sources":["async-js/rx-js/markdowns/basics/1-building-blocks.md","async-js/rx-js/markdowns/basics/2-observables.md","async-js/rx-js/markdowns/thinking-reactive/sync-vs-async.md","async-js/rx-js/markdowns/thinking-reactive/promise-doodle.jpg","effective-java/exceptions/markdowns/70-checked-exceptions.md","effective-java/exceptions/markdowns/72-standard-exceptions.md","effective-java/exceptions/markdowns/71-unnecessary-checked-exceptions.md","effective-java/exceptions/markdowns/69-when-to-use-exceptions.md","js-fundamentals/event-loop/markdowns/event-loop.md","typescript/1-overview/markdowns/overview.md","typescript/2-latest-typescript-features/markdowns/latest-typescript-features.md","typescript/3-app-vs-library-concerns/markdowns/app-vs-library-concerns.md","typescript/4-create-project-from-scratch/markdowns/create-project-from-scratch.md","typescript/5-declaration-files/markdowns/declaration-files.md","effective-java/objects/markdowns/1-static-factory.md","effective-java/objects/markdowns/2-builder.md","effective-java/objects/markdowns/5-dependency-injection.md","effective-java/classes/markdowns/18-favor-composition.md","effective-java/classes/markdowns/17-minimize-mutability.md","async-js/basics/markdowns/basics.md","layout/menu/components/menu-item.tsx","layout/menu/components/menu.tsx","layout/menu/containers/menu.tsx","algorithms/overview.tsx","layout/menu/constants.ts","components/expandable-section.tsx","async-js/rx-js/basics.tsx","async-js/rx-js/thinking-reactive.tsx","async-js/rx-js/index.tsx","effective-java/exceptions/checked-exceptions.tsx","effective-java/exceptions/reuse-standard-exceptions.tsx","effective-java/exceptions/unnecessary-checked-exceptions.tsx","effective-java/exceptions/when-to-use-exceptions.tsx","effective-java/exceptions/index.tsx","js-fundamentals/event-loop/index.tsx","typescript/1-overview/index.tsx","typescript/2-latest-typescript-features/index.tsx","typescript/3-app-vs-library-concerns/index.tsx","typescript/4-create-project-from-scratch/index.tsx","typescript/5-declaration-files/index.tsx","effective-java/objects/static-factory.tsx","effective-java/objects/builder.tsx","effective-java/objects/dependency-injection.tsx","effective-java/objects/index.tsx","effective-java/classes/favor-composition.tsx","effective-java/classes/minimize-mutability.tsx","effective-java/classes/index.tsx","async-js/basics/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","code","___HTML_LOADER_GET_SOURCE_FROM_IMPORT___","MenuItem","memo","menuConfig","onClick","parent","showSubMenu","key","route","className","data-menuname","displayName","data-route","subMenu","menus","Menu","expandedMenu","onMenuItemClick","map","history","useHistory","useState","setExpandedMenu","useCallback","e","menuDisplayName","currentTarget","getAttribute","parentRoute","currentRoute","push","AlgorithmOverview","MENUS","ExpandableSection","children","description","title","expanded","setExpanded","toggleExpand","style","backgroundColor","padding","cursor","display","paddingRight","verticalAlign","fontSize","marginTop","buildingBlocksMd","require","observablesMd","Basics","thinkingReactivelyMd","ThinkingReactive","RxJs","rowGap","checkedExceptionsMd","CheckedExceptions","standardExceptionsMd","ReuseStandardExceptions","unnecessaryCheckedExceptionsMd","UnnecessaryCheckedExceptions","whenToUseExceptionsMd","WhenToUseExceptions","Exceptions","eventLoopMd","EventLoop","overviewMd","Overview","latestTypescriptFeaturesMd","LatestTypescriptFeatures","appVsLibraryConcernsMd","AppVsLibraryConcerns","createProjectFromScratchMd","CreateProjectFromScratch","declarationFilesMd","DeclarationFiles","staticFactoryMd","StaticFactory","builderMd","Builder","dependencyInjectionMd","DependencyInjection","ObjectCreationAndDestruction","favorCompositionMd","FavorComposition","minimizeMutabilitysMd","MinimizeMutability","ClassesAndInterfaces","basicsMd","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d619a075.chunk.js","sourcesContent":["// Module\nvar code = \"<h2 id=\\\"building-blocks\\\">Building Blocks</h2> <p>Async seems hard:</p> <ul> <li>Race conditions: you can start two actions, they are running concurrently, expecting one will be finished before the other, or <em>enforce</em> it to finish before the other.</li> <li>Memory leaks: attaching a DOM event but forgetting to detach it from the DOM.</li> <li>Complex state machines</li> <li>Uncaught async errors</li> <li>Callback hell</li> <li>Code is hard to understand and debug in general<pre><code class=\\\"language-javascript\\\">function play(movieId, cancelButton, callback) {\\n  // movieTicket and playErrors are your \\\\\\\\&quot;states\\\\\\\\&quot; to\\n  // track and manage.\\n  var movieTicket, playError;\\n  var tryFinish = function() {\\n      if (playError) {\\n          callback(null, playError);\\n      } else if (movieTicket &amp;&amp; player.initialized) {\\n          callback(null, ticket);\\n      }\\n  };\\n  // Here is a bug: the click event is not detached anywhere.\\n  cancelButton.addEvent(\\\\\\\\&quot;click\\\\\\\\&quot;, function() {\\n      playError = &quot;cancelled&quot;;\\n  });\\n  if (!player.initialized) {\\n      player.init(function(error) {\\n          playerError = error;\\n          tryFinish();\\n      });\\n  }\\n  authorizeMovie(function(error, ticket)) {\\n      playError = error;\\n      movieTicket = ticket;\\n      tryFinish();\\n  });\\n}</code></pre> </li> </ul> <h3 id=\\\"functions\\\">Functions</h3> <p>Async Programming without <em>loops</em>. You cannot repeat asynchronous function with a loop.</p> <h4 id=\\\"foreach\\\"><code>forEach</code></h4> <p><code>forEach</code> takes in a function and applies the function to each of the items in an array.</p> <pre><code class=\\\"language-javascript\\\">[1, 2, 3].forEach(x =&gt; console.log(x));</code></pre> <h4 id=\\\"map\\\"><code>map</code></h4> <p><code>map</code> takes in a function and applies it to every item in an array creating a new value and put it into a new array. <strong><code>map</code> does not mutate the original array.</strong></p> <pre><code class=\\\"language-javascript\\\">[1, 2, 3].map(x =&gt; x + 1);</code></pre> <h4 id=\\\"filter\\\"><code>filter</code></h4> <p><code>filter</code> takes in a test function and applies it to every item in an array, only the items that pass the test would make it into the new array <code>filter</code> returns.</p> <pre><code class=\\\"language-javascript\\\">[1, 2, 3].filter(x =&gt; x &gt; 1);</code></pre> <h4 id=\\\"concatall\\\"><code>concatAll</code></h4> <p><code>concatAll</code> takes in a multi-dimensional array and flattens it into a single-dimensional array.</p> <pre><code class=\\\"language-javascript\\\">[[1], [2, 3], [], [4]].concatAll();</code></pre> <p>Note: <code>concatAll</code> is not available in native JavaScript.</p> <h4 id=\\\"example-mouse-drag-collection\\\">Example: Mouse Drag Collection</h4> <pre><code class=\\\"language-javascript\\\">const getElementDrags = elmt =&gt; elmt.mouseDowns\\n    .map(mouseDown =&gt; (\\n        // Think of takeUntil as filter, it maps a mouseDown\\n        // event to a mouseMove until a mouseUp event happens.\\n        document.mouseMoves.takeUntil(document.mouseUps)\\n    ))\\n    .concatAll();\\ngetElementDrags(image).forEach(pos =&gt; image.position = pos);</code></pre> <h3 id=\\\"events\\\">Events</h3> <p><strong>Events and Arrays are both collections.</strong></p> <p>Then why cannot we program them the same way?</p> <h4 id=\\\"iterator-vs-observer\\\">Iterator vs. Observer</h4> <h5 id=\\\"how-does-iterator-work\\\">How does iterator work?</h5> <p>There are a PRODUCER and a CONSUMER. The consumer requests/<strong>pulls</strong> information one at a time from the producer until the producer has no item left.</p> <pre><code class=\\\"language-javascript\\\">const iterator = [1, 2, 3].iterator();\\n// Interface of an iterator\\nconsole.log(iterator.next());\\n// print: {value: 1, done: false}</code></pre> <p>Note: <code>map</code>, <code>filter</code> and <code>concatAll</code> can be implemented using an iterator.</p> <h4 id=\\\"observables--observers\\\">Observables &amp; Observers</h4> <p>The main usage of this deisgn pattern is building user interfaces. If you have a change to your data model, how do you communicate it with your views and visa versa?</p> <pre><code class=\\\"language-javascript\\\">document.addEventListener(\\\\\\\\&quot;mousemove\\\\\\\\&quot;, function(event) {\\n    console.log(event);\\n});</code></pre> <p>The best example of this design pattern is <strong>DOM events</strong>: you can add a function to a data producer and instead of the consumer pulling the data out of the producer, the producer <strong>pushes</strong> the data to the consumers.</p> <h4 id=\\\"summary\\\">Summary</h4> <ul> <li>Iterators and observables both <strong>progressively</strong> send information to the consumers.</li> <li>Iterators and observables are symmetrical, except there is no way defined for Observable design pattern to indicate the data stream ends or errors out.<ul> <li>in JavaScript world, we do not just handle DOM events, we handle data streams that end all the time.</li> </ul> </li> </ul> <p>We have defined so many Push APIs that helps handle or inidicate the completion/error of the data stream:</p> <ul> <li>Websockets</li> <li>Server-sent events</li> <li>Node streams</li> <li>...</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<hr> <h2 id=\\\"observerables--observers\\\">Observerables &amp; Observers</h2> <p><strong>Observable === Collection + Time</strong></p> <p>An Observable is a collection of which items are arrives over time.</p> <h3 id=\\\"why-is-observable-so-powerful\\\">Why is Observable so powerful?</h3> <p>Observables can model:</p> <ul> <li>Events</li> <li>Async server requests</li> <li>Animations</li> <li>Ported to many languages<ul> <li>C</li> <li>.NET</li> <li>JavaScript</li> <li>Java (Netflix)</li> <li>Objective-C</li> </ul> </li> </ul> \";\n// Exports\nmodule.exports = code;","// Imports\nvar ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ = require(\"../../../../../node_modules/html-loader/dist/runtime/getUrl.js\");\nvar ___HTML_LOADER_IMPORT_0___ = require(\"./promise-doodle.jpg\");\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar code = \"<h3 id=\\\"synchronous-vs-asynchronous-computing\\\">Synchronous vs. Asynchronous computing</h3> <p>The main difference between synchronous and asynchronous computing/code is <strong>latency/waitime</strong>.</p> <h4 id=\\\"blocking-code\\\">Blocking code</h4> <p>Synchronous execution occurs when each block of code must wait for the previous block to complete before running.</p> <ul> <li>Easy to implement</li> <li>Easy to understand</li> <li>Easy to debug</li> </ul> <p>JavaScript is a single-threaded language. Writing blocking code creates awful user experience.</p> <ul> <li>waiting for AJAX call to return</li> <li>waiting for database operations to complete The entire application would pause/sit idle waiting for the data to be loaded and wasting precious computing cycles that could be executing other code.</li> </ul> <p>Other than horrible user experience, browsers may deem your scripts unresponsive after a certain period of inactivity and terminate them.</p> <h4 id=\\\"non-blocking-code-with-callback-functions\\\">Non-blocking code with callback functions</h4> <img src=\\\"https://renee1988.github.io/panda-learning-cs//images/rx-js-cb.png\\\"> <p>As a single-threaded language, JavaScript provides callback functions to tackle the problem of blocking for long-running operations to complete by allowing you to provide a handler function that the JavaScript runtime will invoke once the data is ready to use.</p> <ul> <li>JavaScript callback functions create <strong>inversion of control</strong> where functions call the application back insetad of the other way around.</li> <li>Inversion of control refers to the way in which certain parts of your code receive the flow of control back from teh runtime system.</li> </ul> <p>Callback functions allow you to invoke code asynchronously, so that the application can return control to you later. This allows the program to continue with any other task in the meantime.</p> <h4 id=\\\"time-and-space\\\">Time and space</h4> <ul> <li>Synchronous functions allows us to reason directly about the state of the application</li> <li>Asynchronous code forces us to reason about its <strong>future</strong> state</li> </ul> <p>For example, if you have three functions performing three independent tasks, then executing them in any order wouldn&#39;t matter. However, if they are sharing some global state, their behavior would be determined by the order in which they were called -&gt; <strong><em>Side Effect</em></strong></p> <h4 id=\\\"callback-or-rxjs\\\">Callback or RxJS?</h4> <ul> <li>If your script issues a single remote HTTP request, RxJS is an overkill, callbacks remain the perfert solution.</li> <li>RxJS begins to shine when implementing state machines of advanced complexity such as:<ul> <li>dynamic UIs: rich UI made up of several widgets on the page that interact with each other</li> <li>service orchestration: orchestrate the execution of several business process that consumes several microservice, data mashups</li> </ul> </li> </ul> <pre><code class=\\\"language-javascript\\\">// Example: callback hell\\najax(\\n    &#39;&lt;host1&gt;/items&#39;,\\n    items =&gt; {\\n        items.forEach(item =&gt; {\\n            ajax(`&lt;host2&gt;/items/${items.getId()}/info`, dataInfo =&gt; {\\n                ajax(`&lt;host3&gt;/files/${dataInfo.files}`, processFiles)\\n            });\\n        });\\n    },\\n);</code></pre> <h4 id=\\\"event-emitters\\\">Event Emitters</h4> <p>Event emitter is a popular mechanism for asynchronous event-based architecture.</p> <ul> <li><strong>DOM</strong> is an event emitter.</li> <li><code>EventEmitter</code> class in NodeJs is used to implement APIs:<ul> <li>WebSocket I/O</li> <li>File reading &amp; writing</li> </ul> </li> </ul> <p>Subscribing to an event emitter is done through the <code>addListener()</code> method, which allows you to provide the callback that will be called when an event of interest is fired.</p> <p>Unfortunately as you can tell, event emitters have all the same problems associated with using callbacks to handle emitted data coming from multiple composed resources.</p> <h4 id=\\\"promises\\\">Promises</h4> <p><code>Promises</code> represent any asynchronous computatation that is expected to complete in the <strong>future</strong>. You can chain together actions with future values to form a <strong>continuation</strong> (i.e., callbacks).</p> <p>A <code>Promise</code> is a data type that wraps an asynchronous or long-running operation, <strong>a future value</strong>, with the the ability for you to subscribe to its result or its error.</p> <ul> <li>One cannot alter the vlaue of a <code>Promise</code> once it has been executed, the value is <strong>immutable</strong>.</li> </ul> <img style=\\\"width:80%\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\"> <h4 id=\\\"what-problems-are-rxjs-solving\\\">What problems are RxJS solving?</h4> <p>RxJs is combining both functional and reactive programming paradigms:</p> <ul> <li><code>for</code> and <code>while</code> loops are not async aware, meaning they do not have knowledge of wait time or latency between iterations.</li> <li>Nested callbacks (callback hell) are hard to reason about.</li> <li>Error handling become convoluted when you begin to nesting try/catch blocks within each callback.</li> <li>Excessive use of closure -&gt; side effects -&gt; bad.</li> <li>It is hard to determine when to cancel a long-running operation.</li> <li>It is hard to deal with throttle and debounce in the traditional way.</li> <li>As the UI becomes larger and richer, memory management becomes harder (memory leaks and growth of browser process become noticable).</li> </ul> <p>The goal is to abstract the notion of time/latency away from our code and model our async code using a linear sequence of steps <strong>through which data can flow over time</strong>.</p> <ul> <li>Works with both synchronous and asynchronous code</li> <li>Handles errors</li> <li>Discourage side effects</li> <li>Scales out from one to a stream of events</li> </ul> <h3 id=\\\"thinking-in-streams\\\">Thinking in streams</h3> <p>Definition of a <strong>stream</strong> traditionally is an abstract object related to I/O operations such as reading a file, reading a socket or requesting data from an HTTP server.</p> <ul> <li>Node has readable, writable and duplex streams.</li> </ul> <p>Defintion of a <strong>stream</strong> in the Reactive Programming world is expanded to <em>any data source that can be consumed</em>.</p> <h4 id=\\\"propogation-of-change\\\">Propogation of Change</h4> <pre><code class=\\\"language-javascript\\\">let a = 20;\\nlet b = 22;\\nlet c = a + b; // c = 42\\na = 100;\\n// c is still 42</code></pre> <p>The code above has no <strong>propogation of change</strong>.</p> <pre><code class=\\\"language-javascript\\\">// Create A$ and B$, two data streams.\\nconst A$ = [20];\\nconst B$ = [22];\\nconst C$ = A$.concat(B$).reduce(add);\\n// C$ is a stream with values: [42]\\nA$.push(100);\\n// Now what values does C$ have?</code></pre> <p>If A$ receives a new value, this state is pushed through any streams that it&#39;s a part of.</p> <p><strong>Reactive programming is oriented around data flows and propogation.</strong></p> <p>In the example above, C$ is an always-on varaible that <em>reacts</em> to any change and causes actions to ripple through it when any constituent part changes.</p> \";\n// Exports\nmodule.exports = code;","module.exports = __webpack_public_path__ + \"static/media/promise-doodle.e82778df.jpg\";","// Module\nvar code = \"<p>There are three kinds of throwables:</p> <ul> <li>checked exceptions</li> <li>runtime exceptions</li> <li>errors</li> </ul> <h2 id=\\\"guidance-on-when-to-apply-different-types-of-throwables\\\">Guidance on when to apply different types of throwables</h2> <p><em>Use checked exceptions for conditions from which the called can reasonably be expected to recover.</em></p> <p>By throwing a checked exception, you force the caller to handle the exception in a <code>catch</code> clause or to propagate it outward.</p> <pre><code class=\\\"language-java\\\">public class SomeClass {\\n  // ...\\n  // ...\\n  public void mightThrow(...) throws SomeException {\\n      // ...\\n  }\\n}</code></pre> <p>With a checked exception, the API designer presents a mandate to recover from the condition.</p> <ul> <li>User can choose to disregard the mandate by catching the exception and ignoring it, which is usually <em>a bad idea</em>.</li> </ul> <p>Since checked exceptions indicate recoverable conditions, it is especiallly important for them to provide methods that furnish information to help the caller recover from the exceptional condition.</p> <p>Example:</p> <p>A checked exception is thrown when an attempt to make a purchase with a gift card fails due to insufficient funds.</p> <p>In this case, the exception should provide an accessor method to query the amount of the shortfall.</p> <p>There are two kinds of unchecked throwables:</p> <ul> <li>runtime exceptions</li> <li>errors They behave the same, both are throwables that needn&#39;t and shouldn&#39;t be caught.</li> <li>If a program throws an unchecked exception or an error, it is the case that recovery is impossible and continued execution would do more harm than good.</li> <li>If a program does not catch such a throwable, it will cause the current thread to halt with an appropriate error message.</li> </ul> <p><em>Use runtime exceptions to indicate programming errors.</em></p> <p>It is not always clear whether you are dealing with a recoverable conditions or a programming error (e.g., resource exhaustion).</p> <p>If it isn&#39;t clear whether recovery is possible, you are better off using an unchecked exception.</p> <p><em>Never implement any new <code>Error</code> subclasses.</em></p> <ul> <li>Errors are reserved for us by the JVM to indicate resource deficiencies, invariant failures or other conditions that make it impossible to continue execution.</li> </ul> <p><em>All of the unchecked throwables implemented should subclass <code>RuntimeException</code>.</em></p> <p>It is possible to define a throwable that is not a subclass of <code>Exception</code>, <code>RuntimeException</code> or <code>Error</code>. They behave as ordinary checked exceptions (subclasses of <code>Exception</code> but not <code>RuntimeException</code>) -&gt; Never implement it -&gt; confuse the consumers of your API.</p> <h2 id=\\\"summary\\\">Summary</h2> <ul> <li>Throw checked exceptions for recoverable conditions.</li> <li>Trhow unchecked exceptions for programming errors.</li> <li>When in doubt, throw unchecked exceptions.</li> <li>Do not define any throwables that are neither checked exception nor runtime exceptions.</li> <li>Provide methods on your checked exceptions to aid in recovery.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>Expert programmers strive and achieve a high degree of <strong>code reuse</strong>. Exceptions are no exception to the rule that code reuse is a good thing.</p> <h2 id=\\\"benefit-of-resuing-standard-exceptions\\\">Benefit of resuing standard exceptions</h2> <p>Reusing standard exceptions:</p> <ul> <li>makes your API easy to learn and use since it matches the established conventions.</li> <li>programs using your API are easier to read and understand since they are not cluttered with unfamiliar exceptions.</li> <li>fewer exception classes means a smaller memory footprint and less time spent loading classes.</li> </ul> <h2 id=\\\"types-of-standard-exceptions\\\">Types of standard exceptions</h2> <p>Every errorneous method invocation boils down to an illegal argument or state.</p> <h3 id=\\\"illegalarugmentexception\\\"><code>IllegalArugmentException</code></h3> <p><code>IllegalArgumentException</code> is the exception to throw when the caller passes in an argument whose vlaue is <strong>inapproporiate</strong>.</p> <p>Example:</p> <pre><code class=\\\"language-java\\\">public SomeClass {\\n    // ...\\n    public static divide(int divider) {\\n        if (divider == 0) {\\n            throw new IllegalArgumentException(&quot;Divider cannot be zero.&quot;);\\n        }\\n        // ...\\n    }\\n}</code></pre> <h3 id=\\\"illegalstateexception\\\"><code>IllegalStateException</code></h3> <p><code>IllegalStateException</code> is thrown if the invocation is illegal because of the state of the receiving object.</p> <p>Example: <code>IllegalStateException</code> is an exception to throw if the caller attempted to use some object before it had been properly initialized.</p> <h3 id=\\\"concurrentmodificationexception\\\"><code>ConcurrentModificationException</code></h3> <p><code>ConcurrentModificationException</code> is thrown if an object that was designed for use by a single thread (or with external synchronization) detects that it is being modified concurrently.</p> <h2 id=\\\"some-best-pratices\\\">Some best pratices</h2> <p><strong>Do not reuse <code>Exception</code>, <code>RuntimeException</code>, <code>Throwable</code> or <code>Error</code> directly.</strong></p> <ul> <li>Treat these classes as <code>abstract</code></li> <li>You cannot rielably test for these exceptions because they are superclasses of other exceptions that a method may throw.</li> </ul> <p><strong>Trhow <code>IllegalStateException</code> if no argument values would have worked, otherwise throw <code>IllegalArgumentException</code>.</strong></p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>If a method throws checked exceptions, the code that invokes it must handle them in one or more catch blocks, or declare that it throws them and let them propagate outward.</p> <p><strong>Checked exceptions put a burden on the user of the API.</strong></p> <p><strong>Methods throwing checked exceptions cannot be used directly in streams.</strong></p> <p>Use checked exceptions if the exceptional condition cannot be prevented by proper use of the API <em>and</em> the programmer using the API can take some useful action once confronted with the exception.</p> <p>Otherwise use unchecked exceptions.</p> <h2 id=\\\"how-to-eliminate-checked-exceptions\\\">How to eliminate checked exceptions?</h2> <ul> <li><p>The easist way to eliminate checked exceptions is to <strong>return an optional of the desired result type</strong>. The shortcoming of this solution is that you can&#39;t provide additional details on why it fails perform the desired computation.</p> </li> <li><p>You can always turn a checked exception into an unchecked exception. </p> <pre><code class=\\\"language-java\\\">// Invocation with checked exception\\ntry {\\n  // ...\\n} catch(SomeCheckedException e) {\\n  // ...\\n}</code></pre> <pre><code class=\\\"language-java\\\">// Invocation with state-testing method and unchecked exception\\nif (someConditionCheck) {\\n  fn();\\n} else {\\n  // Handle exceptional condition\\n}\\n// Alternative: if the programmer knows the call will succeed, or\\n// is content to let the thread terminate if it fails:\\nfn();</code></pre> </li> </ul> <h2 id=\\\"summary\\\">Summary</h2> <ul> <li>If callers won&#39;t be able to recover from failures, throw unchecked exceptions.</li> <li>If recovery may be possible and you want to force the callers to handle exceptional conditions:<ul> <li>consider returning an optional first</li> <li>only if this would not provide sufficient information on the failure, throw checked exception.</li> </ul> </li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"use-exceptions-only-for-exceptional-conditions\\\">Use exceptions only for exceptional conditions</h1> <pre><code class=\\\"language-java\\\">try {\\n    int i = 0;\\n    while(true) {\\n        range[i++].climb();\\n    }\\n} catch(ArrayIndexOutOfBoundsException e) {}</code></pre> <p>The inifinite loop terminates by throwing, catching and ignoring an <code>ArrayIndexOutOfBoundsException</code> when it attempts to access the first array element outside the bounds of the array.</p> <p>Why would someone write the code above?</p> <p>Reasoning: VM checks the bounds of all array accesses, the normal loop termination test -- hidden by the compiler but still present in the for-each loop -- is redundant and should be avoided.</p> <p>What is wrong with the reasoning above?</p> <ul> <li>Exceptions are designed for exceptional circumstances, there is little incetive for JVM implementors to make them as fast as explicit tests.</li> <li>Placing code inside a try-catch block inhibits certain optimizations that JVM implementations might otherwise perform.</li> <li>The standard idiom for looping through an array doesn&#39;t necessarily result in redundant checks. Many JVM implementations optimize them away.</li> <li>In fact, exception-based idiom is far slower than the standard one.</li> </ul> <p>What else is wrong with the code above?</p> <ul> <li>It is not guaranteed to work. If there is a bug in the loop, the use of exceptions for <em>flow control</em> can mask the bug.<ul> <li>If a reasonable loop idiom is used, the bug would generate an uncaught exception, resulting in immediate thread termination with a full stack trace.</li> <li>If the exception-based loop idiom is used, the bug-related exception would be caught and misinterpreted as a normal loop termination.</li> </ul> </li> </ul> <p><strong>Exceptions are to be used only for exceptional conditions, they should never be used for ordinary control flow.</strong></p> <p>A class with a &quot;state-dependent&quot; method that can be invoked only under certain unpredictable conditions should generally have a separate &quot;state-testing&quot; method indicating whether it is appropriate to invoke the state-dependent method.</p> <ul> <li>Example: iterator.next() &amp; iterator.hasNext()</li> </ul> <p>An alternative to providing a separate state-testing method is to have the state-dependent method return an empty optional or a distinguished return value (<code>null</code>).</p> <p>If an object is to be accessed concurrently without external synchronization or is subject to externally induced state transitions, <em>you must use an optional or distinguished return value</em>, as the object state could change in the interval between the invocation of a state-testing method and its state-dependent method.</p> <p>Performance concerns may dictate that an optional or distinguished return value be used if a separate state-testing method would duplicate the work of the state-dependent method.</p> <p>State-testing method is mildly preferrable to a distinguished return value.</p> <ul> <li>Readability.</li> <li>Incorrect use may be easier to detect.<ul> <li>if you forget to call a state-testing method, the state-dependent method will throw an exception, making the bug obvious</li> <li>if you forget to check for a distinguished return value, the bug may be subtle</li> </ul> </li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"what-the-heck-is-event-loop\\\">What the heck is Event Loop</h1> <ul> <li>Event loop is a mechanism that handles executing multiple chunks of your program over time</li> <li>At each moment, it invokes the JavaScript engine</li> <li>JavaScript engine has no sense of time</li> <li>It is an on-demand execution environment for any snippet of javascript</li> <li>Event loop is an array that acts as a queue</li> <li>Event loop breaks its works into tasks and executes them in serial</li> <li>Event loop does not allow parallel access and changes to shared memory</li> <li>JavaScript never shares memory across threads</li> <li>JavaScript is single-threaded, but browser is not</li> <li>Process 1 and process 2 run concurrently task-level in parallel, but their individual events run sequentially on the event loop queue</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"typescript-is-\\\">TypeScript Is ...</h1> <ul> <li>A programming language, a compiler and a language server<ul> <li>Language server: serves autocompletes in VS code</li> </ul> </li> <li>A syntactic superset of JavaScript<ul> <li>It builds on top of the existing JavaScript syntax</li> </ul> </li> <li>The core of the best JS environment available today</li> <li>&quot;A fancy linter&quot; and a fantastic static analysis tool<ul> <li>Type checking</li> <li>Make sure you are following through the garuantees you intend to make</li> </ul> </li> </ul> <h1 id=\\\"what-problems-does-ts-help-solve\\\">What problems does TS help solve?</h1> <ul> <li>Duck typed languages start to hurt more as codebases get large<ul> <li>hard to keep contracts between modules under control</li> </ul> </li> <li>Informal contracts grow organically, formal ones grow deliberately</li> <li>JS authoring environments are worlds behind the UX of &quot;modern IDEs&quot;</li> <li>Too many JS errors are discovered at <em>runtime</em>.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h2 id=\\\"latest-javascript-features\\\">Latest JavaScript Features</h2> <h3 id=\\\"optional-chaining\\\">Optional Chaining</h3> <pre><code class=\\\"language-ts\\\">// Example:\\nlet x: {\\n    user: {    \\n        name: string;\\n        address?: {\\n            street: string;\\n            city: string;\\n        };\\n    }\\n} = undefined as any;\\n\\n// Optional Chaining\\n// &quot;?&quot; adds a condition to the following code:\\n// If x.user.address exists, log the city\\n// otherwise, log undefined\\nconsole.log(x.user.address?.city);</code></pre> <h3 id=\\\"nullish-coalescing\\\">Nullish Coalescing</h3> <pre><code class=\\\"language-ts\\\">class Foo {\\n    #name: string;\\n    // `constructor(public name?: string)` is a shorthand\\n    // for having a class member field `name`.\\n    constructor(rawName?: string) {\\n        // Nullish coalescing: `??`\\n        // If the `rawName` is *null* or *undefined*, fall back to the value &#39;no name&#39;.\\n        // IMPORTANT: `??` is different from `||`\\n        // If we use `||` here, we will run into surprises of falsy values\\n        // (e.g., empty strings or 0&#39;s, they are not Nullish).\\n        this.#name = rawName ?? &#39;no name&#39;;\\n    }\\n\\n    log() {\\n        console.log(this.#name);\\n    }\\n}</code></pre> <h3 id=\\\"private-fields\\\">Private Fields</h3> <p><code>\\\\#some_variable</code> vs <code>private some_variable</code></p> <ul> <li><code>private some_variable</code>: when someone sets a debugging breakpoint within the class, they can still see <code>some_variable</code> as a memeber field of this class.</li> <li><code>\\\\#some_variable</code>: when some sets a debugging breakpoint within the class, they <em>cannot</em> see <code>\\\\#some_variable</code>.</li> <li>Prefixing a member variable with <code>\\\\#</code> turns the member variable <em>truly</em> private.</li> <li>Child classes will not have access or know this member variable, it is not inherited.</li> </ul> <h2 id=\\\"latest-typescript-features\\\">Latest TypeScript Features</h2> <h3 id=\\\"inference-class-field-types\\\">Inference Class Field Types</h3> <p>Types for class fields that are assigned in constructor are inferred, and no longer need an explicit type declaration.</p> <h3 id=\\\"tuple-types\\\">Tuple Types</h3> <pre><code class=\\\"language-ts\\\">type Foo&lt;T extends any[]&gt; = [boolean, ...T, boolean];</code></pre> <h4 id=\\\"labeled-tuple-types\\\">Labeled Tuple Types</h4> <pre><code class=\\\"language-ts\\\">type Address = [\\n    streetNumber: number,\\n    city: string,\\n    state: string,\\n    postalCode: number,\\n];\\n\\nfunction printAddress(...address: Address) {\\n    // ...\\n}</code></pre> <ul> <li>The IDE displays the labeled types, it makes the function signature much easier to understand.</li> <li>If you are serializing data (e.g., getting API responses), this saves a lot of space.<ul> <li>Imagine you are getting 50KB of JSON data from an API call. The tuple representation is a more compact way to represent the same data than an object.</li> </ul> </li> </ul> <h3 id=\\\"type-aliases-and-interfaces\\\">Type Aliases and Interfaces</h3> <pre><code class=\\\"language-ts\\\">// Old way of defining a JSON array\\ntype JSONValue = string|number|boolean|null|JSONArray|JSONObject;\\ninterface JSONObject = {\\n    [k: string]: JSONValue;\\n}\\ninterface JSONArray extends Array&lt;JSONValue&gt; {}</code></pre> <h4 id=\\\"recursive-type-aliases\\\">Recursive Type Aliases</h4> <pre><code class=\\\"language-ts\\\">type JSONValue =\\n    | string\\n    | number\\n    | boolean\\n    | null\\n    | JSONValue[]\\n    | {\\\\[k: string\\\\]: JSONValue;};</code></pre> <h3 id=\\\"template-typed-literals\\\">Template Typed Literals</h3> <pre><code class=\\\"language-ts\\\">type Corner = \\\\`${\\\\\\\\&quot;top\\\\\\\\&quot; | \\\\\\\\&quot;bottom\\\\\\\\&quot;}-${\\\\\\\\&quot;left\\\\\\\\&quot; | \\\\\\\\&quot;right\\\\\\\\&quot;}\\\\`;</code></pre> <p>The type <code>Corner</code> can only have values: &quot;top-left&quot;, &quot;top-right&quot;, &quot;bottom-left&quot; and &quot;bottom-right&quot;.</p> <h3 id=\\\"error-and-assertion-handling\\\">Error and Assertion Handling</h3> <h4 id=\\\"ts-expect-error\\\">@ts-expect-error</h4> <ul> <li><code>// @ts-expect-error</code> suppresses the type errors.<pre><code class=\\\"language-ts\\\">// @ts-expect-error\\nconst num: number = \\\\\\\\&quot;hello\\\\\\\\&quot;;</code></pre> </li> <li><code>// @ts-ignore</code> suppresses the type errors.<pre><code class=\\\"language-ts\\\">// @ts-ignore\\nconst num: number = \\\\\\\\&quot;hello\\\\\\\\&quot;;</code></pre> </li> <li>ts-ignore vs. ts-expect-error<ul> <li>Always use ts-expect-error over ts-ignore</li> <li>If later on the type is corrected from string to number, ts-expect-error will show error: Unused @ts-expect-error directive.</li> <li>@ts-expect-error: the following line of code has error but I choose to suppress the error. This brings attention to the developer that the bypass is no longer necessary.</li> <li>@ts-ignore: if the following line of code has any type of errors, supporess it. The code can perfectly be fine and have no errors.</li> </ul> </li> </ul> <h4 id=\\\"type-unknown-on-catch-clause\\\">Type <code>unknown</code> on <code>catch</code> Clause</h4> <ul> <li>Big improvement over <code>any</code></li> <li>Forces you to deal with <code>instanceof Error</code> properly<pre><code class=\\\"language-ts\\\">function somethingRisky() {}\\ntry {\\n  somethingRisky();\\n} catch(error: unknown) {\\n  if (error instanceof Error) {\\n      console.log(error.stack);\\n  } else {\\n      console.log(error);\\n  }\\n}</code></pre> </li> </ul> <h4 id=\\\"assertion-functions\\\">Assertion Functions</h4> <pre><code class=\\\"language-ts\\\">function isError(error: any): error is Error {\\n    return error instanceof Error;\\n}</code></pre> <ul> <li>The return type of the function above is not only a boolean but an indication of whether the value is of type <code>Error</code>.</li> </ul> <p>With the new assertion function feature:</p> <pre><code class=\\\"language-ts\\\">function assertIsError(error: any): asserts error is Error {\\n    if (!(error instanceof Error)) {\\n        throw new Error(`Not an error: ${error}`);\\n    }\\n}\\n\\ntry {\\n    somethingRisky();\\n} catch (error: unknown) {\\n    assertIsError(error);\\n    console.log(error.stack);\\n}</code></pre> <h4 id=\\\"import-types\\\">Import Types</h4> <pre><code class=\\\"language-ts\\\">import type {someFunction} from \\\\\\\\&quot;./util\\\\\\\\&quot;;</code></pre> <p>The code above only imports the type information of <code>someFunction</code>.</p> <p>If you are using module bundlers like WebPack, you know that WebPack analyzes the code you import as a mechanism to split your code (so that you don&#39;t need to send code you don&#39;t need on page load).</p> <p>Type imports is a way that we can refer to a type in a module without actually importing the entire function, this will not trigger additional code to be included in your bundle.</p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"app-vs-library-concerns\\\">App vs. Library Concerns</h1> <h2 id=\\\"if-you-are-using-typescript\\\">If you are using TypeScript</h2> <ul> <li>Improve developer experience, including in-editor docs for your dependencies</li> <li>Reduce needs to drill into files to understand how adjacent code works</li> <li>TypeScript allows you to encode more information into your source files</li> <li>Easier to catch incomplete refactoring</li> </ul> <h2 id=\\\"app-specific-concerns\\\">App-specific concerns</h2> <ul> <li>More richness when working with data.</li> <li>Better encapsulation tools (e.g., <code>private</code>, <code>protected</code>, <code>public</code>), to facilitate maintaining lazy loading boundaries (e.g., import types only).</li> <li>Improve major version upgrades story for typed libraries.</li> </ul> <h2 id=\\\"library-specific-concerns\\\">Library-specific concerns</h2> <ul> <li>Create and maintain a deliberate public API surface while still being able to create a private API surface to use between modules or components.</li> <li>API documentations</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"create-a-project-from-scratch\\\">Create a Project from Scratch</h1> <h2 id=\\\"step-1---create-a-folder\\\">Step 1 - Create a folder</h2> <pre><code class=\\\"language-shell\\\">\\\\\\\\# Create a new folder\\nmkdir my-lib\\ncd my-lib\\n\\n\\\\\\\\# Download gitignore package and use this package as a CLI tool\\n\\\\\\\\# and pass an argument \\\\\\\\&quot;node\\\\\\\\&quot; to it.\\n\\\\\\\\# This generates a .gitignore file with all the files that you\\n\\\\\\\\# do not care to commit to Git while developing a node app.\\nnpx gitignore node\\n\\n\\\\\\\\# Create a starting-point package.json\\n\\\\\\\\# Answer \\\\\\\\&quot;yes\\\\\\\\&quot; to all the question promoted\\nyarn init --yes</code></pre> <p>The following is the output <code>package.json</code> file:</p> <pre><code class=\\\"language-json\\\">{\\n  &quot;name&quot;: &quot;my-lib&quot;,\\n  &quot;version&quot;: &quot;1.0.0&quot;,\\n  &quot;main&quot;: &quot;index.js&quot;,\\n  &quot;license&quot;: &quot;MIT&quot;\\n}</code></pre> <h2 id=\\\"step-2---modify-packagejson\\\">Step 2 - Modify package.json</h2> <ol> <li><code>main</code> is the entry point of your library. We want to modify it to point to <code>dist/index.js</code>.</li> <li>Add scripts/commands</li> </ol> <pre><code class=\\\"language-json\\\">{\\n  &quot;name&quot;: &quot;my-lib&quot;,\\n  &quot;version&quot;: &quot;1.0.0&quot;,\\n  // Entry point path\\n  &quot;main&quot;: &quot;dist/index.js&quot;,\\n  // The location where consumers can find the type definitions\\n  &quot;types&quot;: &quot;dist/index.d.ts&quot;,\\n  &quot;license&quot;: &quot;MIT&quot;\\n  &quot;scripts&quot;: {\\n      // Run TypeScript compiler\\n      &quot;build&quot;: &quot;tsc&quot;,\\n      // Since this is going to be a small library, we want to\\n      // only rebuild on change, and tsc by default clears out\\n      // all the output before rebuild. preserveWatchOutput is\\n      // to keep the error &amp; warning logs.\\n      &quot;dev&quot;: &quot;yarn build --watch --preserveWatchOutput&quot;\\n      &quot;lint&quot;: &quot;eslint src --ext js,ts&quot;,\\n      &quot;test&quot;: &quot;jest&quot;\\n  }\\n}</code></pre> <h2 id=\\\"step-3---install-dependencies\\\">Step 3 - Install dependencies</h2> <pre><code class=\\\"language-shell\\\">yarn add -D typescript eslint jest</code></pre> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"declaration-files--type-only-imports\\\">Declaration Files &amp; Type-only Imports</h1> <pre><code class=\\\"language-shell\\\">\\\\\\\\# Create a standard tsconfig.json file\\nyarn tsc --init</code></pre> <p>We need to modify the tsconfig.json file since the initialized one is too permissive for production use.</p> <pre><code class=\\\"language-json\\\">...\\n...\\n// The property \\\\\\\\&quot;target\\\\\\\\&quot; is the language level that we wish to support.\\n// This is not the language level allowed in your code. This is the language\\n// level we will be compiling out to.\\n// Change from \\\\\\\\&quot;es2015\\\\\\\\&quot; to \\\\\\\\&quot;ES2018\\\\\\\\&quot;\\n\\\\\\\\&quot;target\\\\\\\\&quot;: &quot;ES2018&quot;,\\n...\\n...\\n// Enable types: type declaration files to be included in compilation.\\n\\\\\\\\&quot;types\\\\\\\\&quot;: [],\\n...\\n...\\n// Change the output directory from \\\\\\\\&quot;./\\\\\\\\&quot; to \\\\\\\\&quot;dist\\\\\\\\&quot;.\\n// TypeScript compiler by default will put the output JavaScript file and type\\n// declaration file as siblings of the TypeScript compiler input file. This\\n// might complicate things when we want to clear the output files since they\\n// they are in the same folder as the source file.\\n\\\\\\\\&quot;outDir\\\\\\\\&quot;: \\\\\\\\&quot;dist\\\\\\\\&quot;,\\n...\\n...\\n// This controls the folder structure within the dist folder.\\n// If we have an index.ts file in src folder, we will have an index.js in dest\\n// folder.\\n\\\\\\\\&quot;rootDir\\\\\\\\&quot;: \\\\\\\\&quot;src\\\\\\\\&quot;,\\n...\\n...\\n// Disable skipLibCheck\\n...\\n...\\n// Enable declaration since we are building a library and we want to generate\\n// .d.ts files.\\n...\\n...\\n// Enable strict.\\n...\\n...\\n// Add stripInternal: take out \\\\\\\\@Internal annotated fields from the type\\n// declaration file.\\n\\\\\\\\&quot;stripInternal\\\\\\\\&quot;: true,\\n...\\n...\\n// At the end of the file, add the following:\\n\\\\\\\\&quot;include\\\\\\\\&quot;: [\\\\\\\\&quot;src\\\\\\\\&quot;]</code></pre> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>A class can provide its consumers with static factory methods or public constructors.</p> <h2 id=\\\"advantages-of-static-factory-methods\\\">Advantages of static factory methods</h2> <p>Unlike constructors, <em>they have names</em>.</p> <p><code>BigInteger(int, int, Random)</code> vs. <code>BigInteger.probablePrime(int, int, Random)</code></p> <p>Sometimes you see class author overloading their constructors whose parameter lists differ only in the order of their parameter types, which is a bad idea → The user of such an API will never remember which constructor is which and end up calling the wrong one.</p> <p>Unlike constructors, they are <em>NOT</em> required to create a new object each time they are called.</p> <ul> <li>Allows immutable classes to use pre-constructed instances.</li> <li>Allows to cache instances as they are constructed and dispense them repreatedly to avoid creating unnecessary duplicate objects.<ul> <li><code>Boolean.valueOf(boolean)</code> never creates an object (Flyweight pattern).</li> <li>Greatly improve performance if equivalent objects are requested often, especially if they are expensive to create.</li> </ul> </li> <li>Allows classes to maintain strict control over what instances exist at any time → instance-controlled classes.<ul> <li>Instance control allows a class to guarantee that it is a singleton or non-instantiable.</li> <li>Instance control allows an immutable value class to make the guarantee that no two equal instances exist (two instances have the same reference).</li> </ul> </li> </ul> <p>Unlike constructors, they can return an object of <em>any subtype of their return type</em>.</p> <p>An API can return objects without making their classes public, hiding implementation classes in this fashion leads to a very compact API → interface-based frameworks</p> <ul> <li>Interfaces provide natural return types for static factory methods (Example: <a href=\\\"https://docs.oracle.com/javase/1.5.0/docs/guide/collections/\\\">Collection framework</a>)</li> <li><a href=\\\"https://workout-genie.quip.com/5LrYA1z9O9WG/Refer-to-objects-by-their-interfaces\\\">Using such a static factory method requires the client to refer to the returned object by interface rather than implementation class</a></li> </ul> <p>The class of the returned object <strong>can vary</strong> from call to call as a function of the input parameters.</p> <ul> <li>The consumer neither knows nor cares about the class of the object they get back from the factory. The class of the returned object need not exist when the class containing the method is written → service provider framework</li> <li>Service provider framework is a system decoupling the clients from the implementation of a service:<ul> <li>Service interface: represents an implementation</li> <li>Provider registration API: providers use it to register implementations</li> <li>Service access API: clients use it to obtain instances of the service → it is a flexible static factory.</li> </ul> </li> </ul> <h2 id=\\\"disadvantages-of-only-providing-static-factory-methods-in-class\\\">Disadvantages of only providing static factory methods in class</h2> <p>Main limitation of providing only static factory methods: <strong>Classes without public or protected constructors can’t be subclassed</strong>, which can be a blessing</p> <ul> <li><a href=\\\"https://workout-genie.quip.com/JTdGApOFFHN8/Favor-composition-over-inheritance\\\">It encourages programmers to use composition over inheritance</a></li> <li><a href=\\\"https://workout-genie.quip.com/yzIfAt9XPtJt/Minimize-mutability\\\">It is required for immutable types</a></li> </ul> <p>Static factory methods are hard for programmers to find, they do not stand out in API documentation like constructors do</p> <ul> <li>use common naming conventions</li> <li><code>from</code>: type-conversion method: ClassA.from(instant)</li> <li><code>of</code>: aggregation method: ClassA.of(x, y, z)</li> <li><code>valueOf</code>: BigInteger.valueOf(123)</li> <li><code>instance</code> or <code>getInstance</code>: returns an instance that is described by its parameters</li> <li><code>create</code> or <code>newInstance</code>: returns a new instance</li> <li><code>getType</code>: <code>Files.getFileStore(path)</code></li> <li><code>newType</code>: <code>Files.newBufferedReader(path)</code></li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>Static factories and constructors shared a limitation: <strong>they do not scale well to large numbers of optiona parameters</strong></p> <p><strong>Telescoping constructor pattern</strong> works, but it is hard to write client code when there are many parameters and harder still to read it.</p> <ul> <li>Long sequences of identically typed parameters can cause subtle bugs</li> </ul> <pre><code>// Example: telescoping constructor\\npublic class SomeClass {\\n    private final int a;\\n    private final int b;\\n    ...\\n    private final int f;\\n\\n    public SomeClass(a, b, c) {\\n        this(a, b, c, 0);\\n    }\\n    public SomeClass(a, b, c, d) {\\n        this(a, b, c, d, 1);\\n    }\\n    public SomeClass(a, b, c, d, e) {\\n        this(a, b, c, d, e, 2);\\n    }\\n    public SomeClass(a, b, c, d, e, f) {\\n        this(a, b, c, d, e, f);\\n    }\\n}</code></pre> <p><strong>JavaBeans pattern</strong>: you can call a parameterless constructor to create the object and then call setter methods to set each required parameter and each optional parameter of interest.</p> <ul> <li>It allows inconsistency, mandates mutability.</li> <li>It precludes the possibility of making a class immutable.</li> <li>It requires effort on the part of the programmer to ensure thread safety.</li> </ul> <h2 id=\\\"builder-pattern\\\">Builder Pattern</h2> <p>Combining the safety of telescoping constructor pattern with the readability of JavaBeans pattern → <strong>Builder</strong>.</p> <pre><code class=\\\"language-java\\\">// Builder pattern\\npublic class SomeClass {\\n    private final int a;\\n    private final int b;\\n    ...\\n    private final int f;\\n    public static class Builder {\\n        private final int a;\\n        private final int b;\\n        private final int c;\\n\\n        private int d = 0;\\n        private int e = 1;\\n        private int f = 2;\\n\\n        public Builder(int a, int b, int c) {\\n            this.a = a;\\n            this.b = b;\\n            this.c = c;\\n        }\\n        public Builder setD(int val) {\\n            this.d = val;\\n            return this;\\n        }\\n        public Builder setE(int val) {\\n            this.e = val;\\n            return this;\\n        }\\n        public Builder setF(int val) {\\n            this.f = val;\\n            return this;\\n        }\\n\\n        public SomeClass build() {\\n            return new SomeClass(this);\\n        }\\n    }\\n    private SomeClass(Builder builder) {\\n        a = builder.a;\\n        ...\\n        f = builder.f;\\n    }\\n}</code></pre> <ul> <li>The builder pattern simulates named optional parameters.</li> <li>The builder pattern is well suited to class hierarchies.<ul> <li>Abstract classes have abstract builders, concrete classes have concrete builders.</li> </ul> </li> </ul> <pre><code class=\\\"language-java\\\">public abstract class Pizza {\\n    public enum Topping { HAM, MUSHROOM, ONION, PEPPER, SAUSAGE }\\n    final Set&lt;Topping&gt; toppings;\\n\\n    abstract static class Builder&lt;T extends Builder&lt;T&gt;&gt; {\\n        EnumSet&lt;Topping&gt; toppings = EnumSet.noneOf(Toppings.class);\\n        public T addTopping(Topping topping) {\\n            toppings.add(Objects.requireNonNull(topping));\\n            return self();\\n        }\\n        abstract Pizza build();\\n        // Subclasses must override this method to return &quot;this&quot;\\n        protected abstract T self();\\n    }\\n\\n    Pizza(Builder&lt;?&gt; builder) {\\n        toppings = builder.toppings.clone();\\n    }\\n}</code></pre> <p>Note: Pizza.Builder is a generic type with a recursive type parameter .</p> <ul> <li>Along with abstract self method, allows method chaining to work properly in subclasses without casting</li> </ul> <pre><code class=\\\"language-java\\\">public class NyPizza extends Pizza {\\n    public enum Size { SMALL, MEDIUM, LARGE }\\n    private final Size size;\\n\\n    public static class Builder extends Pizza.Builder&lt;Builder&gt; {\\n        private final Size size;\\n\\n        public Builder(Size size) {\\n            this.size = Objects.requireNonNull(size);\\n        }\\n        @Override\\n        public NyPizza build() {\\n            return new NyPizza(this);\\n        }\\n        @Override\\n        protected Builder self() {\\n            return this;\\n        }\\n    }\\n\\n    private NyPizza(Builder builder) {\\n        super(builder);\\n        size = builder.size;\\n    }\\n}</code></pre> <p>A subclass method is declared to return a subtype of the return type declared in the superclass → <strong>covariant return typing</strong>.</p> <h2 id=\\\"disadvantages-of-a-builder\\\">Disadvantages of a builder</h2> <p>In order to create an object, you must first create a builder. While the cost of creating this builder is unlikely to be noticeable in practice. It could be <strong>a problem in performance-critical situations</strong>.</p> <h2 id=\\\"summary\\\">Summary</h2> <p>The builder pattern is a good choice when designing classes whose constructors or static factories would have more than a handful of parameters. Especially if <strong>many of the parameters are optional or of identical type</strong>.</p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>Many classes depend on one or more underlying resources.</p> <p>Example: Spell checker on a dictionary</p> <h2 id=\\\"bad-implementation-static-utility-classes\\\">Bad implementation: static utility classes</h2> <pre><code class=\\\"language-java\\\">// Inappropriate use of static utility - inflexible and untestable\\npublic class SpellChecker {\\n    private static final Lexicon dictionary = ...;\\n    private SpellChecker() {}\\n    public static List&lt;String&gt; suggestions(String typo) {...}\\n}</code></pre> <h2 id=\\\"bad-implementation-singletons\\\">Bad implementation: singletons</h2> <pre><code class=\\\"language-java\\\">// Inappropriate use of singleton - inflexible and untestable\\npublic class SpellChecker {\\n    private static final Lexicon dictionary = ...;\\n    private SpellChecker(...) {}\\n    public static SpellChecker INSTANCE = new SpellChecker(...);\\n    public static List&lt;String&gt; suggestions(String typo) {...}\\n}</code></pre> <h2 id=\\\"why-are-singletons-and-static-utility-classes-bad\\\">Why are singletons and static utility classes bad?</h2> <p>Both of singletons and static utility classes assume there is only one dictionary worth using. In general, <strong>singletons and static utility classes are inappropriate for classes whose behavior is parameterized by an underlying resource</strong>.</p> <h2 id=\\\"dependency-injection\\\">Dependency injection</h2> <p>To support multiple instances of the class, you can pass the resource into the constructor when creating a new instance → <strong>dependency injection</strong>.</p> <p>Example: SpellChecker, dictionary is a dependency injected into the spell checker when it is created.</p> <pre><code class=\\\"language-java\\\">// Dependency injection provides flexibility and testability\\n// You can mock the dictionary however you desire in your tests\\npublic class SpellChecker {\\n    private final Lexicon dictionary;    \\n    public SpellChecker(Lexicon dictionary) {\\n        this.dictionary = Objects.requireNonNull(dictionary);\\n    }\\n    public List&lt;String&gt; suggestions(String typo) {...}\\n}</code></pre> <ul> <li>Dependency injection works with an arbitrary number of resources and arbitrary dependency graphs.</li> <li>It preserves immutability, so multiple clients can share dependent objects.</li> </ul> <h2 id=\\\"dependency-injection-framework\\\">Dependency injection framework</h2> <p>For large projects, they contain thousands of dependencies, to eliminate the clutter → use a <strong>dependency injection framework</strong>.</p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>It is safe to use inheritance:</p> <ul> <li>within a package, subclass and superclass are all under the control of the same programmers</li> <li>when extending classes specifically designed and documented for extension</li> </ul> <p>Inheriting from ordinary concrete classes across package boundaries is dangerous → <strong>inheritance violates encapsulation</strong>.</p> <ul> <li>If superclass changes, the subclass might break even though its code has not been touched</li> </ul> <h2 id=\\\"example-hashset-extension\\\">Example: <code>HashSet</code> extension</h2> <p>Suppose that we need a way to query the HashSet as to how many elements have been added since it is created.</p> <pre><code class=\\\"language-java\\\">// Broken - Inapproporiate use of inheritance\\npublic class InstrumentedHashSet&lt;E&gt; extends HashSet&lt;E&gt; {\\n    private int addCount = 0;\\n    // ... constrcutors\\n    @Override\\n    public boolean add(E e) {\\n        addCount++;\\n        return super.add(e);\\n    }\\n    @Override\\n    public boolean addAll(Collection&lt;? extends E&gt; c) {\\n        addCount += c.size();\\n        return super.addAll(c);\\n    }\\n    public int getAddCount() {\\n        return addCount;\\n    }\\n}\\n// This class doesn&#39;t work:\\nInstrumentedHashSet&lt;String&gt; s = new InstrumentedHashSet&lt;&gt;();\\ns.addAll(List.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;));\\n// addCount is 6 instead of 3, since HashSet&#39;s addAll method is implemented\\n// on top of its add method.</code></pre> <p>We can &quot;fix&quot; <code>InstrumentedHashSet</code> by eliminating its override of the <code>addAll</code> method. This self-use is an implementation detail, not guaranteed to hold in all implementations of all Java platform and subject to change from release to release → the resulting <code>InstrumentedHashSet</code> is fragile.</p> <h2 id=\\\"composition\\\">Composition</h2> <p>To avoid the problem above → Composition, Instead of extending the existing class, give your new class <strong>a private field that references an instance of the existing class</strong>.</p> <ul> <li>The existing class becomes a component of the new class</li> <li>Each instance method in the new class calls the corresponding method on the contained instance of the existing class and returns the results → <strong>forwarding</strong><ul> <li>The methods in the new class are known as <strong>forwarding methods</strong>.</li> </ul> </li> <li>The new class will be stable, with no dependencies on the implementation details of the existing class.</li> </ul> <h3 id=\\\"composition-and--forwarding-approach\\\">Composition-and -forwarding approach</h3> <p>This approach is broken into two pieces:</p> <ul> <li>the class itself</li> <li>a reusable forwarding class that contains all of the forwarding methods</li> </ul> <pre><code class=\\\"language-java\\\">// Wrapper class - uses composition in place of inheritance\\npublic class InstrumentedSet&lt;E&gt; extends ForwardingSet&lt;E&gt; {\\n    private int addCount = 0;\\n    public InstrumentedSet(Set&lt;E&gt; e) {\\n        super(s);\\n    }\\n    @Override public boolean add(E e) {\\n        addCount++;\\n        return super.add(e);\\n    }\\n    @Override public boolean addAll(Collection&lt;? extends E&gt; c) {\\n        addCount += c.size();\\n        return super.addAll(c);\\n    }\\n    public int getAddCount() {\\n        return addCount;\\n    }\\n}\\n// Reusable forwarding class\\n// Set interface captures the functionality of the HashSet class.\\npublic class ForwardingSet&lt;E&gt; implements Set&lt;E&gt; {\\n    private final Set&lt;E&gt; s;   \\n    public ForwardingSet(Set&lt;E&gt; s) {\\n        this.s = s;\\n    }\\n    //...\\n    public boolean add(E e) {\\n        return s.add(e);\\n    }\\n    public boolean addAll(Collection&lt;? extends E&gt; c) {\\n        return s.addAll(c);\\n    }\\n    //...\\n}</code></pre> <p>In essence, <code>InstrumentedSet</code> transforms one <code>Set</code> into another, adding the instrumentation functionality.</p> <ul> <li>Inheritance-based approach only works for a single concrete class and requires a separate constructor for each supported constructor in the superclass.</li> <li>The wrapper class can be used to instrument any <code>Set</code> implementation and will work in conjunction with any preexisting constructor.</li> </ul> <pre><code class=\\\"language-java\\\">Set&lt;A&gt; a = new InstrumentedSet&lt;&gt;(new TreeSet&lt;&gt;(...));\\nSet&lt;B&gt; b = new InstrumentedSet&lt;&gt;(new HashSet&lt;&gt;(...));</code></pre> <p><code>InstrumentedSet</code> is a wrapper class → each <code>InstrumentedSet</code> instance contains (wraps) another <code>Set</code> instance → <strong>Decorator pattern</strong> → <code>InstrumentedSet</code> class “decorates” a set of by adding instrumentation.</p> <h2 id=\\\"disadvantages-of-wrapper-classes\\\">Disadvantages of wrapper classes</h2> <p>Wrapper classes are not suited for use in <strong>callback framework</strong>.</p> <ul> <li>In callback framework, objects pass self-references to other objects for callbacks.<ul> <li>A wrapped object doesn’t its wrapper, it passes a reference to itself (this) and callbacks elude the wrapper (<a href=\\\"https://stackoverflow.com/questions/28254116/wrapper-classes-are-not-suited-for-callback-frameworks\\\">SELF problem</a>).</li> </ul> </li> </ul> <h2 id=\\\"when-to-use-inheritance\\\">When to use inheritance?</h2> <p>Inheritance is only appropriate when subclass really is a <strong>subtype</strong> of the superclass. If you attempt to have a class B extends class A, ask yourself the question:</p> <p><strong>“Is every B really an A?”</strong></p> <p>If the answer is “not sure” or “no”, B should not extend A.</p> <ul> <li>Normally B should contain a private instance of A and expose a different API. If you use inheritance where composition is appropriate, you are exposing implementation details.</li> <li><strong>Inheritance propagates any flaws in the superclass’s API</strong>.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h2 id=\\\"advantages-of-immutability\\\">Advantages of Immutability</h2> <p>An <strong>immutable</strong> class is simply a class whose <strong>instances cannot be modified</strong></p> <ul> <li>All of the information contained in each instance is fixed for the lifetime of the object, so no changes can ever be observed.</li> <li>Examples in Java platform libraries: String, boxed primitive classes (Boolean, Integer, Float, Double, etc.)</li> </ul> <p>To make a class immutable:</p> <ul> <li>Don’t provide methods that modify the object’s state (mutators, setters)</li> <li>Ensure that the class can’t be extended.<ul> <li>Prevents subclasses from compromising the immutable behavior of the class.</li> <li>Makes the class <strong><code>final</code></strong>.</li> </ul> </li> <li>Make all fields <strong><code>private</code></strong></li> <li>Ensure exclusive access to any mutable components.<ul> <li>If your class has any fields that refer to mutable objects, ensure that clients of the class cannot obtain references to these objects.</li> <li>Make defensive copies in constructors, accessors and readObject methods.</li> </ul> </li> </ul> <pre><code class=\\\"language-java\\\">// Example: immutable class\\npublic final class Complex {\\n    private final double re;\\n    private final double im;\\n    ...\\n    // Functional approach: instead of modifying this instance,\\n    // create and return a new Complex instance.\\n    public Complex plus(Complex c) {\\n        return new Complex(re + c.re, im + c.im)\\n    }\\n}</code></pre> <ul> <li>Immutable objects are simple, it can be in only one state.</li> <li><strong>Immutable objects are inherently thread-safe, they require no synchronization</strong>.<ul> <li>They can’t be corrupted by multiple threads accessing them concurrently.</li> <li>They can be shared freely.</li> </ul> </li> <li>Immutable classes should encourage clients to reuse existing instances wherever possible (reducing memory footprint and garbage collection costs).<ul> <li>You can provide public static final constants for commonly used values.</li> <li>An immutable class can provide static factories that cache frequently requested instances to avoid creating new instances when existing ones would do.</li> </ul> </li> <li>You need not and should not provide a clone method or copy constructor on an immutable class.<ul> <li>String class does have a copy constructor, but you should not use it.</li> </ul> </li> <li>Immutable objects make great building blocks for other objects.<ul> <li><strong>Immutable objects make great map keys and set elements</strong>.</li> </ul> </li> </ul> <h2 id=\\\"disadvantages-of-immutability\\\">Disadvantages of Immutability</h2> <p><strong>Immutable classes require a separate object for each distinct value.</strong></p> <ul> <li>Creating these objects can be very costly, especially if they are large.</li> <li>Example: change its lower-order bit of a million-bit BigInteger.</li> </ul> <p>The performance problem is magnified if you perform a multistep operation that generates a new object at every step, eventually discarding all objects except the final result.</p> <h2 id=\\\"design-alternatives\\\">Design alternatives</h2> <ul> <li>Instead of making an immutable class final, you can make all of its constructors private or package-private, and add public static factories in place of the public constructors.</li> <li>It allows the use of multiple package-private implementation classes</li> <li>Some immutable classes have one or more non-final fields in which they cache the results of expensive computations the first time they are needed. This trick works precisely because the object is immutable, which guarantees that the computation would yield the same result if it were repeated.</li> </ul> <p>Note: constructors should create fully initialized objects with all of their invariants established.</p> <ul> <li>Do not provide a public initialization method separate from the constructor or static factory unless there is a compelling reason to do so.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"async-javascript\\\">Async JavaScript</h1> <h2 id=\\\"parallel-vs-async\\\">Parallel vs. Async</h2> <p>Parallel vs Non-parallel: Roller coster example</p> <ul> <li>You are waiting inline to ride the roller coster, you are the only one allowed to ride it, even though there are empty seats in the roller coster → Non-parallel</li> <li>You are waiting inline to ride the roller coster, you and other 20 people are allowed to ride it at the same time, you are experiencing the ride at the same time → parallel</li> </ul> <p>In the computing sense, parallelism is expressed through <strong>threads</strong>.</p> <ul> <li>You can have one thread running on one CPU core in your system</li> <li>They are like queues of actions/operations that needs to happen</li> <li>At any given instance, one core could be doing one of these operations and at the exact same moment, another operation can happen at a different core</li> <li>Because we don’t have infinite number of cores, the OS has a layer of virtual threads which take care of scheduling the events across the available cores as much in parallel as possible</li> </ul> <p>Parallelism is about optimization → get things done faster <strong>Asynchronicity → single thread</strong>.</p> <ul> <li>The programs inside our JavaScript run entirely on a single thread, even though the browser (or Node engine) can access to multiple threads</li> <li>At any given instance, there is one-line of JavaScript running in the JavaScript engine</li> <li>You could run JavaScript in multiple instances (which might look like multi-threading), but those programs can’t communicate with each other (e.g., web worker)</li> </ul> <p><strong>Concurrency: multiple higher-level tasks happening within the same timeframe</strong></p> <p>Async programming is to manage the concurrency in our JavaScript program.</p> <h2 id=\\\"callback\\\">Callback</h2> <pre><code class=\\\"language-javascript\\\">setTimeout(function() {\\n    console.log(“callback!“);\\n}, 1000);</code></pre> <p>There are two parts of the above code:</p> <ul> <li>The first half of the above code is setTimeout function call</li> <li>The second half of the above code is wrapped inside a callback which is deferred to a later moment. At that later moment, it is picked up and continue the program from where we left off.</li> </ul> <p><strong>Example exercise:</strong></p> <ol> <li>Request all 3 files at the same time,</li> <li>Render them ASAP</li> <li>Render them in proper order: file1, file2, file3</li> <li>Output “Complete” after all 3 are done</li> </ol> <pre><code class=\\\"language-javascript\\\">function fakeAjax(url, cb) {\\n    const fake_responses = {\\n        file1: “first text“,\\n        file2: “second text“,\\n        file3: “third text“,\\n    };\\n    const randomDelay = (Math.round(Math.random() * 1e4) % 8000) + 1000;\\n    console.log(“Requesting: “ + url);\\n\\n    setTimeout(function(){\\n        cb(fake_responses[url]);\\n    },randomDelay);\\n}\\nfunction output(text) {\\n    console.log(text);\\n}\\nconst responses = new Map();\\n// Ugly but gets the job done :)\\nfunction handleResponse(file, content) {\\n    if (!responses.has(file)) {\\n        responses.set(file, content);\\n    }\\n    const files = [“file1“, “file2“, “file3“];\\n    for (let i = 0; i &lt; files.length; i++) {\\n        if (!responses.has(files[i])) {\\n            return;\\n        }\\n        if (typeof responses.get(files[i]) === “string“) {\\n            output(responses.get(files[i]));\\n            responses.set(files[i], false);\\n        }\\n    }\\n    output(“Complete“);\\n}\\nfunction getFile(file) {\\n    fakeAjax(file, function(text){\\n        handleResponse(file, text);\\n    });\\n}\\n// Request all files at once in &quot;parallel&quot;\\ngetFile(“file1“);\\ngetFile(“file2“);\\ngetFile(“file3“);</code></pre> <h2 id=\\\"thunks\\\">Thunks</h2> <p>From synchronous perspective, a thunk is a function that has everything already that it needs to do to give you some value back → a function with some closure state keeping track of some value(s) and giving you those values whenever you call it.</p> <pre><code class=\\\"language-javascript\\\">// Synchronous thunk\\nfunction add(x, y) {\\n    return x + y;\\n}\\nconst thunk = function() {\\n    return add(10, 15);\\n}\\nthunk();</code></pre> <p>Asynchronous thunk is a function that doesn’t need any parameters except a callback function to do its job.</p> <pre><code class=\\\"language-javascript\\\">function addAsync(x, y, cb) {\\n    setTimeout(function () {\\n        cb(x + y);\\n    }, 1000);\\n}\\nconst thunk = function (cb) {\\n    addAsync(10, 15, cb);\\n};\\nthunk(function(sum) {\\n    return sum;\\n});</code></pre> <p><strong>Example exercise:</strong></p> <pre><code class=\\\"language-javascript\\\">// Active thunk\\nfunction getFile(file) {\\n    let text;\\n    let fn;\\n    fakeAjax(file, function (response) {\\n        if (fn) {\\n            fn(response);\\n        } else {\\n            text = response;\\n        }\\n    });\\n    return function (cb) {\\n        if (text) {\\n            cb(text);\\n        } else {\\n            fn = cb;\\n        }\\n    };\\n}\\nconst thunk1 = getFile(“file1“);\\nconst thunk2 = getFile(“file2“);\\nconst thunk3 = getFile(“file3“);\\n// Request all files at once in &quot;parallel&quot;\\nthunk1(function (text1) {\\n    output(text1);\\n    thunk2(function (text2) {\\n        output(text2);\\n        thunk3(function (text3) {\\n            output(text3);\\n            output(“Complete“);\\n        });\\n    });\\n});</code></pre> <p>Thunk is using the closure to maintain a state of something, which eliminates time as a complex factor of state.</p> <h2 id=\\\"promises\\\">Promises</h2> <p>Promise example: restaurant ordering. When you pay a meal at a fast food restaurant, you will get a receipt for the food you paid for. This receipt is the placeholder of your future food, it is a promise that the restaurant owes a meal.</p> <p><strong>Promise → a placeholder to eliminate time as a concern wrapped around the future value.</strong></p> <pre><code class=\\\"language-javascript\\\">function trackCheckout(info) {\\n    return new Promise(\\n        function(resolve, reject) {\\n            // attempt to track the checkout\\n            // ...\\n            // if successful, call resolve\\n            // otherwise, call reject\\n        }\\n    );\\n}</code></pre> <p><strong>Promise trust:</strong></p> <ul> <li>only resolved once</li> <li>either success or error</li> <li>messages passed / kept</li> <li>exceptions become errors</li> <li>immutable once resolved</li> </ul> <p><strong>Promise flow control → promise chaining</strong></p> <pre><code class=\\\"language-javascript\\\">doFirstThing                        doFirstThing()\\n    then doSecondThing                  .then(function() {\\n                                            return doSecondThing();\\n                                        })\\n    then doThirdThing                   .then(function() {\\n                                            return doThirdThing();\\n                                        })\\n    then complete                       .then(complete, error);\\nor error</code></pre> <p><strong>Example exercise:</strong></p> <pre><code class=\\\"language-javascript\\\">function getFile(file) {\\n    return new Promise(function (resolve, reject) {\\n        fakeAjax(file, resolve);\\n    });\\n}\\nconst promises = [“file1“, “file2“, “file3“].map(getFile);\\npromises\\n    .reduce((acc, curr) =&gt; {\\n        return acc.then(function () {\\n            return curr;\\n        }).then(output);\\n    }, Promise.resolve()\\n    .then(function () {\\n        output(“Complete“);\\n    });  \\n// Note: resolve function is NOT the output function, it is a function\\n// that fires off an asynchronous function under the covers that tells\\n// the built-in JS Promise to go through a list of &quot;then&quot; handlers\\n// registered and execute them.</code></pre> <p><strong>Abstractions</strong></p> <ul> <li><code>Promise.all</code></li> <li><code>Promise.race</code></li> </ul> <pre><code class=\\\"language-javascript\\\">// Race example: implement a timeout\\n// Some async action returns a promise\\nfunction someAsyncAction() {...}\\nPromise.race([\\n    someAsyncAction(),\\n    new Promise(function executor(_, reject) {\\n        // 3 seconds timeout: if 3 seconds passes,\\n        // promise from someAsyncAction is not\\n        // resovled, reject.\\n        setTimeout(function () {\\n            reject(“Timeout!“);\\n        }, 3000);\\n    });\\n]);</code></pre> <h2 id=\\\"generators\\\">Generators</h2> <p>All normal functions in JavaScript has a “<strong>run-to-completion</strong>” semantic → one of the most important JavaScript characteristics is that it allows us to reason about our code in a single-threaded fashion, never need to worry about two functions one interrupting the other, corrupting the shared memories.</p> <ul> <li>A generator is a syntactic form of declaring a state machine.</li> <li>A generator can be thought of a <strong>pause-able function</strong>.</li> </ul> <pre><code class=\\\"language-javascript\\\">function* gen() {\\n    console.log(“Hello“);\\n    yield; // pause\\n    console.log(“World“);\\n}\\nconst it = gen();\\nit.next(); // Hello\\nit.next(); // World</code></pre> <p><strong>Messaging</strong></p> <pre><code class=\\\"language-javascript\\\">function* main() {\\n    yield 1;\\n    yield 2;\\n    yield 3;\\n    return 4;\\n}\\nconst it = main();\\nit.next(); // returns {value: 1, done: false}\\nit.next(); // returns {value: 2, done: false}\\nit.next(); // returns {value: 3, done: false}\\nit.next(); // returns {value: 4, done: true}</code></pre> <pre><code class=\\\"language-javascript\\\">function coroutine(g) {\\n    const it = g();\\n    return function() {\\n        return it.next.apply(it, arguments);\\n    };\\n}\\nconst run = coroutine(function* () {\\n    const x = 1 + (yield);\\n    const y = 1 + (yield);\\n    yield (x + y);\\n});\\nrun(); // generator is paused to wait for a value for const x = 1 + (yield);\\nrun(10); // this call completes const x = 1 + (yield); -&gt; 11\\nconsole.log(\\n    “Meaning of life: “ + run(30).value\\n); // Meaning of life: 42</code></pre> <p><strong>Asynchronous generators</strong></p> <pre><code class=\\\"language-javascript\\\">function getData(d) {\\n    setTimeout(function () {\\n        run(d);\\n    }, 1000);\\n}\\n// Synchronous looking asynchronous code :)\\nconst run = coroutine(function* () {\\n    const x = 1 + (yield getData(10));\\n    const y = 1 + (yield getData(30));\\n    const answer = yield getData(\\n        “Meaning of life: “ + (x + y)\\n    );\\n    // After ~2 seconds, print Meaning of life: 42\\n    console.log(answer);\\n});\\nrun();</code></pre> <p><strong>Promise + Generator → yield promise</strong></p> <pre><code class=\\\"language-javascript\\\">async function foo() {\\n    await ajax(...);\\n}\\nfoo();</code></pre> <p><strong>Example exercise:</strong></p> <pre><code class=\\\"language-javascript\\\">async function getFiles() {\\n    const p1 = getFile(“file1“);\\n    const p2 = getFile(“file2“);\\n    const p3 = getFile(“file3“);\\n    output(await p1)\\n    output(await p2)\\n    output(await p3)\\n    output(“Complete“);    \\n}</code></pre> <blockquote> <p>Do I need anything to happen in parallel? If so, store those things into intermediate promises and then sequence out the response.</p> </blockquote> <h2 id=\\\"observables\\\">Observables</h2> <p>Example: spreadsheet An observable is similar to a chain of calculated fields in a spreadsheet. In a spreadsheet, you can have a data in a field and a calculated data in another field. → The calculation chain is a flow of data.</p> <p><strong>An observable is an adapter hooked onto an event source that produces promise every time there is an event coming through.</strong></p> <p>In our code, we can declare an observable as our data source (data stream), and we can subscribe to the observable in one or more locations in our system.</p> <pre><code class=\\\"language-javascript\\\">// Example using RxJS\\n// Rx.Observable.fromEvent takes in a DOM element and\\n// a DOM event. It hooks the event name to the element\\n// Every time when the event fires, it pumps a piece of\\n// data through the observable.\\nconst observable = Rx.Observable.fromEvent(btn, “click“);\\nobservable\\n    .map(function mapper(evt) {\\n        return evt.target.className;\\n    })\\n    .filter(function filterer(className) {\\n        return /foobar/.test(className);\\n    })\\n    .distinctUntilChanged()\\n    .subscribe(function (data) {\\n        const className = data[1];\\n        console.log(className);\\n    });</code></pre> <p><strong>RxJS Examples Reference: <a href=\\\"http://rxmarbles.com/\\\">rxmarbles.com</a></strong></p> <h2 id=\\\"communicating-sequential-processes\\\">Communicating Sequential Processes</h2> <p>CPS models concurrency with channels.</p> <ul> <li>Channel is similar to a stream / pipe without buffer size but with built-in back pressure<ul> <li>back pressure: The two ends of the stream cannot communicate with each other, the only way to tell one end to stop sending data is to block the end → back pressure</li> <li>back pressure is a reversed way of communicating from consumer to producer to tell the producer to stop producing/pushing data.</li> </ul> </li> <li>Channel can only take one message at a time → blocking channels<ul> <li>You can’t send me something until I am ready to take it.</li> <li>I can’t take anything until you are ready to send it.</li> </ul> </li> </ul> <p>CSP models your application with lots of tiny independent processes.</p> <ul> <li>There are times when the processes need to coordinate with each other, send messages to each other. After the coordination is done, they are unblocked and go back to being independent again.</li> <li>In JavaScript world, things aren’t running independently as above, but generators is close to it.<ul> <li>Generator can block itself but not affect any other part of the application.</li> <li>We can have a bunch of generators running in different parts of our application, they are all independent of each other. At some point in time, two generators want to coordinate with each other, they need a communication channel where they can both block each other, waiting for each other to show up. Once the message is shown up and sent to each other, they will be unblocked and go back to be independent again.</li> </ul> </li> </ul> <pre><code class=\\\"language-javascript\\\">const ch = chan();\\nfunction* process1() {\\n    yield put(ch, “Hello“);\\n    const msg = yield take(ch);\\n    console.log(msg);\\n}\\nfunction* process2() {\\n    const greeting = yield take(ch);\\n    yield put(ch, greeting + “ World“);\\n    console.log(“Done!“);\\n}\\n// Hello World\\n// Done!</code></pre> <p><strong>Event channels</strong></p> <pre><code class=\\\"language-javascript\\\">function fromEvent(element, eventType) {\\n    const ch = csp.chan();\\n    ${el}.bind(eventType, function (e) {\\n        csp.putAsync(ch, e);\\n    });\\n    return ch;\\n}\\ncsp.go(function* () {\\n    const ch = fromEvent(el, “mousemove“);\\n    while (true) {\\n        const e = yield csp.take(ch);\\n        console.log(\\n            e.clientX + “, “ + e.clientY\\n        );\\n    }\\n});</code></pre> \";\n// Exports\nmodule.exports = code;","import React, {memo, MouseEvent} from 'react';\nimport {MenuConfig} from '../interfaces';\nimport {Menu} from '../containers/menu';\n\ninterface IMenuItem {\n    menuConfig: MenuConfig,\n    onClick(e: MouseEvent): void,\n    parent?: MenuConfig,\n    showSubMenu?: boolean,\n}\n\nexport const MenuItem = memo<IMenuItem>(({menuConfig, onClick, parent, showSubMenu}: IMenuItem) => (\n    <div\n        key={menuConfig.route}\n        className={`${parent ? 'sub-menu-item' : 'menu-item-container'} ${showSubMenu ? 'expanded' : ''}`}>\n        <div\n            key=\"display-name\"\n            className=\"menu-item-display-name\"\n            data-menuname={menuConfig.displayName}\n            data-route={menuConfig.route}\n            onClick={onClick}\n        >\n            <div key=\"text\">{menuConfig.displayName}</div>\n            {showSubMenu && (\n                <div key=\"arrow\" className=\"selected-arrow\">\n                    ↠\n                </div>\n            )}\n        </div>\n        {\n            showSubMenu &&\n                menuConfig.subMenu && \n                    <Menu menus={menuConfig.subMenu} parent={menuConfig} />\n        }\n    </div>\n));\n","import React, {memo, MouseEvent} from 'react';\n\nimport {MenuItem} from './menu-item';\nimport {MenuConfig} from '../interfaces';\n\ninterface IMenu {\n    expandedMenu?: string,\n    menus: Array<MenuConfig>,\n    parent?: MenuConfig,\n    onMenuItemClick(e: MouseEvent): void,\n}\n\nexport const Menu = memo<IMenu>(({expandedMenu, menus, parent, onMenuItemClick}: IMenu) => (\n    <div key=\"menu-container\" className={parent ? \"sub-menu-container\" : \"menu-container\"}>\n        {menus.map(menuConfig => (\n            <MenuItem\n                key={menuConfig.route}\n                menuConfig={menuConfig}\n                parent={parent}\n                showSubMenu={menuConfig.displayName === expandedMenu}\n                onClick={onMenuItemClick}\n            />\n        ))}\n    </div>\n));\n","import React, {useCallback, useState, MouseEvent} from 'react';\nimport {useHistory} from 'react-router-dom'\n\nimport {Menu as MenuView} from '../components/menu';\nimport {MenuConfig} from '../interfaces';\nimport '../menu.css';\n\ninterface IMenu {\n    menus: Array<MenuConfig>;\n    parent?: MenuConfig;\n}\n\nexport const Menu = ({menus, parent}: IMenu) => {\n    const history = useHistory();\n    const [expandedMenu, setExpandedMenu] = useState('');\n    const onMenuItemClick = useCallback((e: MouseEvent) => {\n        const menuDisplayName = e?.currentTarget?.getAttribute('data-menuname');\n        if (expandedMenu !== menuDisplayName) {\n            setExpandedMenu(menuDisplayName || '');\n            if (e?.currentTarget?.getAttribute('data-route')) {\n                const parentRoute = parent ? `/${parent.route}/` : '/';\n                const currentRoute = e.currentTarget.getAttribute('data-route') || '';\n                const route = `${parentRoute}${currentRoute}`\n                history.push(route);\n            }\n        } else {\n            setExpandedMenu('');\n        }\n    }, [expandedMenu, setExpandedMenu]);\n\n    return (\n        <MenuView\n            menus={menus}\n            onMenuItemClick={onMenuItemClick}\n            expandedMenu={expandedMenu}\n            parent={parent}\n        />\n    );\n}\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nexport const AlgorithmOverview = () => (\n    <section>\n        <h1>Algorithm Overview</h1>\n    </section>\n);\n","// Menu constants\nimport {MenuConfig} from './interfaces';\n\nconst algorithmsMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Graph',\n        route: 'graph',\n    },\n    {\n        displayName: 'Sorting',\n        route: 'sorting',\n    },\n    {\n        displayName: 'Binary Search',\n        route: 'binary-search',\n    },\n];\n\nconst dataStructuresMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Priority Queue',\n        route: 'priority-queue',\n    },\n    {\n        displayName: 'Linked List',\n        route: 'linked-list',\n    },\n    {\n        displayName: 'Hash Table',\n        route: 'hash-table',\n    },\n    {\n        displayName: 'Map',\n        route: 'map',\n    },\n];\n\nconst asyncJsMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Basics',\n        route: 'basics',\n    },\n    {\n        displayName: 'Rx JS',\n        route: 'rx-js',\n    },\n];\n\nconst webPerfMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Event loop',\n        route: 'event-loop',\n    },\n];\n\nconst effectiveJavaMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Exceptions',\n        route: 'exceptions',\n    },\n    {\n        displayName: 'Object Creation & Destruction',\n        route: 'objects',\n    },\n    {\n        displayName: 'Classes and Interfaces',\n        route: 'classes-and-interfaces'\n    }\n];\n\nconst typescriptMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Overview',\n        route: 'overview',\n    },\n    {\n        displayName: 'Latest TypeScript Features',\n        route: 'latest-typescript-features',\n    },\n    {\n        displayName: 'App vs. Library Concerns',\n        route: 'app-vs-library-concerns',\n    },\n    {\n        displayName: 'Create Project from Scratch',\n        route: 'create-project-from-scratch',\n    },\n    {\n        displayName: 'Declaration files',\n        route: 'declaration-files',\n    },\n];\n\nconst jsFundamentalsMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Event loop',\n        route: 'event-loop',\n    },\n];\n\nexport const MENUS: Array<MenuConfig> = [\n    {\n        displayName: 'Algorithms',\n        route: 'interview-prep/algorithms',\n        subMenu: algorithmsMenu,\n    },\n    {\n        displayName: 'Data structures',\n        route: 'interview-prep/data-structures',\n        subMenu: dataStructuresMenu,\n    },\n    {\n        displayName: 'Async JS',\n        route: 'interview-prep/async-js',\n        subMenu: asyncJsMenu,\n    },\n    {\n        displayName: 'JS Fundamentals',\n        route: 'interview-prep/js-fundamentals',\n        subMenu: jsFundamentalsMenu,\n    },\n    {\n        displayName: 'Web Basics',\n        route: 'interview-prep/web-fundamentals',\n        subMenu: webPerfMenu,\n    },\n    {\n        displayName: 'Java Best Practices',\n        route: 'interview-prep/java-best-practices',\n        subMenu: effectiveJavaMenu,\n    },\n    {\n        displayName: 'TypeScript',\n        route: 'interview-prep/typescript',\n        subMenu: typescriptMenu,\n    },\n];\n","import React, {useState, useCallback, ReactNode} from 'react';\n\ninterface IExpandableSection {\n    children: ReactNode;\n    title: string;\n    description?: string;\n}\n\nexport const ExpandableSection = ({children, description, title}: IExpandableSection) => {\n    const [expanded, setExpanded] = useState(false);\n    const toggleExpand = useCallback(() => {\n        setExpanded(!expanded);\n    }, [expanded]);\n\n    return (\n        <div>\n            <div\n                onClick={toggleExpand}\n                style={{\n                    backgroundColor: '#EEEEEE',\n                    padding: expanded ? '1.5rem 2rem 0 2rem' : '1.5rem 2rem',\n                    cursor: 'pointer',\n                }}\n            >    \n                <div \n                    style={{\n                        display: 'inline-block',\n                        paddingRight: '1rem',\n                        verticalAlign: 'middle',\n                        fontSize: '20px'\n                    }}\n                >\n                    {expanded ? '-' : '+'}\n                </div>\n                <div style={{display: 'inline-block', verticalAlign: 'middle'}}>\n                    <div style={{fontSize: '25px'}}>{title}</div>\n                    {description && (\n                        <div style={{fontSize: '16px', marginTop: '1rem'}}>{description}</div>\n                    )}\n                </div>\n            </div>\n            {expanded &&\n                <div style={{backgroundColor: '#EEEEEE'}}>{children}</div>}\n        </div>\n    );\n}\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst buildingBlocksMd = require(\"./markdowns/basics/1-building-blocks.md\");\nconst observablesMd = require(\"./markdowns/basics/2-observables.md\");\n\nexport const Basics = () => (\n    <article>\n        <ExpandableSection title=\"RxJs Basics\">\n            <div style={{padding: '1rem 2rem 0rem 2rem'}}>\n                <Markdown>{buildingBlocksMd}</Markdown>\n            </div>\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{observablesMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst thinkingReactivelyMd = require(\"./markdowns/thinking-reactive/sync-vs-async.md\");\n\nexport const ThinkingReactive = () => (\n    <article>\n        <ExpandableSection\n            description=\"Callback-based vs. promise-based vs. observable-based asynchronous JS\"\n            title=\"Thinking Reactively\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{thinkingReactivelyMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import React from 'react';\nimport { Basics } from './basics';\nimport {ThinkingReactive} from './thinking-reactive';\n\nexport const RxJs = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <Basics />\n        <ThinkingReactive />\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst checkedExceptionsMd = require(\"./markdowns/70-checked-exceptions.md\");\n\nexport const CheckedExceptions = () => (\n    <article>\n        <ExpandableSection\n            description=\"Use checked exceptions for recoverable conditions and runtime exceptionsfor programming errors\"\n            title=\"Checked Exceptions vs. Unchecked Exceptions\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{checkedExceptionsMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst standardExceptionsMd = require(\"./markdowns/72-standard-exceptions.md\");\n\nexport const ReuseStandardExceptions = () => (\n    <article>\n        <ExpandableSection title=\"Favor to use standard exceptions\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{standardExceptionsMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst unnecessaryCheckedExceptionsMd = require(\"./markdowns/71-unnecessary-checked-exceptions.md\");\n\nexport const UnnecessaryCheckedExceptions = () => (\n    <article>\n        <ExpandableSection title=\"Avoid unnecessary checked exceptions\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{unnecessaryCheckedExceptionsMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst whenToUseExceptionsMd = require(\"./markdowns/69-when-to-use-exceptions.md\");\n\nexport const WhenToUseExceptions = () => (\n    <article>\n        <ExpandableSection\n            description=\"Use exceptions only for exceptional conditions\"\n            title=\"When to use exceptions\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{whenToUseExceptionsMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import React from 'react';\nimport { CheckedExceptions } from './checked-exceptions';\nimport { ReuseStandardExceptions } from './reuse-standard-exceptions';\nimport { UnnecessaryCheckedExceptions } from './unnecessary-checked-exceptions';\nimport {WhenToUseExceptions} from './when-to-use-exceptions';\n\nexport const Exceptions = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <WhenToUseExceptions />\n        <CheckedExceptions />\n        <UnnecessaryCheckedExceptions />\n        <ReuseStandardExceptions />\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst eventLoopMd = require(\"./markdowns/event-loop.md\");\n\nexport const EventLoop = () => (\n    <article>\n        <div style={{padding: '1rem 2rem'}}>\n            <Markdown>{eventLoopMd}</Markdown>\n        </div>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst overviewMd = require(\"./markdowns/overview.md\");\n\nexport const Overview = () => (\n    <article>\n        <div style={{padding: '1rem 2rem'}}>\n            <Markdown>{overviewMd}</Markdown>\n        </div>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst latestTypescriptFeaturesMd = require(\"./markdowns/latest-typescript-features.md\");\n\nexport const LatestTypescriptFeatures = () => (\n    <article>\n        <div style={{padding: '1rem 2rem'}}>\n            <Markdown>{latestTypescriptFeaturesMd}</Markdown>\n        </div>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst appVsLibraryConcernsMd = require(\"./markdowns/app-vs-library-concerns.md\");\n\nexport const AppVsLibraryConcerns = () => (\n    <article>\n        <div style={{padding: '1rem 2rem'}}>\n            <Markdown>{appVsLibraryConcernsMd}</Markdown>\n        </div>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst createProjectFromScratchMd = require(\"./markdowns/create-project-from-scratch.md\");\n\nexport const CreateProjectFromScratch = () => (\n    <article>\n        <div style={{padding: '1rem 2rem'}}>\n            <Markdown>{createProjectFromScratchMd}</Markdown>\n        </div>\n    </article>\n);","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst declarationFilesMd = require(\"./markdowns/declaration-files.md\");\n\nexport const DeclarationFiles = () => (\n    <article>\n        <div style={{padding: '1rem 2rem'}}>\n            <Markdown>{declarationFilesMd}</Markdown>\n        </div>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst staticFactoryMd = require(\"./markdowns/1-static-factory.md\");\n\nexport const StaticFactory = () => (\n    <article>\n        <ExpandableSection\n            description=\"Consider static factory methods instead of constructors\"\n            title=\"Static Factory Method\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{staticFactoryMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst builderMd = require(\"./markdowns/2-builder.md\");\n\nexport const Builder = () => (\n    <article>\n        <ExpandableSection\n            description=\"Consider a builder when faced with many constructor parameters.\"\n            title=\"Builder with many constructor parameters\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{builderMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst dependencyInjectionMd = require(\"./markdowns/5-dependency-injection.md\");\n\nexport const DependencyInjection = () => (\n    <article>\n        <ExpandableSection title=\"Prefer dependency injection over hardwiring resources\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{dependencyInjectionMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import React from 'react';\nimport { StaticFactory } from './static-factory';\nimport { Builder } from './builder';\nimport { DependencyInjection } from './dependency-injection';\n\nexport const ObjectCreationAndDestruction = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <StaticFactory />\n        <Builder />\n        <DependencyInjection />\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst favorCompositionMd = require(\"./markdowns/18-favor-composition.md\");\n\nexport const FavorComposition = () => (\n    <article>\n        <ExpandableSection title=\"Favor composition over inheritance\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{favorCompositionMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst minimizeMutabilitysMd = require(\"./markdowns/17-minimize-mutability.md\");\n\nexport const MinimizeMutability = () => (\n    <article>\n        <ExpandableSection title=\"Minimiaze mutability\">\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{minimizeMutabilitysMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import React from 'react';\nimport { FavorComposition } from './favor-composition';\nimport { MinimizeMutability } from './minimize-mutability';\n\nexport const ClassesAndInterfaces = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <MinimizeMutability />\n        <FavorComposition />\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst basicsMd = require(\"./markdowns/basics.md\");\n\nexport const Basics = () => (\n    <article>\n        <div style={{padding: '1rem 2rem'}}>\n            <Markdown>{basicsMd}</Markdown>\n        </div>\n    </article>\n);\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport {Menu} from './layout/menu';\nimport {AlgorithmOverview} from './algorithms/overview';\nimport './App.css';\nimport {MENUS} from './layout/menu/constants';\nimport {RxJs} from './async-js/rx-js';\nimport { Exceptions } from './effective-java/exceptions';\nimport { EventLoop } from './js-fundamentals/event-loop';\nimport { Overview } from './typescript/1-overview';\nimport { LatestTypescriptFeatures } from './typescript/2-latest-typescript-features';\nimport { AppVsLibraryConcerns } from './typescript/3-app-vs-library-concerns';\nimport { CreateProjectFromScratch } from './typescript/4-create-project-from-scratch';\nimport { DeclarationFiles } from './typescript/5-declaration-files';\nimport { ObjectCreationAndDestruction } from './effective-java/objects';\nimport { ClassesAndInterfaces } from './effective-java/classes';\nimport { Basics } from './async-js/basics';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <Menu menus={MENUS} />\n        <div className=\"markdown-container\">\n          <Switch>\n            <Route\n              exact\n              path=\"/interview-prep/algorithms\"\n              component={AlgorithmOverview}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/async-js/basics\"\n              component={Basics}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/async-js/rx-js\"\n              component={RxJs}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/java-best-practices/exceptions\"\n              component={Exceptions}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/java-best-practices/objects\"\n              component={ObjectCreationAndDestruction}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/java-best-practices/classes-and-interfaces\"\n              component={ClassesAndInterfaces}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/typescript\"\n              component={Overview}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/typescript/overview\"\n              component={Overview}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/typescript/latest-typescript-features\"\n              component={LatestTypescriptFeatures}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/typescript/app-vs-library-concerns\"\n              component={AppVsLibraryConcerns}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/typescript/create-project-from-scratch\"\n              component={CreateProjectFromScratch}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/typescript/declaration-files\"\n              component={DeclarationFiles}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/js-fundamentals/event-loop\"\n              component={EventLoop}\n            />\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}