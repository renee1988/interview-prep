{"version":3,"sources":["async-js/rx-js/markdowns/thinking-reactive/sync-vs-async.md","effective-java/exceptions/markdowns/70-checked-exceptions.md","effective-java/exceptions/markdowns/69-when-to-use-exceptions.md","js-fundamentals/event-loop/markdowns/event-loop.md","typescript/1-overview/markdowns/overview.md","typescript/2-latest-typescript-features/markdowns/latest-typescript-features.md","typescript/3-app-vs-library-concerns/markdowns/app-vs-library-concerns.md","typescript/4-create-project-from-scratch/markdowns/create-project-from-scratch.md","typescript/5-declaration-files/markdowns/declaration-files.md","effective-java/objects/markdowns/1-static-factory.md","layout/menu/components/menu-item.tsx","layout/menu/components/menu.tsx","layout/menu/containers/menu.tsx","algorithms/overview.tsx","layout/menu/constants.ts","components/expandable-section.tsx","async-js/rx-js/thinking-reactive.tsx","async-js/rx-js/index.tsx","effective-java/exceptions/checked-exceptions.tsx","effective-java/exceptions/when-to-use-exceptions.tsx","effective-java/exceptions/index.tsx","js-fundamentals/event-loop/index.tsx","typescript/1-overview/index.tsx","typescript/2-latest-typescript-features/index.tsx","typescript/3-app-vs-library-concerns/index.tsx","typescript/4-create-project-from-scratch/index.tsx","typescript/5-declaration-files/index.tsx","effective-java/objects/static-factory.tsx","effective-java/objects/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MenuItem","memo","menuConfig","onClick","parent","showSubMenu","key","route","className","data-menuname","displayName","data-route","subMenu","menus","Menu","expandedMenu","onMenuItemClick","map","history","useHistory","useState","setExpandedMenu","useCallback","e","menuDisplayName","currentTarget","getAttribute","parentRoute","currentRoute","push","AlgorithmOverview","MENUS","ExpandableSection","children","description","title","expanded","setExpanded","toggleExpand","style","backgroundColor","padding","cursor","display","paddingRight","verticalAlign","fontSize","marginTop","thinkingReactivelyMd","require","ThinkingReactive","RxJs","checkedExceptionsMd","CheckedExceptions","whenToUseExceptionsMd","WhenToUseExceptions","Exceptions","rowGap","eventLoopMd","EventLoop","overviewMd","Overview","latestTypescriptFeaturesMd","LatestTypescriptFeatures","appVsLibraryConcernsMd","AppVsLibraryConcerns","createProjectFromScratchMd","CreateProjectFromScratch","declarationFilesMd","DeclarationFiles","staticFactoryMd","StaticFactory","ObjectCreationAndDestruction","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d5af6190.chunk.js","sourcesContent":["// Module\nvar code = \"<h3 id=\\\"synchronous-vs-asynchronous-computing\\\">Synchronous vs. Asynchronous computing</h3> <p>The main difference between synchronous and asynchronous computing/code is <strong>latency/waitime</strong>.</p> <h4 id=\\\"blocking-code\\\">Blocking code</h4> <p>Synchronous execution occurs when each block of code must wait for the previous block to complete before running.</p> <ul> <li>Easy to implement</li> <li>Easy to understand</li> <li>Easy to debug</li> </ul> <p>JavaScript is a single-threaded language. Writing blocking code creates awful user experience.</p> <ul> <li>waiting for AJAX call to return</li> <li>waiting for database operations to complete The entire application would pause/sit idle waiting for the data to be loaded and wasting precious computing cycles that could be executing other code.</li> </ul> <p>Other than horrible user experience, browsers may deem your scripts unresponsive after a certain period of inactivity and terminate them.</p> <h4 id=\\\"non-blocking-code-with-callback-functions\\\">Non-blocking code with callback functions</h4> <img src=\\\"https://renee1988.github.io/panda-learning-cs//images/rx-js-cb.png\\\"> <p>As a single-threaded language, JavaScript provides callback functions to tackle the problem of blocking for long-running operations to complete by allowing you to provide a handler function that the JavaScript runtime will invoke once the data is ready to use.</p> <ul> <li>JavaScript callback functions create <strong>inversion of control</strong> where functions call the application back insetad of the other way around.</li> <li>Inversion of control refers to the way in which certain parts of your code receive the flow of control back from teh runtime system.</li> </ul> <p>Callback functions allow you to invoke code asynchronously, so that the application can return control to you later. This allows the program to continue with any other task in the meantime.</p> <h4 id=\\\"time-and-space\\\">Time and space</h4> <ul> <li>Synchronous functions allows us to reason directly about the state of the application</li> <li>Asynchronous code forces us to reason about its <strong>future</strong> state</li> </ul> <p>For example, if you have three functions performing three independent tasks, then executing them in any order wouldn&#39;t matter. However, if they are sharing some global state, their behavior would be determined by the order in which they were called -&gt; <strong><em>Side Effect</em></strong></p> <h4 id=\\\"callback-or-rxjs\\\">Callback or RxJS?</h4> <ul> <li>If your script issues a single remote HTTP request, RxJS is an overkill, callbacks remain the perfert solution.</li> <li>RxJS begins to shine when implementing state machines of advanced complexity such as:<ul> <li>dynamic UIs: rich UI made up of several widgets on the page that interact with each other</li> <li>service orchestration: orchestrate the execution of several business process that consumes several microservice, data mashups</li> </ul> </li> </ul> <pre><code class=\\\"language-javascript\\\">// Example: callback hell\\najax(\\n    &#39;&lt;host1&gt;/items&#39;,\\n    items =&gt; {\\n        items.forEach(item =&gt; {\\n            ajax(`&lt;host2&gt;/items/${items.getId()}/info`, dataInfo =&gt; {\\n                ajax(`&lt;host3&gt;/files/${dataInfo.files}`, processFiles)\\n            });\\n        });\\n    },\\n);</code></pre> <h4 id=\\\"event-emitters\\\">Event Emitters</h4> <p>Event emitter is a popular mechanism for asynchronous event-based architecture.</p> <ul> <li><strong>DOM</strong> is an event emitter.</li> <li><code>EventEmitter</code> class in NodeJs is used to implement APIs:<ul> <li>WebSocket I/O</li> <li>File reading &amp; writing</li> </ul> </li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>There are three kinds of throwables:</p> <ul> <li>checked exceptions</li> <li>runtime exceptions</li> <li>errors</li> </ul> <h2 id=\\\"guidance-on-when-to-apply-different-types-of-throwables\\\">Guidance on when to apply different types of throwables</h2> <p><em>Use checked exceptions for conditions from which the called can reasonably be expected to recover.</em></p> <p>By throwing a checked exception, you force the caller to handle the exception in a <code>catch</code> clause or to propagate it outward.</p> <pre><code class=\\\"language-java\\\">public class SomeClass {\\n  // ...\\n  // ...\\n  public void mightThrow(...) throws SomeException {\\n      // ...\\n  }\\n}</code></pre> <p>With a checked exception, the API designer presents a mandate to recover from the condition.</p> <ul> <li>User can choose to disregard the mandate by catching the exception and ignoring it, which is usually <em>a bad idea</em>.</li> </ul> <p>Since checked exceptions indicate recoverable conditions, it is especiallly important for them to provide methods that furnish information to help the caller recover from the exceptional condition.</p> <p>Example:</p> <p>A checked exception is thrown when an attempt to make a purchase with a gift card fails due to insufficient funds.</p> <p>In this case, the exception should provide an accessor method to query the amount of the shortfall.</p> <p>There are two kinds of unchecked throwables:</p> <ul> <li>runtime exceptions</li> <li>errors They behave the same, both are throwables that needn&#39;t and shouldn&#39;t be caught.</li> <li>If a program throws an unchecked exception or an error, it is the case that recovery is impossible and continued execution would do more harm than good.</li> <li>If a program does not catch such a throwable, it will cause the current thread to halt with an appropriate error message.</li> </ul> <p><em>Use runtime exceptions to indicate programming errors.</em></p> <p>It is not always clear whether you are dealing with a recoverable conditions or a programming error (e.g., resource exhaustion).</p> <p>If it isn&#39;t clear whether recovery is possible, you are better off using an unchecked exception.</p> <p><em>Never implement any new <code>Error</code> subclasses.</em></p> <ul> <li>Errors are reserved for us by the JVM to indicate resource deficiencies, invariant failures or other conditions that make it impossible to continue execution.</li> </ul> <p><em>All of the unchecked throwables implemented should subclass <code>RuntimeException</code>.</em></p> <p>It is possible to define a throwable that is not a subclass of <code>Exception</code>, <code>RuntimeException</code> or <code>Error</code>. They behave as ordinary checked exceptions (subclasses of <code>Exception</code> but not <code>RuntimeException</code>) -&gt; Never implement it -&gt; confuse the consumers of your API.</p> <h2 id=\\\"summary\\\">Summary</h2> <ul> <li>Throw checked exceptions for recoverable conditions.</li> <li>Trhow unchecked exceptions for programming errors.</li> <li>When in doubt, throw unchecked exceptions.</li> <li>Do not define any throwables that are neither checked exception nor runtime exceptions.</li> <li>Provide methods on your checked exceptions to aid in recovery.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"use-exceptions-only-for-exceptional-conditions\\\">Use exceptions only for exceptional conditions</h1> <pre><code class=\\\"language-java\\\">try {\\n    int i = 0;\\n    while(true) {\\n        range[i++].climb();\\n    }\\n} catch(ArrayIndexOutOfBoundsException e) {}</code></pre> <p>The inifinite loop terminates by throwing, catching and ignoring an <code>ArrayIndexOutOfBoundsException</code> when it attempts to access the first array element outside the bounds of the array.</p> <p>Why would someone write the code above?</p> <p>Reasoning: VM checks the bounds of all array accesses, the normal loop termination test -- hidden by the compiler but still present in the for-each loop -- is redundant and should be avoided.</p> <p>What is wrong with the reasoning above?</p> <ul> <li>Exceptions are designed for exceptional circumstances, there is little incetive for JVM implementors to make them as fast as explicit tests.</li> <li>Placing code inside a try-catch block inhibits certain optimizations that JVM implementations might otherwise perform.</li> <li>The standard idiom for looping through an array doesn&#39;t necessarily result in redundant checks. Many JVM implementations optimize them away.</li> <li>In fact, exception-based idiom is far slower than the standard one.</li> </ul> <p>What else is wrong with the code above?</p> <ul> <li>It is not guaranteed to work. If there is a bug in the loop, the use of exceptions for <em>flow control</em> can mask the bug.<ul> <li>If a reasonable loop idiom is used, the bug would generate an uncaught exception, resulting in immediate thread termination with a full stack trace.</li> <li>If the exception-based loop idiom is used, the bug-related exception would be caught and misinterpreted as a normal loop termination.</li> </ul> </li> </ul> <p><strong>Exceptions are to be used only for exceptional conditions, they should never be used for ordinary control flow.</strong></p> <p>A class with a &quot;state-dependent&quot; method that can be invoked only under certain unpredictable conditions should generally have a separate &quot;state-testing&quot; method indicating whether it is appropriate to invoke the state-dependent method.</p> <ul> <li>Example: iterator.next() &amp; iterator.hasNext()</li> </ul> <p>An alternative to providing a separate state-testing method is to have the state-dependent method return an empty optional or a distinguished return value (<code>null</code>).</p> <p>If an object is to be accessed concurrently without external synchronization or is subject to externally induced state transitions, <em>you must use an optional or distinguished return value</em>, as the object state could change in the interval between the invocation of a state-testing method and its state-dependent method.</p> <p>Performance concerns may dictate that an optional or distinguished return value be used if a separate state-testing method would duplicate the work of the state-dependent method.</p> <p>State-testing method is mildly preferrable to a distinguished return value.</p> <ul> <li>Readability.</li> <li>Incorrect use may be easier to detect.<ul> <li>if you forget to call a state-testing method, the state-dependent method will throw an exception, making the bug obvious</li> <li>if you forget to check for a distinguished return value, the bug may be subtle</li> </ul> </li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"what-the-heck-is-event-loop\\\">What the heck is Event Loop</h1> <ul> <li>Event loop is a mechanism that handles executing multiple chunks of your program over time</li> <li>At each moment, it invokes the JavaScript engine</li> <li>JavaScript engine has no sense of time</li> <li>It is an on-demand execution environment for any snippet of javascript</li> <li>Event loop is an array that acts as a queue</li> <li>Event loop breaks its works into tasks and executes them in serial</li> <li>Event loop does not allow parallel access and changes to shared memory</li> <li>JavaScript never shares memory across threads</li> <li>JavaScript is single-threaded, but browser is not</li> <li>Process 1 and process 2 run concurrently task-level in parallel, but their individual events run sequentially on the event loop queue</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"typescript-is-\\\">TypeScript Is ...</h1> <ul> <li>A programming language, a compiler and a language server<ul> <li>Language server: serves autocompletes in VS code</li> </ul> </li> <li>A syntactic superset of JavaScript<ul> <li>It builds on top of the existing JavaScript syntax</li> </ul> </li> <li>The core of the best JS environment available today</li> <li>&quot;A fancy linter&quot; and a fantastic static analysis tool<ul> <li>Type checking</li> <li>Make sure you are following through the garuantees you intend to make</li> </ul> </li> </ul> <h1 id=\\\"what-problems-does-ts-help-solve\\\">What problems does TS help solve?</h1> <ul> <li>Duck typed languages start to hurt more as codebases get large<ul> <li>hard to keep contracts between modules under control</li> </ul> </li> <li>Informal contracts grow organically, formal ones grow deliberately</li> <li>JS authoring environments are worlds behind the UX of &quot;modern IDEs&quot;</li> <li>Too many JS errors are discovered at <em>runtime</em>.</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h2 id=\\\"latest-javascript-features\\\">Latest JavaScript Features</h2> <h3 id=\\\"optional-chaining\\\">Optional Chaining</h3> <pre><code class=\\\"language-ts\\\">// Example:\\nlet x: {\\n    user: {    \\n        name: string;\\n        address?: {\\n            street: string;\\n            city: string;\\n        };\\n    }\\n} = undefined as any;\\n\\n// Optional Chaining\\n// &quot;?&quot; adds a condition to the following code:\\n// If x.user.address exists, log the city\\n// otherwise, log undefined\\nconsole.log(x.user.address?.city);</code></pre> <h3 id=\\\"nullish-coalescing\\\">Nullish Coalescing</h3> <pre><code class=\\\"language-ts\\\">class Foo {\\n    #name: string;\\n    // `constructor(public name?: string)` is a shorthand\\n    // for having a class member field `name`.\\n    constructor(rawName?: string) {\\n        // Nullish coalescing: `??`\\n        // If the `rawName` is *null* or *undefined*, fall back to the value &#39;no name&#39;.\\n        // IMPORTANT: `??` is different from `||`\\n        // If we use `||` here, we will run into surprises of falsy values\\n        // (e.g., empty strings or 0&#39;s, they are not Nullish).\\n        this.#name = rawName ?? &#39;no name&#39;;\\n    }\\n\\n    log() {\\n        console.log(this.#name);\\n    }\\n}</code></pre> <h3 id=\\\"private-fields\\\">Private Fields</h3> <p><code>\\\\#some_variable</code> vs <code>private some_variable</code></p> <ul> <li><code>private some_variable</code>: when someone sets a debugging breakpoint within the class, they can still see <code>some_variable</code> as a memeber field of this class.</li> <li><code>\\\\#some_variable</code>: when some sets a debugging breakpoint within the class, they <em>cannot</em> see <code>\\\\#some_variable</code>.</li> <li>Prefixing a member variable with <code>\\\\#</code> turns the member variable <em>truly</em> private.</li> <li>Child classes will not have access or know this member variable, it is not inherited.</li> </ul> <h2 id=\\\"latest-typescript-features\\\">Latest TypeScript Features</h2> <h3 id=\\\"inference-class-field-types\\\">Inference Class Field Types</h3> <p>Types for class fields that are assigned in constructor are inferred, and no longer need an explicit type declaration.</p> <h3 id=\\\"tuple-types\\\">Tuple Types</h3> <pre><code class=\\\"language-ts\\\">type Foo&lt;T extends any[]&gt; = [boolean, ...T, boolean];</code></pre> <h4 id=\\\"labeled-tuple-types\\\">Labeled Tuple Types</h4> <pre><code class=\\\"language-ts\\\">type Address = [\\n    streetNumber: number,\\n    city: string,\\n    state: string,\\n    postalCode: number,\\n];\\n\\nfunction printAddress(...address: Address) {\\n    // ...\\n}</code></pre> <ul> <li>The IDE displays the labeled types, it makes the function signature much easier to understand.</li> <li>If you are serializing data (e.g., getting API responses), this saves a lot of space.<ul> <li>Imagine you are getting 50KB of JSON data from an API call. The tuple representation is a more compact way to represent the same data than an object.</li> </ul> </li> </ul> <h3 id=\\\"type-aliases-and-interfaces\\\">Type Aliases and Interfaces</h3> <pre><code class=\\\"language-ts\\\">// Old way of defining a JSON array\\ntype JSONValue = string|number|boolean|null|JSONArray|JSONObject;\\ninterface JSONObject = {\\n    [k: string]: JSONValue;\\n}\\ninterface JSONArray extends Array&lt;JSONValue&gt; {}</code></pre> <h4 id=\\\"recursive-type-aliases\\\">Recursive Type Aliases</h4> <pre><code class=\\\"language-ts\\\">type JSONValue =\\n    | string\\n    | number\\n    | boolean\\n    | null\\n    | JSONValue[]\\n    | {\\\\[k: string\\\\]: JSONValue;};</code></pre> <h3 id=\\\"template-typed-literals\\\">Template Typed Literals</h3> <pre><code class=\\\"language-ts\\\">type Corner = \\\\`${\\\\\\\\&quot;top\\\\\\\\&quot; | \\\\\\\\&quot;bottom\\\\\\\\&quot;}-${\\\\\\\\&quot;left\\\\\\\\&quot; | \\\\\\\\&quot;right\\\\\\\\&quot;}\\\\`;</code></pre> <p>The type <code>Corner</code> can only have values: &quot;top-left&quot;, &quot;top-right&quot;, &quot;bottom-left&quot; and &quot;bottom-right&quot;.</p> <h3 id=\\\"error-and-assertion-handling\\\">Error and Assertion Handling</h3> <h4 id=\\\"ts-expect-error\\\">@ts-expect-error</h4> <ul> <li><code>// @ts-expect-error</code> suppresses the type errors.<pre><code class=\\\"language-ts\\\">// @ts-expect-error\\nconst num: number = \\\\\\\\&quot;hello\\\\\\\\&quot;;</code></pre> </li> <li><code>// @ts-ignore</code> suppresses the type errors.<pre><code class=\\\"language-ts\\\">// @ts-ignore\\nconst num: number = \\\\\\\\&quot;hello\\\\\\\\&quot;;</code></pre> </li> <li>ts-ignore vs. ts-expect-error<ul> <li>Always use ts-expect-error over ts-ignore</li> <li>If later on the type is corrected from string to number, ts-expect-error will show error: Unused @ts-expect-error directive.</li> <li>@ts-expect-error: the following line of code has error but I choose to suppress the error. This brings attention to the developer that the bypass is no longer necessary.</li> <li>@ts-ignore: if the following line of code has any type of errors, supporess it. The code can perfectly be fine and have no errors.</li> </ul> </li> </ul> <h4 id=\\\"type-unknown-on-catch-clause\\\">Type <code>unknown</code> on <code>catch</code> Clause</h4> <ul> <li>Big improvement over <code>any</code></li> <li>Forces you to deal with <code>instanceof Error</code> properly<pre><code class=\\\"language-ts\\\">function somethingRisky() {}\\ntry {\\n  somethingRisky();\\n} catch(error: unknown) {\\n  if (error instanceof Error) {\\n      console.log(error.stack);\\n  } else {\\n      console.log(error);\\n  }\\n}</code></pre> </li> </ul> <h4 id=\\\"assertion-functions\\\">Assertion Functions</h4> <pre><code class=\\\"language-ts\\\">function isError(error: any): error is Error {\\n    return error instanceof Error;\\n}</code></pre> <ul> <li>The return type of the function above is not only a boolean but an indication of whether the value is of type <code>Error</code>.</li> </ul> <p>With the new assertion function feature:</p> <pre><code class=\\\"language-ts\\\">function assertIsError(error: any): asserts error is Error {\\n    if (!(error instanceof Error)) {\\n        throw new Error(`Not an error: ${error}`);\\n    }\\n}\\n\\ntry {\\n    somethingRisky();\\n} catch (error: unknown) {\\n    assertIsError(error);\\n    console.log(error.stack);\\n}</code></pre> <h4 id=\\\"import-types\\\">Import Types</h4> <pre><code class=\\\"language-ts\\\">import type {someFunction} from \\\\\\\\&quot;./util\\\\\\\\&quot;;</code></pre> <p>The code above only imports the type information of <code>someFunction</code>.</p> <p>If you are using module bundlers like WebPack, you know that WebPack analyzes the code you import as a mechanism to split your code (so that you don&#39;t need to send code you don&#39;t need on page load).</p> <p>Type imports is a way that we can refer to a type in a module without actually importing the entire function, this will not trigger additional code to be included in your bundle.</p> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"app-vs-library-concerns\\\">App vs. Library Concerns</h1> <h2 id=\\\"if-you-are-using-typescript\\\">If you are using TypeScript</h2> <ul> <li>Improve developer experience, including in-editor docs for your dependencies</li> <li>Reduce needs to drill into files to understand how adjacent code works</li> <li>TypeScript allows you to encode more information into your source files</li> <li>Easier to catch incomplete refactoring</li> </ul> <h2 id=\\\"app-specific-concerns\\\">App-specific concerns</h2> <ul> <li>More richness when working with data.</li> <li>Better encapsulation tools (e.g., <code>private</code>, <code>protected</code>, <code>public</code>), to facilitate maintaining lazy loading boundaries (e.g., import types only).</li> <li>Improve major version upgrades story for typed libraries.</li> </ul> <h2 id=\\\"library-specific-concerns\\\">Library-specific concerns</h2> <ul> <li>Create and maintain a deliberate public API surface while still being able to create a private API surface to use between modules or components.</li> <li>API documentations</li> </ul> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"create-a-project-from-scratch\\\">Create a Project from Scratch</h1> <h2 id=\\\"step-1---create-a-folder\\\">Step 1 - Create a folder</h2> <pre><code class=\\\"language-shell\\\">\\\\\\\\# Create a new folder\\nmkdir my-lib\\ncd my-lib\\n\\n\\\\\\\\# Download gitignore package and use this package as a CLI tool\\n\\\\\\\\# and pass an argument \\\\\\\\&quot;node\\\\\\\\&quot; to it.\\n\\\\\\\\# This generates a .gitignore file with all the files that you\\n\\\\\\\\# do not care to commit to Git while developing a node app.\\nnpx gitignore node\\n\\n\\\\\\\\# Create a starting-point package.json\\n\\\\\\\\# Answer \\\\\\\\&quot;yes\\\\\\\\&quot; to all the question promoted\\nyarn init --yes</code></pre> <p>The following is the output <code>package.json</code> file:</p> <pre><code class=\\\"language-json\\\">{\\n  &quot;name&quot;: &quot;my-lib&quot;,\\n  &quot;version&quot;: &quot;1.0.0&quot;,\\n  &quot;main&quot;: &quot;index.js&quot;,\\n  &quot;license&quot;: &quot;MIT&quot;\\n}</code></pre> <h2 id=\\\"step-2---modify-packagejson\\\">Step 2 - Modify package.json</h2> <ol> <li><code>main</code> is the entry point of your library. We want to modify it to point to <code>dist/index.js</code>.</li> <li>Add scripts/commands</li> </ol> <pre><code class=\\\"language-json\\\">{\\n  &quot;name&quot;: &quot;my-lib&quot;,\\n  &quot;version&quot;: &quot;1.0.0&quot;,\\n  // Entry point path\\n  &quot;main&quot;: &quot;dist/index.js&quot;,\\n  // The location where consumers can find the type definitions\\n  &quot;types&quot;: &quot;dist/index.d.ts&quot;,\\n  &quot;license&quot;: &quot;MIT&quot;\\n  &quot;scripts&quot;: {\\n      // Run TypeScript compiler\\n      &quot;build&quot;: &quot;tsc&quot;,\\n      // Since this is going to be a small library, we want to\\n      // only rebuild on change, and tsc by default clears out\\n      // all the output before rebuild. preserveWatchOutput is\\n      // to keep the error &amp; warning logs.\\n      &quot;dev&quot;: &quot;yarn build --watch --preserveWatchOutput&quot;\\n      &quot;lint&quot;: &quot;eslint src --ext js,ts&quot;,\\n      &quot;test&quot;: &quot;jest&quot;\\n  }\\n}</code></pre> <h2 id=\\\"step-3---install-dependencies\\\">Step 3 - Install dependencies</h2> <pre><code class=\\\"language-shell\\\">yarn add -D typescript eslint jest</code></pre> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<h1 id=\\\"declaration-files--type-only-imports\\\">Declaration Files &amp; Type-only Imports</h1> <pre><code class=\\\"language-shell\\\">\\\\\\\\# Create a standard tsconfig.json file\\nyarn tsc --init</code></pre> <p>We need to modify the tsconfig.json file since the initialized one is too permissive for production use.</p> <pre><code class=\\\"language-json\\\">...\\n...\\n// The property \\\\\\\\&quot;target\\\\\\\\&quot; is the language level that we wish to support.\\n// This is not the language level allowed in your code. This is the language\\n// level we will be compiling out to.\\n// Change from \\\\\\\\&quot;es2015\\\\\\\\&quot; to \\\\\\\\&quot;ES2018\\\\\\\\&quot;\\n\\\\\\\\&quot;target\\\\\\\\&quot;: &quot;ES2018&quot;,\\n...\\n...\\n// Enable types: type declaration files to be included in compilation.\\n\\\\\\\\&quot;types\\\\\\\\&quot;: [],\\n...\\n...\\n// Change the output directory from \\\\\\\\&quot;./\\\\\\\\&quot; to \\\\\\\\&quot;dist\\\\\\\\&quot;.\\n// TypeScript compiler by default will put the output JavaScript file and type\\n// declaration file as siblings of the TypeScript compiler input file. This\\n// might complicate things when we want to clear the output files since they\\n// they are in the same folder as the source file.\\n\\\\\\\\&quot;outDir\\\\\\\\&quot;: \\\\\\\\&quot;dist\\\\\\\\&quot;,\\n...\\n...\\n// This controls the folder structure within the dist folder.\\n// If we have an index.ts file in src folder, we will have an index.js in dest\\n// folder.\\n\\\\\\\\&quot;rootDir\\\\\\\\&quot;: \\\\\\\\&quot;src\\\\\\\\&quot;,\\n...\\n...\\n// Disable skipLibCheck\\n...\\n...\\n// Enable declaration since we are building a library and we want to generate\\n// .d.ts files.\\n...\\n...\\n// Enable strict.\\n...\\n...\\n// Add stripInternal: take out \\\\\\\\@Internal annotated fields from the type\\n// declaration file.\\n\\\\\\\\&quot;stripInternal\\\\\\\\&quot;: true,\\n...\\n...\\n// At the end of the file, add the following:\\n\\\\\\\\&quot;include\\\\\\\\&quot;: [\\\\\\\\&quot;src\\\\\\\\&quot;]</code></pre> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<p>A class can provide its consumers with static factory methods or public constructors.</p> <h2 id=\\\"advantages-of-static-factory-methods\\\">Advantages of static factory methods</h2> <p>Unlike constructors, <em>they have names</em>.</p> <p><code>BigInteger(int, int, Random)</code> vs. <code>BigInteger.probablePrime(int, int, Random)</code></p> <p>Sometimes you see class author overloading their constructors whose parameter lists differ only in the order of their parameter types, which is a bad idea → The user of such an API will never remember which constructor is which and end up calling the wrong one.</p> <p>Unlike constructors, they are <em>NOT</em> required to create a new object each time they are called.</p> <ul> <li>Allows immutable classes to use pre-constructed instances.</li> <li>Allows to cache instances as they are constructed and dispense them repreatedly to avoid creating unnecessary duplicate objects.<ul> <li><code>Boolean.valueOf(boolean)</code> never creates an object (Flyweight pattern).</li> <li>Greatly improve performance if equivalent objects are requested often, especially if they are expensive to create.</li> </ul> </li> <li>Allows classes to maintain strict control over what instances exist at any time → instance-controlled classes.<ul> <li>Instance control allows a class to guarantee that it is a singleton or non-instantiable.</li> <li>Instance control allows an immutable value class to make the guarantee that no two equal instances exist (two instances have the same reference).</li> </ul> </li> </ul> <p>Unlike constructors, they can return an object of <em>any subtype of their return type</em>.</p> <p>An API can return objects without making their classes public, hiding implementation classes in this fashion leads to a very compact API → interface-based frameworks</p> <ul> <li>Interfaces provide natural return types for static factory methods (Example: <a href=\\\"https://docs.oracle.com/javase/1.5.0/docs/guide/collections/\\\">Collection framework</a>)</li> <li><a href=\\\"https://workout-genie.quip.com/5LrYA1z9O9WG/Refer-to-objects-by-their-interfaces\\\">Using such a static factory method requires the client to refer to the returned object by interface rather than implementation class</a></li> </ul> <p>The class of the returned object <strong>can vary</strong> from call to call as a function of the input parameters.</p> <ul> <li>The consumer neither knows nor cares about the class of the object they get back from the factory. The class of the returned object need not exist when the class containing the method is written → service provider framework</li> <li>Service provider framework is a system decoupling the clients from the implementation of a service:<ul> <li>Service interface: represents an implementation</li> <li>Provider registration API: providers use it to register implementations</li> <li>Service access API: clients use it to obtain instances of the service → it is a flexible static factory.</li> </ul> </li> </ul> <h2 id=\\\"disadvantages-of-only-providing-static-factory-methods-in-class\\\">Disadvantages of only providing static factory methods in class</h2> <p>Main limitation of providing only static factory methods: <strong>Classes without public or protected constructors can’t be subclassed</strong>, which can be a blessing</p> <ul> <li><a href=\\\"https://workout-genie.quip.com/JTdGApOFFHN8/Favor-composition-over-inheritance\\\">It encourages programmers to use composition over inheritance</a></li> <li><a href=\\\"https://workout-genie.quip.com/yzIfAt9XPtJt/Minimize-mutability\\\">It is required for immutable types</a></li> </ul> <p>Static factory methods are hard for programmers to find, they do not stand out in API documentation like constructors do</p> <ul> <li>use common naming conventions</li> <li><code>from</code>: type-conversion method: ClassA.from(instant)</li> <li><code>of</code>: aggregation method: ClassA.of(x, y, z)</li> <li><code>valueOf</code>: BigInteger.valueOf(123)</li> <li><code>instance</code> or <code>getInstance</code>: returns an instance that is described by its parameters</li> <li><code>create</code> or <code>newInstance</code>: returns a new instance</li> <li><code>getType</code>: <code>Files.getFileStore(path)</code></li> <li><code>newType</code>: <code>Files.newBufferedReader(path)</code></li> </ul> \";\n// Exports\nmodule.exports = code;","import React, {memo, MouseEvent} from 'react';\nimport {MenuConfig} from '../interfaces';\nimport {Menu} from '../containers/menu';\n\ninterface IMenuItem {\n    menuConfig: MenuConfig,\n    onClick(e: MouseEvent): void,\n    parent?: MenuConfig,\n    showSubMenu?: boolean,\n}\n\nexport const MenuItem = memo<IMenuItem>(({menuConfig, onClick, parent, showSubMenu}: IMenuItem) => (\n    <div\n        key={menuConfig.route}\n        className={`${parent ? 'sub-menu-item' : 'menu-item-container'} ${showSubMenu ? 'expanded' : ''}`}>\n        <div\n            key=\"display-name\"\n            className=\"menu-item-display-name\"\n            data-menuname={menuConfig.displayName}\n            data-route={menuConfig.route}\n            onClick={onClick}\n        >\n            <div key=\"text\">{menuConfig.displayName}</div>\n            {showSubMenu && (\n                <div key=\"arrow\" className=\"selected-arrow\">\n                    ↠\n                </div>\n            )}\n        </div>\n        {\n            showSubMenu &&\n                menuConfig.subMenu && \n                    <Menu menus={menuConfig.subMenu} parent={menuConfig} />\n        }\n    </div>\n));\n","import React, {memo, MouseEvent} from 'react';\n\nimport {MenuItem} from './menu-item';\nimport {MenuConfig} from '../interfaces';\n\ninterface IMenu {\n    expandedMenu?: string,\n    menus: Array<MenuConfig>,\n    parent?: MenuConfig,\n    onMenuItemClick(e: MouseEvent): void,\n}\n\nexport const Menu = memo<IMenu>(({expandedMenu, menus, parent, onMenuItemClick}: IMenu) => (\n    <div key=\"menu-container\" className={parent ? \"sub-menu-container\" : \"menu-container\"}>\n        {menus.map(menuConfig => (\n            <MenuItem\n                key={menuConfig.route}\n                menuConfig={menuConfig}\n                parent={parent}\n                showSubMenu={menuConfig.displayName === expandedMenu}\n                onClick={onMenuItemClick}\n            />\n        ))}\n    </div>\n));\n","import React, {useCallback, useState, MouseEvent} from 'react';\nimport {useHistory} from 'react-router-dom'\n\nimport {Menu as MenuView} from '../components/menu';\nimport {MenuConfig} from '../interfaces';\nimport '../menu.css';\n\ninterface IMenu {\n    menus: Array<MenuConfig>;\n    parent?: MenuConfig;\n}\n\nexport const Menu = ({menus, parent}: IMenu) => {\n    const history = useHistory();\n    const [expandedMenu, setExpandedMenu] = useState('');\n    const onMenuItemClick = useCallback((e: MouseEvent) => {\n        const menuDisplayName = e?.currentTarget?.getAttribute('data-menuname');\n        if (expandedMenu !== menuDisplayName) {\n            setExpandedMenu(menuDisplayName || '');\n            if (e?.currentTarget?.getAttribute('data-route')) {\n                const parentRoute = parent ? `/${parent.route}/` : '/';\n                const currentRoute = e.currentTarget.getAttribute('data-route') || '';\n                const route = `${parentRoute}${currentRoute}`\n                history.push(route);\n            }\n        } else {\n            setExpandedMenu('');\n        }\n    }, [expandedMenu, setExpandedMenu]);\n\n    return (\n        <MenuView\n            menus={menus}\n            onMenuItemClick={onMenuItemClick}\n            expandedMenu={expandedMenu}\n            parent={parent}\n        />\n    );\n}\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nexport const AlgorithmOverview = () => (\n    <section>\n        <h1>Algorithm Overview</h1>\n    </section>\n);\n","// Menu constants\nimport {MenuConfig} from './interfaces';\n\nconst algorithmsMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Graph',\n        route: 'graph',\n    },\n    {\n        displayName: 'Sorting',\n        route: 'sorting',\n    },\n    {\n        displayName: 'Binary Search',\n        route: 'binary-search',\n    },\n];\n\nconst dataStructuresMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Priority Queue',\n        route: 'priority-queue',\n    },\n    {\n        displayName: 'Linked List',\n        route: 'linked-list',\n    },\n    {\n        displayName: 'Hash Table',\n        route: 'hash-table',\n    },\n    {\n        displayName: 'Map',\n        route: 'map',\n    },\n];\n\nconst asyncJsMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Basics',\n        route: 'basics',\n    },\n    {\n        displayName: 'Rx JS',\n        route: 'rx-js',\n    },\n];\n\nconst webPerfMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Event loop',\n        route: 'event-loop',\n    },\n];\n\nconst effectiveJavaMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Exceptions',\n        route: 'exceptions',\n    },\n    {\n        displayName: 'Object Creation & Destruction',\n        route: 'objects',\n    },\n];\n\nconst typescriptMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Overview',\n        route: 'overview',\n    },\n    {\n        displayName: 'Latest TypeScript Features',\n        route: 'latest-typescript-features',\n    },\n    {\n        displayName: 'App vs. Library Concerns',\n        route: 'app-vs-library-concerns',\n    },\n    {\n        displayName: 'Create Project from Scratch',\n        route: 'create-project-from-scratch',\n    },\n    {\n        displayName: 'Declaration files',\n        route: 'declaration-files',\n    },\n];\n\nconst jsFundamentalsMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Event loop',\n        route: 'event-loop',\n    },\n];\n\nexport const MENUS: Array<MenuConfig> = [\n    {\n        displayName: 'Algorithms',\n        route: 'interview-prep/algorithms',\n        subMenu: algorithmsMenu,\n    },\n    {\n        displayName: 'Data structures',\n        route: 'interview-prep/data-structures',\n        subMenu: dataStructuresMenu,\n    },\n    {\n        displayName: 'Async JS',\n        route: 'interview-prep/async-js',\n        subMenu: asyncJsMenu,\n    },\n    {\n        displayName: 'JS Fundamentals',\n        route: 'interview-prep/js-fundamentals',\n        subMenu: jsFundamentalsMenu,\n    },\n    {\n        displayName: 'Web Basics',\n        route: 'interview-prep/web-fundamentals',\n        subMenu: webPerfMenu,\n    },\n    {\n        displayName: 'Java Best Practices',\n        route: 'interview-prep/java-best-practices',\n        subMenu: effectiveJavaMenu,\n    },\n    {\n        displayName: 'TypeScript',\n        route: 'interview-prep/typescript',\n        subMenu: typescriptMenu,\n    },\n];\n","import React, {useState, useCallback, ReactNode} from 'react';\n\ninterface IExpandableSection {\n    children: ReactNode;\n    title: string;\n    description?: string;\n}\n\nexport const ExpandableSection = ({children, description, title}: IExpandableSection) => {\n    const [expanded, setExpanded] = useState(false);\n    const toggleExpand = useCallback(() => {\n        setExpanded(!expanded);\n    }, [expanded]);\n\n    return (\n        <div>\n            <div\n                onClick={toggleExpand}\n                style={{\n                    backgroundColor: '#EEEEEE',\n                    padding: expanded ? '1.5rem 2rem 0 2rem' : '1.5rem 2rem',\n                    cursor: 'pointer',\n                }}\n            >    \n                <div \n                    style={{\n                        display: 'inline-block',\n                        paddingRight: '1rem',\n                        verticalAlign: 'middle',\n                        fontSize: '20px'\n                    }}\n                >\n                    {expanded ? '-' : '+'}\n                </div>\n                <div style={{display: 'inline-block', verticalAlign: 'middle'}}>\n                    <div style={{fontSize: '25px'}}>{title}</div>\n                    {description && (\n                        <div style={{fontSize: '16px', marginTop: '1rem'}}>{description}</div>\n                    )}\n                </div>\n            </div>\n            {expanded &&\n                <div style={{backgroundColor: '#EEEEEE'}}>{children}</div>}\n        </div>\n    );\n}\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst thinkingReactivelyMd = require(\"./markdowns/thinking-reactive/sync-vs-async.md\");\n\nexport const ThinkingReactive = () => (\n    <article>\n        <ExpandableSection\n            description=\"Callback-based vs. promise-based vs. observable-based asynchronous JS\"\n            title=\"Thinking Reactively\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{thinkingReactivelyMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import React from 'react';\nimport {ThinkingReactive} from './thinking-reactive';\n\nexport const RxJs = () => (\n    <article>\n        <ThinkingReactive />\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst checkedExceptionsMd = require(\"./markdowns/70-checked-exceptions.md\");\n\nexport const CheckedExceptions = () => (\n    <article>\n        <ExpandableSection\n            description=\"Use checked exceptions for recoverable conditions and runtime exceptionsfor programming errors\"\n            title=\"Checked Exceptions vs. Unchecked Exceptions\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{checkedExceptionsMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst whenToUseExceptionsMd = require(\"./markdowns/69-when-to-use-exceptions.md\");\n\nexport const WhenToUseExceptions = () => (\n    <article>\n        <ExpandableSection\n            description=\"Use exceptions only for exceptional conditions\"\n            title=\"When to use exceptions\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{whenToUseExceptionsMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import React from 'react';\nimport { CheckedExceptions } from './checked-exceptions';\nimport {WhenToUseExceptions} from './when-to-use-exceptions';\n\nexport const Exceptions = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <WhenToUseExceptions />\n        <CheckedExceptions />\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst eventLoopMd = require(\"./markdowns/event-loop.md\");\n\nexport const EventLoop = () => (\n    <article>\n        <div style={{padding: '1rem 2rem'}}>\n            <Markdown>{eventLoopMd}</Markdown>\n        </div>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst overviewMd = require(\"./markdowns/overview.md\");\n\nexport const Overview = () => (\n    <article>\n        <div style={{padding: '1rem 2rem'}}>\n            <Markdown>{overviewMd}</Markdown>\n        </div>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst latestTypescriptFeaturesMd = require(\"./markdowns/latest-typescript-features.md\");\n\nexport const LatestTypescriptFeatures = () => (\n    <article>\n        <div style={{padding: '1rem 2rem'}}>\n            <Markdown>{latestTypescriptFeaturesMd}</Markdown>\n        </div>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst appVsLibraryConcernsMd = require(\"./markdowns/app-vs-library-concerns.md\");\n\nexport const AppVsLibraryConcerns = () => (\n    <article>\n        <div style={{padding: '1rem 2rem'}}>\n            <Markdown>{appVsLibraryConcernsMd}</Markdown>\n        </div>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst createProjectFromScratchMd = require(\"./markdowns/create-project-from-scratch.md\");\n\nexport const CreateProjectFromScratch = () => (\n    <article>\n        <div style={{padding: '1rem 2rem'}}>\n            <Markdown>{createProjectFromScratchMd}</Markdown>\n        </div>\n    </article>\n);","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst declarationFilesMd = require(\"./markdowns/declaration-files.md\");\n\nexport const DeclarationFiles = () => (\n    <article>\n        <div style={{padding: '1rem 2rem'}}>\n            <Markdown>{declarationFilesMd}</Markdown>\n        </div>\n    </article>\n);\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nimport {ExpandableSection} from '../../components/expandable-section';\n\nconst staticFactoryMd = require(\"./markdowns/1-static-factory.md\");\n\nexport const StaticFactory = () => (\n    <article>\n        <ExpandableSection\n            description=\"Consider static factory methods instead of constructors\"\n            title=\"Static Factory Method\"\n        >\n            <div style={{padding: '1rem 2rem'}}>\n                <Markdown>{staticFactoryMd}</Markdown>\n            </div>\n        </ExpandableSection>\n    </article>\n);\n","import React from 'react';\nimport { StaticFactory } from './static-factory';\n\nexport const ObjectCreationAndDestruction = () => (\n    <article style={{display: 'grid', rowGap: '1.5rem'}}>\n        <StaticFactory />\n    </article>\n);\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport {Menu} from './layout/menu';\nimport {AlgorithmOverview} from './algorithms/overview';\nimport './App.css';\nimport {MENUS} from './layout/menu/constants';\nimport {RxJs} from './async-js/rx-js';\nimport { Exceptions } from './effective-java/exceptions';\nimport { EventLoop } from './js-fundamentals/event-loop';\nimport { Overview } from './typescript/1-overview';\nimport { LatestTypescriptFeatures } from './typescript/2-latest-typescript-features';\nimport { AppVsLibraryConcerns } from './typescript/3-app-vs-library-concerns';\nimport { CreateProjectFromScratch } from './typescript/4-create-project-from-scratch';\nimport { DeclarationFiles } from './typescript/5-declaration-files';\nimport { ObjectCreationAndDestruction } from './effective-java/objects';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <Menu menus={MENUS} />\n        <div className=\"markdown-container\">\n          <Switch>\n            <Route\n              exact\n              path=\"/interview-prep/algorithms\"\n              component={AlgorithmOverview}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/async-js/rx-js\"\n              component={RxJs}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/java-best-practices/exceptions\"\n              component={Exceptions}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/java-best-practices/objects\"\n              component={ObjectCreationAndDestruction}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/typescript\"\n              component={Overview}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/typescript/overview\"\n              component={Overview}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/typescript/latest-typescript-features\"\n              component={LatestTypescriptFeatures}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/typescript/app-vs-library-concerns\"\n              component={AppVsLibraryConcerns}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/typescript/create-project-from-scratch\"\n              component={CreateProjectFromScratch}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/typescript/declaration-files\"\n              component={DeclarationFiles}\n            />\n            <Route\n              exact\n              path=\"/interview-prep/js-fundamentals/event-loop\"\n              component={EventLoop}\n            />\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}