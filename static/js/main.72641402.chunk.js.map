{"version":3,"sources":["async-js/rx-js/markdowns/thinking-reactive/event-emitters.md","layout/menu/components/menu-item.tsx","layout/menu/components/menu.tsx","layout/menu/containers/menu.tsx","algorithms/overview.tsx","layout/menu/constants.ts","async-js/rx-js/thinking-reactive.tsx","async-js/rx-js/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MenuItem","memo","menuConfig","onClick","parent","showSubMenu","key","route","className","data-menuname","displayName","data-route","subMenu","menus","Menu","expandedMenu","onMenuItemClick","map","history","useHistory","useState","setExpandedMenu","useCallback","e","menuDisplayName","currentTarget","getAttribute","parentRoute","currentRoute","push","AlgorithmOverview","asyncJsMenu","MENUS","eventEmittersMd","require","ThinkingReactive","RxJs","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.72641402.chunk.js","sourcesContent":["// Module\nvar code = \"<h3 id=\\\"event-emitters\\\">Event Emitters</h3> <p>Event emitter is a popular mechanism for asynchronous event-based architecture.</p> <ul> <li><strong>DOM</strong> is an event emitter.</li> </ul> \";\n// Exports\nmodule.exports = code;","import React, {memo, MouseEvent} from 'react';\nimport {MenuConfig} from '../interfaces';\nimport {Menu} from '../containers/menu';\n\ninterface IMenuItem {\n    menuConfig: MenuConfig,\n    onClick(e: MouseEvent): void,\n    parent?: MenuConfig,\n    showSubMenu?: boolean,\n}\n\nexport const MenuItem = memo<IMenuItem>(({menuConfig, onClick, parent, showSubMenu}: IMenuItem) => (\n    <div\n        key={menuConfig.route}\n        className={`${parent ? 'sub-menu-item' : 'menu-item-container'} ${showSubMenu ? 'expanded' : ''}`}>\n        <div\n            key=\"display-name\"\n            className=\"menu-item-display-name\"\n            data-menuname={menuConfig.displayName}\n            data-route={menuConfig.route}\n            onClick={onClick}\n        >\n            <div key=\"text\">{menuConfig.displayName}</div>\n            {showSubMenu && (\n                <div key=\"arrow\" className=\"selected-arrow\">\n                    â† \n                </div>\n            )}\n        </div>\n        {\n            showSubMenu &&\n                menuConfig.subMenu && \n                    <Menu menus={menuConfig.subMenu} parent={menuConfig} />\n        }\n    </div>\n));\n","import React, {memo, MouseEvent} from 'react';\n\nimport {MenuItem} from './menu-item';\nimport {MenuConfig} from '../interfaces';\n\ninterface IMenu {\n    expandedMenu?: string,\n    menus: Array<MenuConfig>,\n    parent?: MenuConfig,\n    onMenuItemClick(e: MouseEvent): void,\n}\n\nexport const Menu = memo<IMenu>(({expandedMenu, menus, parent, onMenuItemClick}: IMenu) => (\n    <div key=\"menu-container\" className={parent ? \"sub-menu-container\" : \"menu-container\"}>\n        {menus.map(menuConfig => (\n            <MenuItem\n                key={menuConfig.route}\n                menuConfig={menuConfig}\n                parent={parent}\n                showSubMenu={menuConfig.displayName === expandedMenu}\n                onClick={onMenuItemClick}\n            />\n        ))}\n    </div>\n));\n","import React, {useCallback, useState, MouseEvent} from 'react';\nimport {useHistory} from 'react-router-dom'\n\nimport {Menu as MenuView} from '../components/menu';\nimport {MenuConfig} from '../interfaces';\nimport '../menu.css';\n\ninterface IMenu {\n    menus: Array<MenuConfig>;\n    parent?: MenuConfig;\n}\n\nexport const Menu = ({menus, parent}: IMenu) => {\n    const history = useHistory();\n    const [expandedMenu, setExpandedMenu] = useState('');\n    const onMenuItemClick = useCallback((e: MouseEvent) => {\n        const menuDisplayName = e?.currentTarget?.getAttribute('data-menuname');\n        if (expandedMenu !== menuDisplayName) {\n            setExpandedMenu(menuDisplayName || '');\n            if (e?.currentTarget?.getAttribute('data-route')) {\n                const parentRoute = parent ? `/${parent.route}/` : '/';\n                const currentRoute = e.currentTarget.getAttribute('data-route') || '';\n                const route = `${parentRoute}${currentRoute}`\n                history.push(route);\n            }\n        } else {\n            setExpandedMenu('');\n        }\n    }, [expandedMenu, setExpandedMenu]);\n\n    return (\n        <MenuView\n            menus={menus}\n            onMenuItemClick={onMenuItemClick}\n            expandedMenu={expandedMenu}\n            parent={parent}\n        />\n    );\n}\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nexport const AlgorithmOverview = () => (\n    <section>\n        <h1>Algorithm Overview</h1>\n    </section>\n);\n","// Menu constants\nimport {MenuConfig} from './interfaces';\n\nconst algorithmsMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Graph',\n        route: 'graph',\n    },\n    {\n        displayName: 'Sorting',\n        route: 'sorting',\n    },\n    {\n        displayName: 'Binary Search',\n        route: 'binary-search',\n    },\n];\n\nconst dataStructuresMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Priority Queue',\n        route: 'priority-queue',\n    },\n    {\n        displayName: 'Linked List',\n        route: 'linked-list',\n    },\n    {\n        displayName: 'Hash Table',\n        route: 'hash-table',\n    },\n    {\n        displayName: 'Map',\n        route: 'map',\n    },\n];\n\nconst asyncJsMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Basics',\n        route: 'basics',\n    },\n    {\n        displayName: 'Rx JS',\n        route: 'rx-js',\n    },\n];\n\nconst webPerfMenu: Array<MenuConfig> = [\n    {\n        displayName: 'Event loop',\n        route: 'event-loop',\n    },\n];\n\nexport const MENUS: Array<MenuConfig> = [\n    {\n        displayName: 'Algorithms',\n        route: 'interview-prep/algorithms',\n        subMenu: algorithmsMenu,\n    },\n    {\n        displayName: 'Data structures',\n        route: 'interview-prep/data-structures',\n        subMenu: dataStructuresMenu,\n    },\n    {\n        displayName: 'Async JS',\n        route: 'interview-prep/async-js',\n        subMenu: asyncJsMenu,\n    },\n    {\n        displayName: 'JS Fundamentals',\n        route: 'interview-prep/async-js',\n        subMenu: asyncJsMenu,\n    },\n    {\n        displayName: 'Web Basics',\n        route: 'interview-prep/web-fundamentals',\n        subMenu: webPerfMenu,\n    },\n];\n","import Markdown from 'markdown-to-jsx';\nimport React from 'react';\n\nconst eventEmittersMd = require(\"./markdowns/thinking-reactive/event-emitters.md\");\n\nexport const ThinkingReactive = () => (\n    <Markdown>{eventEmittersMd}</Markdown>\n);\n","import React from 'react';\nimport {ThinkingReactive} from './thinking-reactive';\n\nexport const RxJs = () => (\n    <ThinkingReactive />\n);\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport {Menu} from './layout/menu';\nimport {AlgorithmOverview} from './algorithms/overview';\nimport './App.css';\nimport {MENUS} from './layout/menu/constants';\nimport {RxJs} from './async-js/rx-js';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <Menu menus={MENUS} />\n        <Switch>\n          <Route\n            exact\n            path=\"interview-prep/algorithms\"\n            component={AlgorithmOverview}\n          />\n          <Route\n            exact\n            path=\"interview-prep/async-js/rx-js\"\n            component={RxJs}\n          />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}